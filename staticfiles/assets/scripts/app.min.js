/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _preloader = __webpack_require__(1);
	
	var _preloader2 = _interopRequireDefault(_preloader);
	
	var _svg4everybody = __webpack_require__(5);
	
	var _svg4everybody2 = _interopRequireDefault(_svg4everybody);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _button = __webpack_require__(6);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _sliderSquare = __webpack_require__(7);
	
	var _sliderSquare2 = _interopRequireDefault(_sliderSquare);
	
	var _sliderGallery = __webpack_require__(52);
	
	var _sliderGallery2 = _interopRequireDefault(_sliderGallery);
	
	var _SliderAccordion = __webpack_require__(53);
	
	var _SliderAccordion2 = _interopRequireDefault(_SliderAccordion);
	
	var _newsSlider = __webpack_require__(54);
	
	var _newsSlider2 = _interopRequireDefault(_newsSlider);
	
	var _albumSlider = __webpack_require__(55);
	
	var _albumSlider2 = _interopRequireDefault(_albumSlider);
	
	var _header = __webpack_require__(56);
	
	var _header2 = _interopRequireDefault(_header);
	
	var _interactiveMap = __webpack_require__(57);
	
	var _interactiveMap2 = _interopRequireDefault(_interactiveMap);
	
	var _profilePage = __webpack_require__(58);
	
	var _profilePage2 = _interopRequireDefault(_profilePage);
	
	var _newsPage = __webpack_require__(59);
	
	var _newsPage2 = _interopRequireDefault(_newsPage);
	
	var _MobileSlider = __webpack_require__(60);
	
	var _MobileSlider2 = _interopRequireDefault(_MobileSlider);
	
	var _cardsSection = __webpack_require__(61);
	
	var _cardsSection2 = _interopRequireDefault(_cardsSection);
	
	var _video = __webpack_require__(63);
	
	var _video2 = _interopRequireDefault(_video);
	
	__webpack_require__(123);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var mobileSliderInstances = [{ selector: '.event-slider' }, { selector: '.tournament-slider' }, { selector: '.place-slider' }];
	
	var accordeonSliderInstances = [{ selector: '.slider-coaches' }, { selector: '.slider-holes', responsiveImages: true }];
	
	(0, _jquery2.default)(function () {
		(0, _svg4everybody2.default)();
	
		var sliderSquare = new _sliderSquare2.default();
		sliderSquare.makeSlider();
	
		var header = new _header2.default();
		header.init();
	
		var interactiveMap = new _interactiveMap2.default();
		interactiveMap.init();
	
		var newsSlider = new _newsSlider2.default();
		newsSlider.makeSlider();
	
		var albumSlider = new _albumSlider2.default();
		albumSlider.makeSlider();
	
		var profilePage = new _profilePage2.default();
		profilePage.init();
	
		var newsPage = new _newsPage2.default();
		newsPage.init();
	
		mobileSliderInstances.forEach(function (instance) {
			var mobileSlider = new _MobileSlider2.default(instance);
			mobileSlider.makeSlider();
		});
	
		_cardsSection2.default.init();
	
		var sliderGallery = new _sliderGallery2.default();
		sliderGallery.makeSlider();
	
		accordeonSliderInstances.forEach(function (instance) {
			var sliderAccordion = new _SliderAccordion2.default(instance);
			sliderAccordion.makeSlider();
		});
	
		_video2.default.init();
	
		(0, _button2.default)();
	
		(0, _preloader2.default)();
	
		(0, _jquery2.default)('.js-fancybox').fancybox({
			tpl: {
				next: '<a title="Следующая картинка" class="fancybox-nav fancybox-next"><button></button></a>',
				prev: '<a title="Предыдущая картинка" class="fancybox-nav fancybox-prev"><button></button></a>',
				closeBtn: '<a title="Закрыть" class="fancybox-item fancybox-close"></a>'
			}
		});
	});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var $preloader = (0, _jquery2.default)('.js-preloader');
	
	exports.default = function () {
		$preloader.addClass('preloader_loaded');
	};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(3);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["jQuery"] = __webpack_require__(4);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-05-20T17:23Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];
	
	var document = window.document;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var support = {};
	
	
	
	var
		version = "2.2.4",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},
	
		isPlainObject: function( obj ) {
			var key;
	
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;
	
			code = jQuery.trim( code );
	
			if ( code ) {
	
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
	
					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval
	
					indirect( code );
				}
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {
	
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
	
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add( function() {
	
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}
	
			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	} );
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
	
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );
	
			} else {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		register: function( owner, initial ) {
			var value = initial || {};
	
			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;
	
			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {
	
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				stored = this.get( owner, key );
	
				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key === undefined ) {
				this.register( owner );
	
			} else {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
	
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
	
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}
	
				i = name.length;
	
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data, camelKey;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||
	
						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );
	
					if ( data !== undefined ) {
						return data;
					}
	
					camelKey = jQuery.camelCase( key );
	
					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {
	
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );
	
					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );
	
					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
	
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([\w:-]+)/ );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}
	
			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	
		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
	
		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,
	
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	
	
	var iframe,
		elemdisplay = {
	
			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			display = jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var documentElement = document.documentElement;
	
	
	
	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =
	
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
		}
	
		jQuery.extend( support, {
			pixelPosition: function() {
	
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
	
				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
	
				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {
	
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );
	
				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
	
					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );
	
				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );
	
				documentElement.removeChild( container );
				div.removeChild( marginDiv );
	
				return ret;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;
	
		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}
	
		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
	
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );
	
				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
	
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
	
			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
	
			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
	
			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}
	
			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
	
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
	
		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
	
						// Set corresponding property to false
						elem[ propName ] = false;
					}
	
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// Handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// The jqXHR state
				state = 0,
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
	
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
	
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );
	
	
	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {
	
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
	
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	return jQuery;
	}));


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(root, factory) {
	     true ? // AMD. Register as an anonymous module unless amdModuleId is set
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        return root.svg4everybody = factory();
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory() : root.svg4everybody = factory();
	}(this, function() {
	    /*! svg4everybody v2.1.9 | github.com/jonathantneal/svg4everybody */
	    function embed(parent, svg, target) {
	        // if the target exists
	        if (target) {
	            // create a document fragment to hold the contents of the target
	            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute("viewBox") && target.getAttribute("viewBox");
	            // conditionally set the viewBox on the svg
	            viewBox && svg.setAttribute("viewBox", viewBox);
	            // copy the contents of the clone into the fragment
	            for (// clone the target
	            var clone = target.cloneNode(!0); clone.childNodes.length; ) {
	                fragment.appendChild(clone.firstChild);
	            }
	            // append the fragment into the svg
	            parent.appendChild(fragment);
	        }
	    }
	    function loadreadystatechange(xhr) {
	        // listen to changes in the request
	        xhr.onreadystatechange = function() {
	            // if the request is ready
	            if (4 === xhr.readyState) {
	                // get the cached html document
	                var cachedDocument = xhr._cachedDocument;
	                // ensure the cached html document based on the xhr response
	                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(""), 
	                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item
	                xhr._embeds.splice(0).map(function(item) {
	                    // get the cached target
	                    var target = xhr._cachedTarget[item.id];
	                    // ensure the cached target
	                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), 
	                    // embed the target into the svg
	                    embed(item.parent, item.svg, target);
	                });
	            }
	        }, // test the ready state change immediately
	        xhr.onreadystatechange();
	    }
	    function svg4everybody(rawopts) {
	        function oninterval() {
	            // while the index exists in the live <use> collection
	            for (// get the cached <use> index
	            var index = 0; index < uses.length; ) {
	                // get the current <use>
	                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent), src = use.getAttribute("xlink:href") || use.getAttribute("href");
	                if (!src && opts.attributeName && (src = use.getAttribute(opts.attributeName)), 
	                svg && src) {
	                    if (polyfill) {
	                        if (!opts.validate || opts.validate(src, svg, use)) {
	                            // remove the <use> element
	                            parent.removeChild(use);
	                            // parse the src and get the url and id
	                            var srcSplit = src.split("#"), url = srcSplit.shift(), id = srcSplit.join("#");
	                            // if the link is external
	                            if (url.length) {
	                                // get the cached xhr request
	                                var xhr = requests[url];
	                                // ensure the xhr request exists
	                                xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open("GET", url), xhr.send(), 
	                                xhr._embeds = []), // add the svg and id as an item to the xhr embeds list
	                                xhr._embeds.push({
	                                    parent: parent,
	                                    svg: svg,
	                                    id: id
	                                }), // prepare the xhr ready state change event
	                                loadreadystatechange(xhr);
	                            } else {
	                                // embed the local id into the svg
	                                embed(parent, svg, document.getElementById(id));
	                            }
	                        } else {
	                            // increase the index when the previous value was not "valid"
	                            ++index, ++numberOfSvgUseElementsToBypass;
	                        }
	                    }
	                } else {
	                    // increase the index when the previous value was not "valid"
	                    ++index;
	                }
	            }
	            // continue the interval
	            (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) && requestAnimationFrame(oninterval, 67);
	        }
	        var polyfill, opts = Object(rawopts), newerIEUA = /\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/, webkitUA = /\bAppleWebKit\/(\d+)\b/, olderEdgeUA = /\bEdge\/12\.(\d+)\b/, edgeUA = /\bEdge\/.(\d+)\b/, inIframe = window.top !== window.self;
	        polyfill = "polyfill" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;
	        // create xhr requests object
	        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName("use"), numberOfSvgUseElementsToBypass = 0;
	        // conditionally start the interval if the polyfill is active
	        polyfill && oninterval();
	    }
	    function getSVGAncestor(node) {
	        for (var svg = node; "svg" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode); ) {}
	        return svg;
	    }
	    return svg4everybody;
	});

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
		var $buttons = (0, _jquery2.default)('.button');
	
		$buttons.click(function () {
			var $button = (0, _jquery2.default)(this);
	
			$button.addClass('button_animate');
			$button.blur();
			setTimeout(function () {
				$button.removeClass('button_animate');
			}, 600);
		});
	};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends2 = __webpack_require__(8);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _swiper = __webpack_require__(51);
	
	var _swiper2 = _interopRequireDefault(_swiper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SliderSquare = function () {
		function SliderSquare() {
			(0, _classCallCheck3.default)(this, SliderSquare);
	
			this.selector = '.slider-square';
			this.pagination = {
				el: this.selector + '__pagination',
				type: 'fraction'
			};
			this.navigation = {
				nextEl: this.selector + '__button_next',
				prevEl: this.selector + '__button_prev'
			};
			this.windwoWidth = (0, _jquery2.default)(window).width();
		}
	
		(0, _createClass3.default)(SliderSquare, [{
			key: 'init',
			value: function init() {
				var selector = this.selector,
				    pagination = this.pagination,
				    navigation = this.navigation;
	
	
				var settings = {
					slidesPerView: 1,
					spaceBetween: 0,
					pagination: pagination,
					navigation: navigation
				};
				var isSingleMobile = (0, _jquery2.default)(selector).hasClass('mobile-single');
	
				return new _swiper2.default(selector, {
					breakpoints: {
						// mobile
						767: (0, _extends3.default)({}, settings, {
							slidesPerView: 'auto',
							CSSWidthAndHeight: true,
							centeredSlides: !isSingleMobile,
							spaceBetween: 16,
							loop: !isSingleMobile
						}),
						// tablet
						1239: (0, _extends3.default)({}, settings),
						// desktop
						9999: (0, _extends3.default)({}, settings, {
							noSwiping: true,
							noSwipingClass: 'no-swiping'
						})
					}
				});
			}
		}, {
			key: 'makeSlider',
			value: function makeSlider() {
				var _this = this;
	
				if ((0, _jquery2.default)(this.selector).length) {
					var sliderSquare = this.init();
	
					window.addEventListener('resize', function () {
						if (_this.windwoWidth === (0, _jquery2.default)(window).width()) {
							return;
						} // handle mobile browsers viewport changes
	
						if (!sliderSquare.destroyed) {
							if (Array.isArray(sliderSquare)) {
								sliderSquare.forEach(function (instance) {
									instance.destroy();
								});
							} else {
								sliderSquare.destroy();
							}
						}
	
						_this.windwoWidth = (0, _jquery2.default)(window).width();
						sliderSquare = _this.init();
					});
				}
			}
		}]);
		return SliderSquare;
	}();
	
	exports.default = SliderSquare;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _assign = __webpack_require__(9);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(10), __esModule: true };

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(11);
	module.exports = __webpack_require__(14).Object.assign;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(12);
	
	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(27) });


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(13);
	var core = __webpack_require__(14);
	var ctx = __webpack_require__(15);
	var hide = __webpack_require__(17);
	var PROTOTYPE = 'prototype';
	
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && key in exports) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.5.3' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(16);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(18);
	var createDesc = __webpack_require__(26);
	module.exports = __webpack_require__(22) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(19);
	var IE8_DOM_DEFINE = __webpack_require__(21);
	var toPrimitive = __webpack_require__(25);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(22) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(20);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(22) && !__webpack_require__(23)(function () {
	  return Object.defineProperty(__webpack_require__(24)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(23)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 23 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(20);
	var document = __webpack_require__(13).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(20);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys = __webpack_require__(28);
	var gOPS = __webpack_require__(43);
	var pIE = __webpack_require__(44);
	var toObject = __webpack_require__(45);
	var IObject = __webpack_require__(32);
	var $assign = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(23)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(29);
	var enumBugKeys = __webpack_require__(42);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(30);
	var toIObject = __webpack_require__(31);
	var arrayIndexOf = __webpack_require__(35)(false);
	var IE_PROTO = __webpack_require__(39)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(32);
	var defined = __webpack_require__(34);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(33);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 33 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(31);
	var toLength = __webpack_require__(36);
	var toAbsoluteIndex = __webpack_require__(38);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(37);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 37 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(37);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(40)('keys');
	var uid = __webpack_require__(41);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(13);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};


/***/ }),
/* 41 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 43 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 44 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(34);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 46 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(48);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(49), __esModule: true };

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(50);
	var $Object = __webpack_require__(14).Object;
	module.exports = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(12);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(22), 'Object', { defineProperty: __webpack_require__(18).f });


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Swiper 4.2.0
	 * Most modern mobile touch slider and framework with hardware accelerated transitions
	 * http://www.idangero.us/swiper/
	 *
	 * Copyright 2014-2018 Vladimir Kharlampidi
	 *
	 * Released under the MIT License
	 *
	 * Released on: March 16, 2018
	 */
	
	(function (global, factory) {
		 true ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.Swiper = factory());
	}(this, (function () { 'use strict';
	
	/**
	 * SSR Window 1.0.0
	 * Better handling for window object in SSR environment
	 * https://github.com/nolimits4web/ssr-window
	 *
	 * Copyright 2018, Vladimir Kharlampidi
	 *
	 * Licensed under MIT
	 *
	 * Released on: February 10, 2018
	 */
	var d;
	if (typeof document === 'undefined') {
	  d = {
	    body: {},
	    addEventListener: function addEventListener() {},
	    removeEventListener: function removeEventListener() {},
	    activeElement: {
	      blur: function blur() {},
	      nodeName: '',
	    },
	    querySelector: function querySelector() {
	      return null;
	    },
	    querySelectorAll: function querySelectorAll() {
	      return [];
	    },
	    getElementById: function getElementById() {
	      return null;
	    },
	    createEvent: function createEvent() {
	      return {
	        initEvent: function initEvent() {},
	      };
	    },
	    createElement: function createElement() {
	      return {
	        children: [],
	        childNodes: [],
	        style: {},
	        setAttribute: function setAttribute() {},
	        getElementsByTagName: function getElementsByTagName() {
	          return [];
	        },
	      };
	    },
	    location: { hash: '' },
	  };
	} else {
	  // eslint-disable-next-line
	  d = document;
	}
	
	var doc = d;
	
	var w;
	if (typeof window === 'undefined') {
	  w = {
	    document: doc,
	    navigator: {
	      userAgent: '',
	    },
	    location: {},
	    history: {},
	    CustomEvent: function CustomEvent() {
	      return this;
	    },
	    addEventListener: function addEventListener() {},
	    removeEventListener: function removeEventListener() {},
	    getComputedStyle: function getComputedStyle() {
	      return {
	        getPropertyValue: function getPropertyValue() {
	          return '';
	        },
	      };
	    },
	    Image: function Image() {},
	    Date: function Date() {},
	    screen: {},
	    setTimeout: function setTimeout() {},
	    clearTimeout: function clearTimeout() {},
	  };
	} else {
	  // eslint-disable-next-line
	  w = window;
	}
	
	var win = w;
	
	/**
	 * Dom7 2.0.3
	 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
	 * http://framework7.io/docs/dom.html
	 *
	 * Copyright 2018, Vladimir Kharlampidi
	 * The iDangero.us
	 * http://www.idangero.us/
	 *
	 * Licensed under MIT
	 *
	 * Released on: February 21, 2018
	 */
	
	var Dom7 = function Dom7(arr) {
	  var self = this;
	  // Create array-like object
	  for (var i = 0; i < arr.length; i += 1) {
	    self[i] = arr[i];
	  }
	  self.length = arr.length;
	  // Return collection with methods
	  return this;
	};
	
	function $(selector, context) {
	  var arr = [];
	  var i = 0;
	  if (selector && !context) {
	    if (selector instanceof Dom7) {
	      return selector;
	    }
	  }
	  if (selector) {
	      // String
	    if (typeof selector === 'string') {
	      var els;
	      var tempParent;
	      var html = selector.trim();
	      if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
	        var toCreate = 'div';
	        if (html.indexOf('<li') === 0) { toCreate = 'ul'; }
	        if (html.indexOf('<tr') === 0) { toCreate = 'tbody'; }
	        if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) { toCreate = 'tr'; }
	        if (html.indexOf('<tbody') === 0) { toCreate = 'table'; }
	        if (html.indexOf('<option') === 0) { toCreate = 'select'; }
	        tempParent = doc.createElement(toCreate);
	        tempParent.innerHTML = html;
	        for (i = 0; i < tempParent.childNodes.length; i += 1) {
	          arr.push(tempParent.childNodes[i]);
	        }
	      } else {
	        if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {
	          // Pure ID selector
	          els = [doc.getElementById(selector.trim().split('#')[1])];
	        } else {
	          // Other selectors
	          els = (context || doc).querySelectorAll(selector.trim());
	        }
	        for (i = 0; i < els.length; i += 1) {
	          if (els[i]) { arr.push(els[i]); }
	        }
	      }
	    } else if (selector.nodeType || selector === win || selector === doc) {
	      // Node/element
	      arr.push(selector);
	    } else if (selector.length > 0 && selector[0].nodeType) {
	      // Array of elements or instance of Dom
	      for (i = 0; i < selector.length; i += 1) {
	        arr.push(selector[i]);
	      }
	    }
	  }
	  return new Dom7(arr);
	}
	
	$.fn = Dom7.prototype;
	$.Class = Dom7;
	$.Dom7 = Dom7;
	
	function unique(arr) {
	  var uniqueArray = [];
	  for (var i = 0; i < arr.length; i += 1) {
	    if (uniqueArray.indexOf(arr[i]) === -1) { uniqueArray.push(arr[i]); }
	  }
	  return uniqueArray;
	}
	
	// Classes and attributes
	function addClass(className) {
	  var this$1 = this;
	
	  if (typeof className === 'undefined') {
	    return this;
	  }
	  var classes = className.split(' ');
	  for (var i = 0; i < classes.length; i += 1) {
	    for (var j = 0; j < this.length; j += 1) {
	      if (typeof this$1[j].classList !== 'undefined') { this$1[j].classList.add(classes[i]); }
	    }
	  }
	  return this;
	}
	function removeClass(className) {
	  var this$1 = this;
	
	  var classes = className.split(' ');
	  for (var i = 0; i < classes.length; i += 1) {
	    for (var j = 0; j < this.length; j += 1) {
	      if (typeof this$1[j].classList !== 'undefined') { this$1[j].classList.remove(classes[i]); }
	    }
	  }
	  return this;
	}
	function hasClass(className) {
	  if (!this[0]) { return false; }
	  return this[0].classList.contains(className);
	}
	function toggleClass(className) {
	  var this$1 = this;
	
	  var classes = className.split(' ');
	  for (var i = 0; i < classes.length; i += 1) {
	    for (var j = 0; j < this.length; j += 1) {
	      if (typeof this$1[j].classList !== 'undefined') { this$1[j].classList.toggle(classes[i]); }
	    }
	  }
	  return this;
	}
	function attr(attrs, value) {
	  var arguments$1 = arguments;
	  var this$1 = this;
	
	  if (arguments.length === 1 && typeof attrs === 'string') {
	    // Get attr
	    if (this[0]) { return this[0].getAttribute(attrs); }
	    return undefined;
	  }
	
	  // Set attrs
	  for (var i = 0; i < this.length; i += 1) {
	    if (arguments$1.length === 2) {
	      // String
	      this$1[i].setAttribute(attrs, value);
	    } else {
	      // Object
	      // eslint-disable-next-line
	      for (var attrName in attrs) {
	        this$1[i][attrName] = attrs[attrName];
	        this$1[i].setAttribute(attrName, attrs[attrName]);
	      }
	    }
	  }
	  return this;
	}
	// eslint-disable-next-line
	function removeAttr(attr) {
	  var this$1 = this;
	
	  for (var i = 0; i < this.length; i += 1) {
	    this$1[i].removeAttribute(attr);
	  }
	  return this;
	}
	function data(key, value) {
	  var this$1 = this;
	
	  var el;
	  if (typeof value === 'undefined') {
	    el = this[0];
	    // Get value
	    if (el) {
	      if (el.dom7ElementDataStorage && (key in el.dom7ElementDataStorage)) {
	        return el.dom7ElementDataStorage[key];
	      }
	
	      var dataKey = el.getAttribute(("data-" + key));
	      if (dataKey) {
	        return dataKey;
	      }
	      return undefined;
	    }
	    return undefined;
	  }
	
	  // Set value
	  for (var i = 0; i < this.length; i += 1) {
	    el = this$1[i];
	    if (!el.dom7ElementDataStorage) { el.dom7ElementDataStorage = {}; }
	    el.dom7ElementDataStorage[key] = value;
	  }
	  return this;
	}
	// Transforms
	// eslint-disable-next-line
	function transform(transform) {
	  var this$1 = this;
	
	  for (var i = 0; i < this.length; i += 1) {
	    var elStyle = this$1[i].style;
	    elStyle.webkitTransform = transform;
	    elStyle.transform = transform;
	  }
	  return this;
	}
	function transition(duration) {
	  var this$1 = this;
	
	  if (typeof duration !== 'string') {
	    duration = duration + "ms"; // eslint-disable-line
	  }
	  for (var i = 0; i < this.length; i += 1) {
	    var elStyle = this$1[i].style;
	    elStyle.webkitTransitionDuration = duration;
	    elStyle.transitionDuration = duration;
	  }
	  return this;
	}
	// Events
	function on() {
	  var this$1 = this;
	  var assign;
	
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];
	  var eventType = args[0];
	  var targetSelector = args[1];
	  var listener = args[2];
	  var capture = args[3];
	  if (typeof args[1] === 'function') {
	    (assign = args, eventType = assign[0], listener = assign[1], capture = assign[2]);
	    targetSelector = undefined;
	  }
	  if (!capture) { capture = false; }
	
	  function handleLiveEvent(e) {
	    var target = e.target;
	    if (!target) { return; }
	    var eventData = e.target.dom7EventData || [];
	    eventData.unshift(e);
	    if ($(target).is(targetSelector)) { listener.apply(target, eventData); }
	    else {
	      var parents = $(target).parents(); // eslint-disable-line
	      for (var k = 0; k < parents.length; k += 1) {
	        if ($(parents[k]).is(targetSelector)) { listener.apply(parents[k], eventData); }
	      }
	    }
	  }
	  function handleEvent(e) {
	    var eventData = e && e.target ? e.target.dom7EventData || [] : [];
	    eventData.unshift(e);
	    listener.apply(this, eventData);
	  }
	  var events = eventType.split(' ');
	  var j;
	  for (var i = 0; i < this.length; i += 1) {
	    var el = this$1[i];
	    if (!targetSelector) {
	      for (j = 0; j < events.length; j += 1) {
	        if (!el.dom7Listeners) { el.dom7Listeners = []; }
	        el.dom7Listeners.push({
	          type: eventType,
	          listener: listener,
	          proxyListener: handleEvent,
	        });
	        el.addEventListener(events[j], handleEvent, capture);
	      }
	    } else {
	      // Live events
	      for (j = 0; j < events.length; j += 1) {
	        if (!el.dom7LiveListeners) { el.dom7LiveListeners = []; }
	        el.dom7LiveListeners.push({
	          type: eventType,
	          listener: listener,
	          proxyListener: handleLiveEvent,
	        });
	        el.addEventListener(events[j], handleLiveEvent, capture);
	      }
	    }
	  }
	  return this;
	}
	function off() {
	  var this$1 = this;
	  var assign;
	
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];
	  var eventType = args[0];
	  var targetSelector = args[1];
	  var listener = args[2];
	  var capture = args[3];
	  if (typeof args[1] === 'function') {
	    (assign = args, eventType = assign[0], listener = assign[1], capture = assign[2]);
	    targetSelector = undefined;
	  }
	  if (!capture) { capture = false; }
	
	  var events = eventType.split(' ');
	  for (var i = 0; i < events.length; i += 1) {
	    for (var j = 0; j < this.length; j += 1) {
	      var el = this$1[j];
	      if (!targetSelector) {
	        if (el.dom7Listeners) {
	          for (var k = 0; k < el.dom7Listeners.length; k += 1) {
	            if (listener) {
	              if (el.dom7Listeners[k].listener === listener) {
	                el.removeEventListener(events[i], el.dom7Listeners[k].proxyListener, capture);
	              }
	            } else if (el.dom7Listeners[k].type === events[i]) {
	              el.removeEventListener(events[i], el.dom7Listeners[k].proxyListener, capture);
	            }
	          }
	        }
	      } else if (el.dom7LiveListeners) {
	        for (var k$1 = 0; k$1 < el.dom7LiveListeners.length; k$1 += 1) {
	          if (listener) {
	            if (el.dom7LiveListeners[k$1].listener === listener) {
	              el.removeEventListener(events[i], el.dom7LiveListeners[k$1].proxyListener, capture);
	            }
	          } else if (el.dom7LiveListeners[k$1].type === events[i]) {
	            el.removeEventListener(events[i], el.dom7LiveListeners[k$1].proxyListener, capture);
	          }
	        }
	      }
	    }
	  }
	  return this;
	}
	function trigger() {
	  var this$1 = this;
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];
	
	  var events = args[0].split(' ');
	  var eventData = args[1];
	  for (var i = 0; i < events.length; i += 1) {
	    for (var j = 0; j < this.length; j += 1) {
	      var evt = (void 0);
	      try {
	        evt = new win.CustomEvent(events[i], {
	          detail: eventData,
	          bubbles: true,
	          cancelable: true,
	        });
	      } catch (e) {
	        evt = doc.createEvent('Event');
	        evt.initEvent(events[i], true, true);
	        evt.detail = eventData;
	      }
	      // eslint-disable-next-line
	      this$1[j].dom7EventData = args.filter(function (data, dataIndex) { return dataIndex > 0; });
	      this$1[j].dispatchEvent(evt);
	      this$1[j].dom7EventData = [];
	      delete this$1[j].dom7EventData;
	    }
	  }
	  return this;
	}
	function transitionEnd(callback) {
	  var events = ['webkitTransitionEnd', 'transitionend'];
	  var dom = this;
	  var i;
	  function fireCallBack(e) {
	    /* jshint validthis:true */
	    if (e.target !== this) { return; }
	    callback.call(this, e);
	    for (i = 0; i < events.length; i += 1) {
	      dom.off(events[i], fireCallBack);
	    }
	  }
	  if (callback) {
	    for (i = 0; i < events.length; i += 1) {
	      dom.on(events[i], fireCallBack);
	    }
	  }
	  return this;
	}
	function outerWidth(includeMargins) {
	  if (this.length > 0) {
	    if (includeMargins) {
	      // eslint-disable-next-line
	      var styles = this.styles();
	      return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));
	    }
	    return this[0].offsetWidth;
	  }
	  return null;
	}
	function outerHeight(includeMargins) {
	  if (this.length > 0) {
	    if (includeMargins) {
	      // eslint-disable-next-line
	      var styles = this.styles();
	      return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));
	    }
	    return this[0].offsetHeight;
	  }
	  return null;
	}
	function offset() {
	  if (this.length > 0) {
	    var el = this[0];
	    var box = el.getBoundingClientRect();
	    var body = doc.body;
	    var clientTop = el.clientTop || body.clientTop || 0;
	    var clientLeft = el.clientLeft || body.clientLeft || 0;
	    var scrollTop = el === win ? win.scrollY : el.scrollTop;
	    var scrollLeft = el === win ? win.scrollX : el.scrollLeft;
	    return {
	      top: (box.top + scrollTop) - clientTop,
	      left: (box.left + scrollLeft) - clientLeft,
	    };
	  }
	
	  return null;
	}
	function styles() {
	  if (this[0]) { return win.getComputedStyle(this[0], null); }
	  return {};
	}
	function css(props, value) {
	  var this$1 = this;
	
	  var i;
	  if (arguments.length === 1) {
	    if (typeof props === 'string') {
	      if (this[0]) { return win.getComputedStyle(this[0], null).getPropertyValue(props); }
	    } else {
	      for (i = 0; i < this.length; i += 1) {
	        // eslint-disable-next-line
	        for (var prop in props) {
	          this$1[i].style[prop] = props[prop];
	        }
	      }
	      return this;
	    }
	  }
	  if (arguments.length === 2 && typeof props === 'string') {
	    for (i = 0; i < this.length; i += 1) {
	      this$1[i].style[props] = value;
	    }
	    return this;
	  }
	  return this;
	}
	// Iterate over the collection passing elements to `callback`
	function each(callback) {
	  var this$1 = this;
	
	  // Don't bother continuing without a callback
	  if (!callback) { return this; }
	  // Iterate over the current collection
	  for (var i = 0; i < this.length; i += 1) {
	    // If the callback returns false
	    if (callback.call(this$1[i], i, this$1[i]) === false) {
	      // End the loop early
	      return this$1;
	    }
	  }
	  // Return `this` to allow chained DOM operations
	  return this;
	}
	// eslint-disable-next-line
	function html(html) {
	  var this$1 = this;
	
	  if (typeof html === 'undefined') {
	    return this[0] ? this[0].innerHTML : undefined;
	  }
	
	  for (var i = 0; i < this.length; i += 1) {
	    this$1[i].innerHTML = html;
	  }
	  return this;
	}
	// eslint-disable-next-line
	function text(text) {
	  var this$1 = this;
	
	  if (typeof text === 'undefined') {
	    if (this[0]) {
	      return this[0].textContent.trim();
	    }
	    return null;
	  }
	
	  for (var i = 0; i < this.length; i += 1) {
	    this$1[i].textContent = text;
	  }
	  return this;
	}
	function is(selector) {
	  var el = this[0];
	  var compareWith;
	  var i;
	  if (!el || typeof selector === 'undefined') { return false; }
	  if (typeof selector === 'string') {
	    if (el.matches) { return el.matches(selector); }
	    else if (el.webkitMatchesSelector) { return el.webkitMatchesSelector(selector); }
	    else if (el.msMatchesSelector) { return el.msMatchesSelector(selector); }
	
	    compareWith = $(selector);
	    for (i = 0; i < compareWith.length; i += 1) {
	      if (compareWith[i] === el) { return true; }
	    }
	    return false;
	  } else if (selector === doc) { return el === doc; }
	  else if (selector === win) { return el === win; }
	
	  if (selector.nodeType || selector instanceof Dom7) {
	    compareWith = selector.nodeType ? [selector] : selector;
	    for (i = 0; i < compareWith.length; i += 1) {
	      if (compareWith[i] === el) { return true; }
	    }
	    return false;
	  }
	  return false;
	}
	function index() {
	  var child = this[0];
	  var i;
	  if (child) {
	    i = 0;
	    // eslint-disable-next-line
	    while ((child = child.previousSibling) !== null) {
	      if (child.nodeType === 1) { i += 1; }
	    }
	    return i;
	  }
	  return undefined;
	}
	// eslint-disable-next-line
	function eq(index) {
	  if (typeof index === 'undefined') { return this; }
	  var length = this.length;
	  var returnIndex;
	  if (index > length - 1) {
	    return new Dom7([]);
	  }
	  if (index < 0) {
	    returnIndex = length + index;
	    if (returnIndex < 0) { return new Dom7([]); }
	    return new Dom7([this[returnIndex]]);
	  }
	  return new Dom7([this[index]]);
	}
	function append() {
	  var this$1 = this;
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];
	
	  var newChild;
	
	  for (var k = 0; k < args.length; k += 1) {
	    newChild = args[k];
	    for (var i = 0; i < this.length; i += 1) {
	      if (typeof newChild === 'string') {
	        var tempDiv = doc.createElement('div');
	        tempDiv.innerHTML = newChild;
	        while (tempDiv.firstChild) {
	          this$1[i].appendChild(tempDiv.firstChild);
	        }
	      } else if (newChild instanceof Dom7) {
	        for (var j = 0; j < newChild.length; j += 1) {
	          this$1[i].appendChild(newChild[j]);
	        }
	      } else {
	        this$1[i].appendChild(newChild);
	      }
	    }
	  }
	
	  return this;
	}
	function prepend(newChild) {
	  var this$1 = this;
	
	  var i;
	  var j;
	  for (i = 0; i < this.length; i += 1) {
	    if (typeof newChild === 'string') {
	      var tempDiv = doc.createElement('div');
	      tempDiv.innerHTML = newChild;
	      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
	        this$1[i].insertBefore(tempDiv.childNodes[j], this$1[i].childNodes[0]);
	      }
	    } else if (newChild instanceof Dom7) {
	      for (j = 0; j < newChild.length; j += 1) {
	        this$1[i].insertBefore(newChild[j], this$1[i].childNodes[0]);
	      }
	    } else {
	      this$1[i].insertBefore(newChild, this$1[i].childNodes[0]);
	    }
	  }
	  return this;
	}
	function next(selector) {
	  if (this.length > 0) {
	    if (selector) {
	      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
	        return new Dom7([this[0].nextElementSibling]);
	      }
	      return new Dom7([]);
	    }
	
	    if (this[0].nextElementSibling) { return new Dom7([this[0].nextElementSibling]); }
	    return new Dom7([]);
	  }
	  return new Dom7([]);
	}
	function nextAll(selector) {
	  var nextEls = [];
	  var el = this[0];
	  if (!el) { return new Dom7([]); }
	  while (el.nextElementSibling) {
	    var next = el.nextElementSibling; // eslint-disable-line
	    if (selector) {
	      if ($(next).is(selector)) { nextEls.push(next); }
	    } else { nextEls.push(next); }
	    el = next;
	  }
	  return new Dom7(nextEls);
	}
	function prev(selector) {
	  if (this.length > 0) {
	    var el = this[0];
	    if (selector) {
	      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
	        return new Dom7([el.previousElementSibling]);
	      }
	      return new Dom7([]);
	    }
	
	    if (el.previousElementSibling) { return new Dom7([el.previousElementSibling]); }
	    return new Dom7([]);
	  }
	  return new Dom7([]);
	}
	function prevAll(selector) {
	  var prevEls = [];
	  var el = this[0];
	  if (!el) { return new Dom7([]); }
	  while (el.previousElementSibling) {
	    var prev = el.previousElementSibling; // eslint-disable-line
	    if (selector) {
	      if ($(prev).is(selector)) { prevEls.push(prev); }
	    } else { prevEls.push(prev); }
	    el = prev;
	  }
	  return new Dom7(prevEls);
	}
	function parent(selector) {
	  var this$1 = this;
	
	  var parents = []; // eslint-disable-line
	  for (var i = 0; i < this.length; i += 1) {
	    if (this$1[i].parentNode !== null) {
	      if (selector) {
	        if ($(this$1[i].parentNode).is(selector)) { parents.push(this$1[i].parentNode); }
	      } else {
	        parents.push(this$1[i].parentNode);
	      }
	    }
	  }
	  return $(unique(parents));
	}
	function parents(selector) {
	  var this$1 = this;
	
	  var parents = []; // eslint-disable-line
	  for (var i = 0; i < this.length; i += 1) {
	    var parent = this$1[i].parentNode; // eslint-disable-line
	    while (parent) {
	      if (selector) {
	        if ($(parent).is(selector)) { parents.push(parent); }
	      } else {
	        parents.push(parent);
	      }
	      parent = parent.parentNode;
	    }
	  }
	  return $(unique(parents));
	}
	function closest(selector) {
	  var closest = this; // eslint-disable-line
	  if (typeof selector === 'undefined') {
	    return new Dom7([]);
	  }
	  if (!closest.is(selector)) {
	    closest = closest.parents(selector).eq(0);
	  }
	  return closest;
	}
	function find(selector) {
	  var this$1 = this;
	
	  var foundElements = [];
	  for (var i = 0; i < this.length; i += 1) {
	    var found = this$1[i].querySelectorAll(selector);
	    for (var j = 0; j < found.length; j += 1) {
	      foundElements.push(found[j]);
	    }
	  }
	  return new Dom7(foundElements);
	}
	function children(selector) {
	  var this$1 = this;
	
	  var children = []; // eslint-disable-line
	  for (var i = 0; i < this.length; i += 1) {
	    var childNodes = this$1[i].childNodes;
	
	    for (var j = 0; j < childNodes.length; j += 1) {
	      if (!selector) {
	        if (childNodes[j].nodeType === 1) { children.push(childNodes[j]); }
	      } else if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) {
	        children.push(childNodes[j]);
	      }
	    }
	  }
	  return new Dom7(unique(children));
	}
	function remove() {
	  var this$1 = this;
	
	  for (var i = 0; i < this.length; i += 1) {
	    if (this$1[i].parentNode) { this$1[i].parentNode.removeChild(this$1[i]); }
	  }
	  return this;
	}
	function add() {
	  var args = [], len = arguments.length;
	  while ( len-- ) args[ len ] = arguments[ len ];
	
	  var dom = this;
	  var i;
	  var j;
	  for (i = 0; i < args.length; i += 1) {
	    var toAdd = $(args[i]);
	    for (j = 0; j < toAdd.length; j += 1) {
	      dom[dom.length] = toAdd[j];
	      dom.length += 1;
	    }
	  }
	  return dom;
	}
	
	var Methods = {
	  addClass: addClass,
	  removeClass: removeClass,
	  hasClass: hasClass,
	  toggleClass: toggleClass,
	  attr: attr,
	  removeAttr: removeAttr,
	  data: data,
	  transform: transform,
	  transition: transition,
	  on: on,
	  off: off,
	  trigger: trigger,
	  transitionEnd: transitionEnd,
	  outerWidth: outerWidth,
	  outerHeight: outerHeight,
	  offset: offset,
	  css: css,
	  each: each,
	  html: html,
	  text: text,
	  is: is,
	  index: index,
	  eq: eq,
	  append: append,
	  prepend: prepend,
	  next: next,
	  nextAll: nextAll,
	  prev: prev,
	  prevAll: prevAll,
	  parent: parent,
	  parents: parents,
	  closest: closest,
	  find: find,
	  children: children,
	  remove: remove,
	  add: add,
	  styles: styles,
	};
	
	Object.keys(Methods).forEach(function (methodName) {
	  $.fn[methodName] = Methods[methodName];
	});
	
	var Utils = {
	  deleteProps: function deleteProps(obj) {
	    var object = obj;
	    Object.keys(object).forEach(function (key) {
	      try {
	        object[key] = null;
	      } catch (e) {
	        // no getter for object
	      }
	      try {
	        delete object[key];
	      } catch (e) {
	        // something got wrong
	      }
	    });
	  },
	  nextTick: function nextTick(callback, delay) {
	    if ( delay === void 0 ) delay = 0;
	
	    return setTimeout(callback, delay);
	  },
	  now: function now() {
	    return Date.now();
	  },
	  getTranslate: function getTranslate(el, axis) {
	    if ( axis === void 0 ) axis = 'x';
	
	    var matrix;
	    var curTransform;
	    var transformMatrix;
	
	    var curStyle = win.getComputedStyle(el, null);
	
	    if (win.WebKitCSSMatrix) {
	      curTransform = curStyle.transform || curStyle.webkitTransform;
	      if (curTransform.split(',').length > 6) {
	        curTransform = curTransform.split(', ').map(function (a) { return a.replace(',', '.'); }).join(', ');
	      }
	      // Some old versions of Webkit choke when 'none' is passed; pass
	      // empty string instead in this case
	      transformMatrix = new win.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
	    } else {
	      transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
	      matrix = transformMatrix.toString().split(',');
	    }
	
	    if (axis === 'x') {
	      // Latest Chrome and webkits Fix
	      if (win.WebKitCSSMatrix) { curTransform = transformMatrix.m41; }
	      // Crazy IE10 Matrix
	      else if (matrix.length === 16) { curTransform = parseFloat(matrix[12]); }
	      // Normal Browsers
	      else { curTransform = parseFloat(matrix[4]); }
	    }
	    if (axis === 'y') {
	      // Latest Chrome and webkits Fix
	      if (win.WebKitCSSMatrix) { curTransform = transformMatrix.m42; }
	      // Crazy IE10 Matrix
	      else if (matrix.length === 16) { curTransform = parseFloat(matrix[13]); }
	      // Normal Browsers
	      else { curTransform = parseFloat(matrix[5]); }
	    }
	    return curTransform || 0;
	  },
	  parseUrlQuery: function parseUrlQuery(url) {
	    var query = {};
	    var urlToParse = url || win.location.href;
	    var i;
	    var params;
	    var param;
	    var length;
	    if (typeof urlToParse === 'string' && urlToParse.length) {
	      urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\S*\?/, '') : '';
	      params = urlToParse.split('&').filter(function (paramsPart) { return paramsPart !== ''; });
	      length = params.length;
	
	      for (i = 0; i < length; i += 1) {
	        param = params[i].replace(/#\S+/g, '').split('=');
	        query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';
	      }
	    }
	    return query;
	  },
	  isObject: function isObject(o) {
	    return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;
	  },
	  extend: function extend() {
	    var args = [], len$1 = arguments.length;
	    while ( len$1-- ) args[ len$1 ] = arguments[ len$1 ];
	
	    var to = Object(args[0]);
	    for (var i = 1; i < args.length; i += 1) {
	      var nextSource = args[i];
	      if (nextSource !== undefined && nextSource !== null) {
	        var keysArray = Object.keys(Object(nextSource));
	        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
	          var nextKey = keysArray[nextIndex];
	          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
	          if (desc !== undefined && desc.enumerable) {
	            if (Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
	              Utils.extend(to[nextKey], nextSource[nextKey]);
	            } else if (!Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
	              to[nextKey] = {};
	              Utils.extend(to[nextKey], nextSource[nextKey]);
	            } else {
	              to[nextKey] = nextSource[nextKey];
	            }
	          }
	        }
	      }
	    }
	    return to;
	  },
	};
	
	var Support = (function Support() {
	  var testDiv = doc.createElement('div');
	  return {
	    touch: (win.Modernizr && win.Modernizr.touch === true) || (function checkTouch() {
	      return !!(('ontouchstart' in win) || (win.DocumentTouch && doc instanceof win.DocumentTouch));
	    }()),
	
	    pointerEvents: !!(win.navigator.pointerEnabled || win.PointerEvent),
	    prefixedPointerEvents: !!win.navigator.msPointerEnabled,
	
	    transition: (function checkTransition() {
	      var style = testDiv.style;
	      return ('transition' in style || 'webkitTransition' in style || 'MozTransition' in style);
	    }()),
	    transforms3d: (win.Modernizr && win.Modernizr.csstransforms3d === true) || (function checkTransforms3d() {
	      var style = testDiv.style;
	      return ('webkitPerspective' in style || 'MozPerspective' in style || 'OPerspective' in style || 'MsPerspective' in style || 'perspective' in style);
	    }()),
	
	    flexbox: (function checkFlexbox() {
	      var style = testDiv.style;
	      var styles = ('alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient').split(' ');
	      for (var i = 0; i < styles.length; i += 1) {
	        if (styles[i] in style) { return true; }
	      }
	      return false;
	    }()),
	
	    observer: (function checkObserver() {
	      return ('MutationObserver' in win || 'WebkitMutationObserver' in win);
	    }()),
	
	    passiveListener: (function checkPassiveListener() {
	      var supportsPassive = false;
	      try {
	        var opts = Object.defineProperty({}, 'passive', {
	          // eslint-disable-next-line
	          get: function get() {
	            supportsPassive = true;
	          },
	        });
	        win.addEventListener('testPassiveListener', null, opts);
	      } catch (e) {
	        // No support
	      }
	      return supportsPassive;
	    }()),
	
	    gestures: (function checkGestures() {
	      return 'ongesturestart' in win;
	    }()),
	  };
	}());
	
	var SwiperClass = function SwiperClass(params) {
	  if ( params === void 0 ) params = {};
	
	  var self = this;
	  self.params = params;
	
	  // Events
	  self.eventsListeners = {};
	
	  if (self.params && self.params.on) {
	    Object.keys(self.params.on).forEach(function (eventName) {
	      self.on(eventName, self.params.on[eventName]);
	    });
	  }
	};
	
	var staticAccessors = { components: { configurable: true } };
	SwiperClass.prototype.on = function on (events, handler, priority) {
	  var self = this;
	  if (typeof handler !== 'function') { return self; }
	  var method = priority ? 'unshift' : 'push';
	  events.split(' ').forEach(function (event) {
	    if (!self.eventsListeners[event]) { self.eventsListeners[event] = []; }
	    self.eventsListeners[event][method](handler);
	  });
	  return self;
	};
	SwiperClass.prototype.once = function once (events, handler, priority) {
	  var self = this;
	  if (typeof handler !== 'function') { return self; }
	  function onceHandler() {
	      var args = [], len = arguments.length;
	      while ( len-- ) args[ len ] = arguments[ len ];
	
	    handler.apply(self, args);
	    self.off(events, onceHandler);
	  }
	  return self.on(events, onceHandler, priority);
	};
	SwiperClass.prototype.off = function off (events, handler) {
	  var self = this;
	  events.split(' ').forEach(function (event) {
	    if (typeof handler === 'undefined') {
	      self.eventsListeners[event] = [];
	    } else {
	      self.eventsListeners[event].forEach(function (eventHandler, index) {
	        if (eventHandler === handler) {
	          self.eventsListeners[event].splice(index, 1);
	        }
	      });
	    }
	  });
	  return self;
	};
	SwiperClass.prototype.emit = function emit () {
	    var args = [], len = arguments.length;
	    while ( len-- ) args[ len ] = arguments[ len ];
	
	  var self = this;
	  if (!self.eventsListeners) { return self; }
	  var events;
	  var data;
	  var context;
	  if (typeof args[0] === 'string' || Array.isArray(args[0])) {
	    events = args[0];
	    data = args.slice(1, args.length);
	    context = self;
	  } else {
	    events = args[0].events;
	    data = args[0].data;
	    context = args[0].context || self;
	  }
	  var eventsArray = Array.isArray(events) ? events : events.split(' ');
	  eventsArray.forEach(function (event) {
	    if (self.eventsListeners[event]) {
	      var handlers = [];
	      self.eventsListeners[event].forEach(function (eventHandler) {
	        handlers.push(eventHandler);
	      });
	      handlers.forEach(function (eventHandler) {
	        eventHandler.apply(context, data);
	      });
	    }
	  });
	  return self;
	};
	SwiperClass.prototype.useModulesParams = function useModulesParams (instanceParams) {
	  var instance = this;
	  if (!instance.modules) { return; }
	  Object.keys(instance.modules).forEach(function (moduleName) {
	    var module = instance.modules[moduleName];
	    // Extend params
	    if (module.params) {
	      Utils.extend(instanceParams, module.params);
	    }
	  });
	};
	SwiperClass.prototype.useModules = function useModules (modulesParams) {
	    if ( modulesParams === void 0 ) modulesParams = {};
	
	  var instance = this;
	  if (!instance.modules) { return; }
	  Object.keys(instance.modules).forEach(function (moduleName) {
	    var module = instance.modules[moduleName];
	    var moduleParams = modulesParams[moduleName] || {};
	    // Extend instance methods and props
	    if (module.instance) {
	      Object.keys(module.instance).forEach(function (modulePropName) {
	        var moduleProp = module.instance[modulePropName];
	        if (typeof moduleProp === 'function') {
	          instance[modulePropName] = moduleProp.bind(instance);
	        } else {
	          instance[modulePropName] = moduleProp;
	        }
	      });
	    }
	    // Add event listeners
	    if (module.on && instance.on) {
	      Object.keys(module.on).forEach(function (moduleEventName) {
	        instance.on(moduleEventName, module.on[moduleEventName]);
	      });
	    }
	
	    // Module create callback
	    if (module.create) {
	      module.create.bind(instance)(moduleParams);
	    }
	  });
	};
	staticAccessors.components.set = function (components) {
	  var Class = this;
	  if (!Class.use) { return; }
	  Class.use(components);
	};
	SwiperClass.installModule = function installModule (module) {
	    var params = [], len = arguments.length - 1;
	    while ( len-- > 0 ) params[ len ] = arguments[ len + 1 ];
	
	  var Class = this;
	  if (!Class.prototype.modules) { Class.prototype.modules = {}; }
	  var name = module.name || (((Object.keys(Class.prototype.modules).length) + "_" + (Utils.now())));
	  Class.prototype.modules[name] = module;
	  // Prototype
	  if (module.proto) {
	    Object.keys(module.proto).forEach(function (key) {
	      Class.prototype[key] = module.proto[key];
	    });
	  }
	  // Class
	  if (module.static) {
	    Object.keys(module.static).forEach(function (key) {
	      Class[key] = module.static[key];
	    });
	  }
	  // Callback
	  if (module.install) {
	    module.install.apply(Class, params);
	  }
	  return Class;
	};
	SwiperClass.use = function use (module) {
	    var params = [], len = arguments.length - 1;
	    while ( len-- > 0 ) params[ len ] = arguments[ len + 1 ];
	
	  var Class = this;
	  if (Array.isArray(module)) {
	    module.forEach(function (m) { return Class.installModule(m); });
	    return Class;
	  }
	  return Class.installModule.apply(Class, [ module ].concat( params ));
	};
	
	Object.defineProperties( SwiperClass, staticAccessors );
	
	function updateSize () {
	  var swiper = this;
	  var width;
	  var height;
	  var $el = swiper.$el;
	  if (typeof swiper.params.width !== 'undefined') {
	    width = swiper.params.width;
	  } else {
	    width = $el[0].clientWidth;
	  }
	  if (typeof swiper.params.height !== 'undefined') {
	    height = swiper.params.height;
	  } else {
	    height = $el[0].clientHeight;
	  }
	  if ((width === 0 && swiper.isHorizontal()) || (height === 0 && swiper.isVertical())) {
	    return;
	  }
	
	  // Subtract paddings
	  width = width - parseInt($el.css('padding-left'), 10) - parseInt($el.css('padding-right'), 10);
	  height = height - parseInt($el.css('padding-top'), 10) - parseInt($el.css('padding-bottom'), 10);
	
	  Utils.extend(swiper, {
	    width: width,
	    height: height,
	    size: swiper.isHorizontal() ? width : height,
	  });
	}
	
	function updateSlides () {
	  var swiper = this;
	  var params = swiper.params;
	
	  var $wrapperEl = swiper.$wrapperEl;
	  var swiperSize = swiper.size;
	  var rtl = swiper.rtlTranslate;
	  var wrongRTL = swiper.wrongRTL;
	  var slides = $wrapperEl.children(("." + (swiper.params.slideClass)));
	  var isVirtual = swiper.virtual && params.virtual.enabled;
	  var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
	  var snapGrid = [];
	  var slidesGrid = [];
	  var slidesSizesGrid = [];
	
	  var offsetBefore = params.slidesOffsetBefore;
	  if (typeof offsetBefore === 'function') {
	    offsetBefore = params.slidesOffsetBefore.call(swiper);
	  }
	
	  var offsetAfter = params.slidesOffsetAfter;
	  if (typeof offsetAfter === 'function') {
	    offsetAfter = params.slidesOffsetAfter.call(swiper);
	  }
	
	  var previousSlidesLength = slidesLength;
	  var previousSnapGridLength = swiper.snapGrid.length;
	  var previousSlidesGridLength = swiper.snapGrid.length;
	
	  var spaceBetween = params.spaceBetween;
	  var slidePosition = -offsetBefore;
	  var prevSlideSize = 0;
	  var index = 0;
	  if (typeof swiperSize === 'undefined') {
	    return;
	  }
	  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
	    spaceBetween = (parseFloat(spaceBetween.replace('%', '')) / 100) * swiperSize;
	  }
	
	  swiper.virtualSize = -spaceBetween;
	
	  // reset margins
	  if (rtl) { slides.css({ marginLeft: '', marginTop: '' }); }
	  else { slides.css({ marginRight: '', marginBottom: '' }); }
	
	  var slidesNumberEvenToRows;
	  if (params.slidesPerColumn > 1) {
	    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
	      slidesNumberEvenToRows = slidesLength;
	    } else {
	      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
	    }
	    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
	      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
	    }
	  }
	
	  // Calc slides
	  var slideSize;
	  var slidesPerColumn = params.slidesPerColumn;
	  var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
	  var numFullColumns = slidesPerRow - ((params.slidesPerColumn * slidesPerRow) - slidesLength);
	  for (var i = 0; i < slidesLength; i += 1) {
	    slideSize = 0;
	    var slide = slides.eq(i);
	    if (params.slidesPerColumn > 1) {
	      // Set slides order
	      var newSlideOrderIndex = (void 0);
	      var column = (void 0);
	      var row = (void 0);
	      if (params.slidesPerColumnFill === 'column') {
	        column = Math.floor(i / slidesPerColumn);
	        row = i - (column * slidesPerColumn);
	        if (column > numFullColumns || (column === numFullColumns && row === slidesPerColumn - 1)) {
	          row += 1;
	          if (row >= slidesPerColumn) {
	            row = 0;
	            column += 1;
	          }
	        }
	        newSlideOrderIndex = column + ((row * slidesNumberEvenToRows) / slidesPerColumn);
	        slide
	          .css({
	            '-webkit-box-ordinal-group': newSlideOrderIndex,
	            '-moz-box-ordinal-group': newSlideOrderIndex,
	            '-ms-flex-order': newSlideOrderIndex,
	            '-webkit-order': newSlideOrderIndex,
	            order: newSlideOrderIndex,
	          });
	      } else {
	        row = Math.floor(i / slidesPerRow);
	        column = i - (row * slidesPerRow);
	      }
	      slide
	        .css(
	          ("margin-" + (swiper.isHorizontal() ? 'top' : 'left')),
	          (row !== 0 && params.spaceBetween) && (((params.spaceBetween) + "px"))
	        )
	        .attr('data-swiper-column', column)
	        .attr('data-swiper-row', row);
	    }
	    if (slide.css('display') === 'none') { continue; } // eslint-disable-line
	
	    if (params.slidesPerView === 'auto') {
	      var slideStyles = win.getComputedStyle(slide[0], null);
	      if (swiper.isHorizontal()) {
	        slideSize = slide[0].getBoundingClientRect().width +
	          parseFloat(slideStyles.getPropertyValue('margin-left')) +
	          parseFloat(slideStyles.getPropertyValue('margin-right'));
	      } else {
	        slideSize = slide[0].getBoundingClientRect().height +
	          parseFloat(slideStyles.getPropertyValue('margin-top')) +
	          parseFloat(slideStyles.getPropertyValue('margin-bottom'));
	      }
	      if (params.roundLengths) { slideSize = Math.floor(slideSize); }
	    } else {
	      slideSize = (swiperSize - ((params.slidesPerView - 1) * spaceBetween)) / params.slidesPerView;
	      if (params.roundLengths) { slideSize = Math.floor(slideSize); }
	
	      if (slides[i]) {
	        if (swiper.isHorizontal()) {
	          slides[i].style.width = slideSize + "px";
	        } else {
	          slides[i].style.height = slideSize + "px";
	        }
	      }
	    }
	    if (slides[i]) {
	      slides[i].swiperSlideSize = slideSize;
	    }
	    slidesSizesGrid.push(slideSize);
	
	
	    if (params.centeredSlides) {
	      slidePosition = slidePosition + (slideSize / 2) + (prevSlideSize / 2) + spaceBetween;
	      if (prevSlideSize === 0 && i !== 0) { slidePosition = slidePosition - (swiperSize / 2) - spaceBetween; }
	      if (i === 0) { slidePosition = slidePosition - (swiperSize / 2) - spaceBetween; }
	      if (Math.abs(slidePosition) < 1 / 1000) { slidePosition = 0; }
	      if ((index) % params.slidesPerGroup === 0) { snapGrid.push(slidePosition); }
	      slidesGrid.push(slidePosition);
	    } else {
	      if ((index) % params.slidesPerGroup === 0) { snapGrid.push(slidePosition); }
	      slidesGrid.push(slidePosition);
	      slidePosition = slidePosition + slideSize + spaceBetween;
	    }
	
	    swiper.virtualSize += slideSize + spaceBetween;
	
	    prevSlideSize = slideSize;
	
	    index += 1;
	  }
	  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
	  var newSlidesGrid;
	
	  if (
	    rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
	    $wrapperEl.css({ width: ((swiper.virtualSize + params.spaceBetween) + "px") });
	  }
	  if (!Support.flexbox || params.setWrapperSize) {
	    if (swiper.isHorizontal()) { $wrapperEl.css({ width: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
	    else { $wrapperEl.css({ height: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
	  }
	
	  if (params.slidesPerColumn > 1) {
	    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
	    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
	    if (swiper.isHorizontal()) { $wrapperEl.css({ width: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
	    else { $wrapperEl.css({ height: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
	    if (params.centeredSlides) {
	      newSlidesGrid = [];
	      for (var i$1 = 0; i$1 < snapGrid.length; i$1 += 1) {
	        if (snapGrid[i$1] < swiper.virtualSize + snapGrid[0]) { newSlidesGrid.push(snapGrid[i$1]); }
	      }
	      snapGrid = newSlidesGrid;
	    }
	  }
	
	  // Remove last grid elements depending on width
	  if (!params.centeredSlides) {
	    newSlidesGrid = [];
	    for (var i$2 = 0; i$2 < snapGrid.length; i$2 += 1) {
	      if (snapGrid[i$2] <= swiper.virtualSize - swiperSize) {
	        newSlidesGrid.push(snapGrid[i$2]);
	      }
	    }
	    snapGrid = newSlidesGrid;
	    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
	      snapGrid.push(swiper.virtualSize - swiperSize);
	    }
	  }
	  if (snapGrid.length === 0) { snapGrid = [0]; }
	
	  if (params.spaceBetween !== 0) {
	    if (swiper.isHorizontal()) {
	      if (rtl) { slides.css({ marginLeft: (spaceBetween + "px") }); }
	      else { slides.css({ marginRight: (spaceBetween + "px") }); }
	    } else { slides.css({ marginBottom: (spaceBetween + "px") }); }
	  }
	
	  Utils.extend(swiper, {
	    slides: slides,
	    snapGrid: snapGrid,
	    slidesGrid: slidesGrid,
	    slidesSizesGrid: slidesSizesGrid,
	  });
	
	  if (slidesLength !== previousSlidesLength) {
	    swiper.emit('slidesLengthChange');
	  }
	  if (snapGrid.length !== previousSnapGridLength) {
	    if (swiper.params.watchOverflow) { swiper.checkOverflow(); }
	    swiper.emit('snapGridLengthChange');
	  }
	  if (slidesGrid.length !== previousSlidesGridLength) {
	    swiper.emit('slidesGridLengthChange');
	  }
	
	  if (params.watchSlidesProgress || params.watchSlidesVisibility) {
	    swiper.updateSlidesOffset();
	  }
	}
	
	function updateAutoHeight (speed) {
	  var swiper = this;
	  var activeSlides = [];
	  var newHeight = 0;
	  var i;
	  if (typeof speed === 'number') {
	    swiper.setTransition(speed);
	  } else if (speed === true) {
	    swiper.setTransition(swiper.params.speed);
	  }
	  // Find slides currently in view
	  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
	    for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
	      var index = swiper.activeIndex + i;
	      if (index > swiper.slides.length) { break; }
	      activeSlides.push(swiper.slides.eq(index)[0]);
	    }
	  } else {
	    activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);
	  }
	
	  // Find new height from highest slide in view
	  for (i = 0; i < activeSlides.length; i += 1) {
	    if (typeof activeSlides[i] !== 'undefined') {
	      var height = activeSlides[i].offsetHeight;
	      newHeight = height > newHeight ? height : newHeight;
	    }
	  }
	
	  // Update Height
	  if (newHeight) { swiper.$wrapperEl.css('height', (newHeight + "px")); }
	}
	
	function updateSlidesOffset () {
	  var swiper = this;
	  var slides = swiper.slides;
	  for (var i = 0; i < slides.length; i += 1) {
	    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
	  }
	}
	
	function updateSlidesProgress (translate) {
	  if ( translate === void 0 ) translate = this.translate || 0;
	
	  var swiper = this;
	  var params = swiper.params;
	
	  var slides = swiper.slides;
	  var rtl = swiper.rtlTranslate;
	
	  if (slides.length === 0) { return; }
	  if (typeof slides[0].swiperSlideOffset === 'undefined') { swiper.updateSlidesOffset(); }
	
	  var offsetCenter = -translate;
	  if (rtl) { offsetCenter = translate; }
	
	  // Visible Slides
	  slides.removeClass(params.slideVisibleClass);
	
	  for (var i = 0; i < slides.length; i += 1) {
	    var slide = slides[i];
	    var slideProgress =
	      (
	        (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0)) - slide.swiperSlideOffset
	      ) / (slide.swiperSlideSize + params.spaceBetween);
	    if (params.watchSlidesVisibility) {
	      var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
	      var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
	      var isVisible =
	                (slideBefore >= 0 && slideBefore < swiper.size) ||
	                (slideAfter > 0 && slideAfter <= swiper.size) ||
	                (slideBefore <= 0 && slideAfter >= swiper.size);
	      if (isVisible) {
	        slides.eq(i).addClass(params.slideVisibleClass);
	      }
	    }
	    slide.progress = rtl ? -slideProgress : slideProgress;
	  }
	}
	
	function updateProgress (translate) {
	  if ( translate === void 0 ) translate = this.translate || 0;
	
	  var swiper = this;
	  var params = swiper.params;
	
	  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
	  var progress = swiper.progress;
	  var isBeginning = swiper.isBeginning;
	  var isEnd = swiper.isEnd;
	  var wasBeginning = isBeginning;
	  var wasEnd = isEnd;
	  if (translatesDiff === 0) {
	    progress = 0;
	    isBeginning = true;
	    isEnd = true;
	  } else {
	    progress = (translate - swiper.minTranslate()) / (translatesDiff);
	    isBeginning = progress <= 0;
	    isEnd = progress >= 1;
	  }
	  Utils.extend(swiper, {
	    progress: progress,
	    isBeginning: isBeginning,
	    isEnd: isEnd,
	  });
	
	  if (params.watchSlidesProgress || params.watchSlidesVisibility) { swiper.updateSlidesProgress(translate); }
	
	  if (isBeginning && !wasBeginning) {
	    swiper.emit('reachBeginning toEdge');
	  }
	  if (isEnd && !wasEnd) {
	    swiper.emit('reachEnd toEdge');
	  }
	  if ((wasBeginning && !isBeginning) || (wasEnd && !isEnd)) {
	    swiper.emit('fromEdge');
	  }
	
	  swiper.emit('progress', progress);
	}
	
	function updateSlidesClasses () {
	  var swiper = this;
	
	  var slides = swiper.slides;
	  var params = swiper.params;
	  var $wrapperEl = swiper.$wrapperEl;
	  var activeIndex = swiper.activeIndex;
	  var realIndex = swiper.realIndex;
	  var isVirtual = swiper.virtual && params.virtual.enabled;
	
	  slides.removeClass(((params.slideActiveClass) + " " + (params.slideNextClass) + " " + (params.slidePrevClass) + " " + (params.slideDuplicateActiveClass) + " " + (params.slideDuplicateNextClass) + " " + (params.slideDuplicatePrevClass)));
	
	  var activeSlide;
	  if (isVirtual) {
	    activeSlide = swiper.$wrapperEl.find(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + activeIndex + "\"]"));
	  } else {
	    activeSlide = slides.eq(activeIndex);
	  }
	
	  // Active classes
	  activeSlide.addClass(params.slideActiveClass);
	
	  if (params.loop) {
	    // Duplicate to all looped slides
	    if (activeSlide.hasClass(params.slideDuplicateClass)) {
	      $wrapperEl
	        .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + realIndex + "\"]"))
	        .addClass(params.slideDuplicateActiveClass);
	    } else {
	      $wrapperEl
	        .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]"))
	        .addClass(params.slideDuplicateActiveClass);
	    }
	  }
	  // Next Slide
	  var nextSlide = activeSlide.nextAll(("." + (params.slideClass))).eq(0).addClass(params.slideNextClass);
	  if (params.loop && nextSlide.length === 0) {
	    nextSlide = slides.eq(0);
	    nextSlide.addClass(params.slideNextClass);
	  }
	  // Prev Slide
	  var prevSlide = activeSlide.prevAll(("." + (params.slideClass))).eq(0).addClass(params.slidePrevClass);
	  if (params.loop && prevSlide.length === 0) {
	    prevSlide = slides.eq(-1);
	    prevSlide.addClass(params.slidePrevClass);
	  }
	  if (params.loop) {
	    // Duplicate to all looped slides
	    if (nextSlide.hasClass(params.slideDuplicateClass)) {
	      $wrapperEl
	        .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + (nextSlide.attr('data-swiper-slide-index')) + "\"]"))
	        .addClass(params.slideDuplicateNextClass);
	    } else {
	      $wrapperEl
	        .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + (nextSlide.attr('data-swiper-slide-index')) + "\"]"))
	        .addClass(params.slideDuplicateNextClass);
	    }
	    if (prevSlide.hasClass(params.slideDuplicateClass)) {
	      $wrapperEl
	        .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + (prevSlide.attr('data-swiper-slide-index')) + "\"]"))
	        .addClass(params.slideDuplicatePrevClass);
	    } else {
	      $wrapperEl
	        .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + (prevSlide.attr('data-swiper-slide-index')) + "\"]"))
	        .addClass(params.slideDuplicatePrevClass);
	    }
	  }
	}
	
	function updateActiveIndex (newActiveIndex) {
	  var swiper = this;
	  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
	  var slidesGrid = swiper.slidesGrid;
	  var snapGrid = swiper.snapGrid;
	  var params = swiper.params;
	  var previousIndex = swiper.activeIndex;
	  var previousRealIndex = swiper.realIndex;
	  var previousSnapIndex = swiper.snapIndex;
	  var activeIndex = newActiveIndex;
	  var snapIndex;
	  if (typeof activeIndex === 'undefined') {
	    for (var i = 0; i < slidesGrid.length; i += 1) {
	      if (typeof slidesGrid[i + 1] !== 'undefined') {
	        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - ((slidesGrid[i + 1] - slidesGrid[i]) / 2)) {
	          activeIndex = i;
	        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
	          activeIndex = i + 1;
	        }
	      } else if (translate >= slidesGrid[i]) {
	        activeIndex = i;
	      }
	    }
	    // Normalize slideIndex
	    if (params.normalizeSlideIndex) {
	      if (activeIndex < 0 || typeof activeIndex === 'undefined') { activeIndex = 0; }
	    }
	  }
	  if (snapGrid.indexOf(translate) >= 0) {
	    snapIndex = snapGrid.indexOf(translate);
	  } else {
	    snapIndex = Math.floor(activeIndex / params.slidesPerGroup);
	  }
	  if (snapIndex >= snapGrid.length) { snapIndex = snapGrid.length - 1; }
	  if (activeIndex === previousIndex) {
	    if (snapIndex !== previousSnapIndex) {
	      swiper.snapIndex = snapIndex;
	      swiper.emit('snapIndexChange');
	    }
	    return;
	  }
	
	  // Get real index
	  var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);
	
	  Utils.extend(swiper, {
	    snapIndex: snapIndex,
	    realIndex: realIndex,
	    previousIndex: previousIndex,
	    activeIndex: activeIndex,
	  });
	  swiper.emit('activeIndexChange');
	  swiper.emit('snapIndexChange');
	  if (previousRealIndex !== realIndex) {
	    swiper.emit('realIndexChange');
	  }
	  swiper.emit('slideChange');
	}
	
	function updateClickedSlide (e) {
	  var swiper = this;
	  var params = swiper.params;
	  var slide = $(e.target).closest(("." + (params.slideClass)))[0];
	  var slideFound = false;
	  if (slide) {
	    for (var i = 0; i < swiper.slides.length; i += 1) {
	      if (swiper.slides[i] === slide) { slideFound = true; }
	    }
	  }
	
	  if (slide && slideFound) {
	    swiper.clickedSlide = slide;
	    if (swiper.virtual && swiper.params.virtual.enabled) {
	      swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);
	    } else {
	      swiper.clickedIndex = $(slide).index();
	    }
	  } else {
	    swiper.clickedSlide = undefined;
	    swiper.clickedIndex = undefined;
	    return;
	  }
	  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
	    swiper.slideToClickedSlide();
	  }
	}
	
	var update = {
	  updateSize: updateSize,
	  updateSlides: updateSlides,
	  updateAutoHeight: updateAutoHeight,
	  updateSlidesOffset: updateSlidesOffset,
	  updateSlidesProgress: updateSlidesProgress,
	  updateProgress: updateProgress,
	  updateSlidesClasses: updateSlidesClasses,
	  updateActiveIndex: updateActiveIndex,
	  updateClickedSlide: updateClickedSlide,
	};
	
	function getTranslate (axis) {
	  if ( axis === void 0 ) axis = this.isHorizontal() ? 'x' : 'y';
	
	  var swiper = this;
	
	  var params = swiper.params;
	  var rtl = swiper.rtlTranslate;
	  var translate = swiper.translate;
	  var $wrapperEl = swiper.$wrapperEl;
	
	  if (params.virtualTranslate) {
	    return rtl ? -translate : translate;
	  }
	
	  var currentTranslate = Utils.getTranslate($wrapperEl[0], axis);
	  if (rtl) { currentTranslate = -currentTranslate; }
	
	  return currentTranslate || 0;
	}
	
	function setTranslate (translate, byController) {
	  var swiper = this;
	  var rtl = swiper.rtlTranslate;
	  var params = swiper.params;
	  var $wrapperEl = swiper.$wrapperEl;
	  var progress = swiper.progress;
	  var x = 0;
	  var y = 0;
	  var z = 0;
	
	  if (swiper.isHorizontal()) {
	    x = rtl ? -translate : translate;
	  } else {
	    y = translate;
	  }
	
	  if (params.roundLengths) {
	    x = Math.floor(x);
	    y = Math.floor(y);
	  }
	
	  if (!params.virtualTranslate) {
	    if (Support.transforms3d) { $wrapperEl.transform(("translate3d(" + x + "px, " + y + "px, " + z + "px)")); }
	    else { $wrapperEl.transform(("translate(" + x + "px, " + y + "px)")); }
	  }
	
	  swiper.translate = swiper.isHorizontal() ? x : y;
	
	  // Check if we need to update progress
	  var newProgress;
	  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
	  if (translatesDiff === 0) {
	    newProgress = 0;
	  } else {
	    newProgress = (translate - swiper.minTranslate()) / (translatesDiff);
	  }
	  if (newProgress !== progress) {
	    swiper.updateProgress(translate);
	  }
	
	  swiper.emit('setTranslate', swiper.translate, byController);
	}
	
	function minTranslate () {
	  return (-this.snapGrid[0]);
	}
	
	function maxTranslate () {
	  return (-this.snapGrid[this.snapGrid.length - 1]);
	}
	
	var translate = {
	  getTranslate: getTranslate,
	  setTranslate: setTranslate,
	  minTranslate: minTranslate,
	  maxTranslate: maxTranslate,
	};
	
	function setTransition (duration, byController) {
	  var swiper = this;
	
	  swiper.$wrapperEl.transition(duration);
	
	  swiper.emit('setTransition', duration, byController);
	}
	
	function transitionStart (runCallbacks, direction) {
	  if ( runCallbacks === void 0 ) runCallbacks = true;
	
	  var swiper = this;
	  var activeIndex = swiper.activeIndex;
	  var params = swiper.params;
	  var previousIndex = swiper.previousIndex;
	  if (params.autoHeight) {
	    swiper.updateAutoHeight();
	  }
	
	  var dir = direction;
	  if (!dir) {
	    if (activeIndex > previousIndex) { dir = 'next'; }
	    else if (activeIndex < previousIndex) { dir = 'prev'; }
	    else { dir = 'reset'; }
	  }
	
	  swiper.emit('transitionStart');
	
	  if (runCallbacks && activeIndex !== previousIndex) {
	    if (dir === 'reset') {
	      swiper.emit('slideResetTransitionStart');
	      return;
	    }
	    swiper.emit('slideChangeTransitionStart');
	    if (dir === 'next') {
	      swiper.emit('slideNextTransitionStart');
	    } else {
	      swiper.emit('slidePrevTransitionStart');
	    }
	  }
	}
	
	function transitionEnd$1 (runCallbacks, direction) {
	  if ( runCallbacks === void 0 ) runCallbacks = true;
	
	  var swiper = this;
	  var activeIndex = swiper.activeIndex;
	  var previousIndex = swiper.previousIndex;
	  swiper.animating = false;
	  swiper.setTransition(0);
	
	  var dir = direction;
	  if (!dir) {
	    if (activeIndex > previousIndex) { dir = 'next'; }
	    else if (activeIndex < previousIndex) { dir = 'prev'; }
	    else { dir = 'reset'; }
	  }
	
	  swiper.emit('transitionEnd');
	
	  if (runCallbacks && activeIndex !== previousIndex) {
	    if (dir === 'reset') {
	      swiper.emit('slideResetTransitionEnd');
	      return;
	    }
	    swiper.emit('slideChangeTransitionEnd');
	    if (dir === 'next') {
	      swiper.emit('slideNextTransitionEnd');
	    } else {
	      swiper.emit('slidePrevTransitionEnd');
	    }
	  }
	}
	
	var transition$1 = {
	  setTransition: setTransition,
	  transitionStart: transitionStart,
	  transitionEnd: transitionEnd$1,
	};
	
	function slideTo (index, speed, runCallbacks, internal) {
	  if ( index === void 0 ) index = 0;
	  if ( speed === void 0 ) speed = this.params.speed;
	  if ( runCallbacks === void 0 ) runCallbacks = true;
	
	  var swiper = this;
	  var slideIndex = index;
	  if (slideIndex < 0) { slideIndex = 0; }
	
	  var params = swiper.params;
	  var snapGrid = swiper.snapGrid;
	  var slidesGrid = swiper.slidesGrid;
	  var previousIndex = swiper.previousIndex;
	  var activeIndex = swiper.activeIndex;
	  var rtl = swiper.rtlTranslate;
	  var $wrapperEl = swiper.$wrapperEl;
	  if (swiper.animating && params.preventIntercationOnTransition) {
	    return false;
	  }
	
	  var snapIndex = Math.floor(slideIndex / params.slidesPerGroup);
	  if (snapIndex >= snapGrid.length) { snapIndex = snapGrid.length - 1; }
	
	  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
	    swiper.emit('beforeSlideChangeStart');
	  }
	
	  var translate = -snapGrid[snapIndex];
	
	  // Update progress
	  swiper.updateProgress(translate);
	
	  // Normalize slideIndex
	  if (params.normalizeSlideIndex) {
	    for (var i = 0; i < slidesGrid.length; i += 1) {
	      if (-Math.floor(translate * 100) >= Math.floor(slidesGrid[i] * 100)) {
	        slideIndex = i;
	      }
	    }
	  }
	  // Directions locks
	  if (swiper.initialized && slideIndex !== activeIndex) {
	    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
	      return false;
	    }
	    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
	      if ((activeIndex || 0) !== slideIndex) { return false; }
	    }
	  }
	
	  var direction;
	  if (slideIndex > activeIndex) { direction = 'next'; }
	  else if (slideIndex < activeIndex) { direction = 'prev'; }
	  else { direction = 'reset'; }
	
	
	  // Update Index
	  if ((rtl && -translate === swiper.translate) || (!rtl && translate === swiper.translate)) {
	    swiper.updateActiveIndex(slideIndex);
	    // Update Height
	    if (params.autoHeight) {
	      swiper.updateAutoHeight();
	    }
	    swiper.updateSlidesClasses();
	    if (params.effect !== 'slide') {
	      swiper.setTranslate(translate);
	    }
	    if (direction !== 'reset') {
	      swiper.transitionStart(runCallbacks, direction);
	      swiper.transitionEnd(runCallbacks, direction);
	    }
	    return false;
	  }
	
	  if (speed === 0 || !Support.transition) {
	    swiper.setTransition(0);
	    swiper.setTranslate(translate);
	    swiper.updateActiveIndex(slideIndex);
	    swiper.updateSlidesClasses();
	    swiper.emit('beforeTransitionStart', speed, internal);
	    swiper.transitionStart(runCallbacks, direction);
	    swiper.transitionEnd(runCallbacks, direction);
	  } else {
	    swiper.setTransition(speed);
	    swiper.setTranslate(translate);
	    swiper.updateActiveIndex(slideIndex);
	    swiper.updateSlidesClasses();
	    swiper.emit('beforeTransitionStart', speed, internal);
	    swiper.transitionStart(runCallbacks, direction);
	    if (!swiper.animating) {
	      swiper.animating = true;
	      $wrapperEl.transitionEnd(function () {
	        if (!swiper || swiper.destroyed) { return; }
	        swiper.transitionEnd(runCallbacks, direction);
	      });
	    }
	  }
	
	  return true;
	}
	
	function slideToLoop (index, speed, runCallbacks, internal) {
	  if ( index === void 0 ) index = 0;
	  if ( speed === void 0 ) speed = this.params.speed;
	  if ( runCallbacks === void 0 ) runCallbacks = true;
	
	  var swiper = this;
	  var newIndex = index;
	  if (swiper.params.loop) {
	    newIndex += swiper.loopedSlides;
	  }
	
	  return swiper.slideTo(newIndex, speed, runCallbacks, internal);
	}
	
	/* eslint no-unused-vars: "off" */
	function slideNext (speed, runCallbacks, internal) {
	  if ( speed === void 0 ) speed = this.params.speed;
	  if ( runCallbacks === void 0 ) runCallbacks = true;
	
	  var swiper = this;
	  var params = swiper.params;
	  var animating = swiper.animating;
	  if (params.loop) {
	    if (animating) { return false; }
	    swiper.loopFix();
	    // eslint-disable-next-line
	    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
	    return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
	  }
	  return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
	}
	
	/* eslint no-unused-vars: "off" */
	function slidePrev (speed, runCallbacks, internal) {
	  if ( speed === void 0 ) speed = this.params.speed;
	  if ( runCallbacks === void 0 ) runCallbacks = true;
	
	  var swiper = this;
	  var params = swiper.params;
	  var animating = swiper.animating;
	
	  if (params.loop) {
	    if (animating) { return false; }
	    swiper.loopFix();
	    // eslint-disable-next-line
	    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
	    return swiper.slideTo(swiper.activeIndex - 1, speed, runCallbacks, internal);
	  }
	  return swiper.slideTo(swiper.activeIndex - 1, speed, runCallbacks, internal);
	}
	
	/* eslint no-unused-vars: "off" */
	function slideReset (speed, runCallbacks, internal) {
	  if ( speed === void 0 ) speed = this.params.speed;
	  if ( runCallbacks === void 0 ) runCallbacks = true;
	
	  var swiper = this;
	  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
	}
	
	/* eslint no-unused-vars: "off" */
	function slideToClosest (speed, runCallbacks, internal) {
	  if ( speed === void 0 ) speed = this.params.speed;
	  if ( runCallbacks === void 0 ) runCallbacks = true;
	
	  var swiper = this;
	  var index = swiper.activeIndex;
	  var snapIndex = Math.floor(index / swiper.params.slidesPerGroup);
	
	  if (snapIndex < swiper.snapGrid.length - 1) {
	    var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
	
	    var currentSnap = swiper.snapGrid[snapIndex];
	    var nextSnap = swiper.snapGrid[snapIndex + 1];
	
	    if ((translate - currentSnap) > (nextSnap - currentSnap) / 2) {
	      index = swiper.params.slidesPerGroup;
	    }
	  }
	
	  return swiper.slideTo(index, speed, runCallbacks, internal);
	}
	
	function slideToClickedSlide () {
	  var swiper = this;
	  var params = swiper.params;
	  var $wrapperEl = swiper.$wrapperEl;
	
	  var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
	  var slideToIndex = swiper.clickedIndex;
	  var realIndex;
	  if (params.loop) {
	    if (swiper.animating) { return; }
	    realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);
	    if (params.centeredSlides) {
	      if (
	        (slideToIndex < swiper.loopedSlides - (slidesPerView / 2)) ||
	        (slideToIndex > (swiper.slides.length - swiper.loopedSlides) + (slidesPerView / 2))
	      ) {
	        swiper.loopFix();
	        slideToIndex = $wrapperEl
	          .children(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + (params.slideDuplicateClass) + ")"))
	          .eq(0)
	          .index();
	
	        Utils.nextTick(function () {
	          swiper.slideTo(slideToIndex);
	        });
	      } else {
	        swiper.slideTo(slideToIndex);
	      }
	    } else if (slideToIndex > swiper.slides.length - slidesPerView) {
	      swiper.loopFix();
	      slideToIndex = $wrapperEl
	        .children(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + (params.slideDuplicateClass) + ")"))
	        .eq(0)
	        .index();
	
	      Utils.nextTick(function () {
	        swiper.slideTo(slideToIndex);
	      });
	    } else {
	      swiper.slideTo(slideToIndex);
	    }
	  } else {
	    swiper.slideTo(slideToIndex);
	  }
	}
	
	var slide = {
	  slideTo: slideTo,
	  slideToLoop: slideToLoop,
	  slideNext: slideNext,
	  slidePrev: slidePrev,
	  slideReset: slideReset,
	  slideToClosest: slideToClosest,
	  slideToClickedSlide: slideToClickedSlide,
	};
	
	function loopCreate () {
	  var swiper = this;
	  var params = swiper.params;
	  var $wrapperEl = swiper.$wrapperEl;
	  // Remove duplicated slides
	  $wrapperEl.children(("." + (params.slideClass) + "." + (params.slideDuplicateClass))).remove();
	
	  var slides = $wrapperEl.children(("." + (params.slideClass)));
	
	  if (params.loopFillGroupWithBlank) {
	    var blankSlidesNum = params.slidesPerGroup - (slides.length % params.slidesPerGroup);
	    if (blankSlidesNum !== params.slidesPerGroup) {
	      for (var i = 0; i < blankSlidesNum; i += 1) {
	        var blankNode = $(doc.createElement('div')).addClass(((params.slideClass) + " " + (params.slideBlankClass)));
	        $wrapperEl.append(blankNode);
	      }
	      slides = $wrapperEl.children(("." + (params.slideClass)));
	    }
	  }
	
	  if (params.slidesPerView === 'auto' && !params.loopedSlides) { params.loopedSlides = slides.length; }
	
	  swiper.loopedSlides = parseInt(params.loopedSlides || params.slidesPerView, 10);
	  swiper.loopedSlides += params.loopAdditionalSlides;
	  if (swiper.loopedSlides > slides.length) {
	    swiper.loopedSlides = slides.length;
	  }
	
	  var prependSlides = [];
	  var appendSlides = [];
	  slides.each(function (index, el) {
	    var slide = $(el);
	    if (index < swiper.loopedSlides) { appendSlides.push(el); }
	    if (index < slides.length && index >= slides.length - swiper.loopedSlides) { prependSlides.push(el); }
	    slide.attr('data-swiper-slide-index', index);
	  });
	  for (var i$1 = 0; i$1 < appendSlides.length; i$1 += 1) {
	    $wrapperEl.append($(appendSlides[i$1].cloneNode(true)).addClass(params.slideDuplicateClass));
	  }
	  for (var i$2 = prependSlides.length - 1; i$2 >= 0; i$2 -= 1) {
	    $wrapperEl.prepend($(prependSlides[i$2].cloneNode(true)).addClass(params.slideDuplicateClass));
	  }
	}
	
	function loopFix () {
	  var swiper = this;
	  var params = swiper.params;
	  var activeIndex = swiper.activeIndex;
	  var slides = swiper.slides;
	  var loopedSlides = swiper.loopedSlides;
	  var allowSlidePrev = swiper.allowSlidePrev;
	  var allowSlideNext = swiper.allowSlideNext;
	  var snapGrid = swiper.snapGrid;
	  var rtl = swiper.rtlTranslate;
	  var newIndex;
	  swiper.allowSlidePrev = true;
	  swiper.allowSlideNext = true;
	
	  var snapTranslate = -snapGrid[activeIndex];
	  var diff = snapTranslate - swiper.getTranslate();
	
	
	  // Fix For Negative Oversliding
	  if (activeIndex < loopedSlides) {
	    newIndex = (slides.length - (loopedSlides * 3)) + activeIndex;
	    newIndex += loopedSlides;
	    var slideChanged = swiper.slideTo(newIndex, 0, false, true);
	    if (slideChanged && diff !== 0) {
	      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
	    }
	  } else if ((params.slidesPerView === 'auto' && activeIndex >= loopedSlides * 2) || (activeIndex > slides.length - (params.slidesPerView * 2))) {
	    // Fix For Positive Oversliding
	    newIndex = -slides.length + activeIndex + loopedSlides;
	    newIndex += loopedSlides;
	    var slideChanged$1 = swiper.slideTo(newIndex, 0, false, true);
	    if (slideChanged$1 && diff !== 0) {
	      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
	    }
	  }
	  swiper.allowSlidePrev = allowSlidePrev;
	  swiper.allowSlideNext = allowSlideNext;
	}
	
	function loopDestroy () {
	  var swiper = this;
	  var $wrapperEl = swiper.$wrapperEl;
	  var params = swiper.params;
	  var slides = swiper.slides;
	  $wrapperEl.children(("." + (params.slideClass) + "." + (params.slideDuplicateClass))).remove();
	  slides.removeAttr('data-swiper-slide-index');
	}
	
	var loop = {
	  loopCreate: loopCreate,
	  loopFix: loopFix,
	  loopDestroy: loopDestroy,
	};
	
	function setGrabCursor (moving) {
	  var swiper = this;
	  if (Support.touch || !swiper.params.simulateTouch) { return; }
	  var el = swiper.el;
	  el.style.cursor = 'move';
	  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
	  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
	  el.style.cursor = moving ? 'grabbing' : 'grab';
	}
	
	function unsetGrabCursor () {
	  var swiper = this;
	  if (Support.touch) { return; }
	  swiper.el.style.cursor = '';
	}
	
	var grabCursor = {
	  setGrabCursor: setGrabCursor,
	  unsetGrabCursor: unsetGrabCursor,
	};
	
	function appendSlide (slides) {
	  var swiper = this;
	  var $wrapperEl = swiper.$wrapperEl;
	  var params = swiper.params;
	  if (params.loop) {
	    swiper.loopDestroy();
	  }
	  if (typeof slides === 'object' && 'length' in slides) {
	    for (var i = 0; i < slides.length; i += 1) {
	      if (slides[i]) { $wrapperEl.append(slides[i]); }
	    }
	  } else {
	    $wrapperEl.append(slides);
	  }
	  if (params.loop) {
	    swiper.loopCreate();
	  }
	  if (!(params.observer && Support.observer)) {
	    swiper.update();
	  }
	}
	
	function prependSlide (slides) {
	  var swiper = this;
	  var params = swiper.params;
	  var $wrapperEl = swiper.$wrapperEl;
	  var activeIndex = swiper.activeIndex;
	
	  if (params.loop) {
	    swiper.loopDestroy();
	  }
	  var newActiveIndex = activeIndex + 1;
	  if (typeof slides === 'object' && 'length' in slides) {
	    for (var i = 0; i < slides.length; i += 1) {
	      if (slides[i]) { $wrapperEl.prepend(slides[i]); }
	    }
	    newActiveIndex = activeIndex + slides.length;
	  } else {
	    $wrapperEl.prepend(slides);
	  }
	  if (params.loop) {
	    swiper.loopCreate();
	  }
	  if (!(params.observer && Support.observer)) {
	    swiper.update();
	  }
	  swiper.slideTo(newActiveIndex, 0, false);
	}
	
	function removeSlide (slidesIndexes) {
	  var swiper = this;
	  var params = swiper.params;
	  var $wrapperEl = swiper.$wrapperEl;
	  var activeIndex = swiper.activeIndex;
	
	  if (params.loop) {
	    swiper.loopDestroy();
	    swiper.slides = $wrapperEl.children(("." + (params.slideClass)));
	  }
	  var newActiveIndex = activeIndex;
	  var indexToRemove;
	
	  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
	    for (var i = 0; i < slidesIndexes.length; i += 1) {
	      indexToRemove = slidesIndexes[i];
	      if (swiper.slides[indexToRemove]) { swiper.slides.eq(indexToRemove).remove(); }
	      if (indexToRemove < newActiveIndex) { newActiveIndex -= 1; }
	    }
	    newActiveIndex = Math.max(newActiveIndex, 0);
	  } else {
	    indexToRemove = slidesIndexes;
	    if (swiper.slides[indexToRemove]) { swiper.slides.eq(indexToRemove).remove(); }
	    if (indexToRemove < newActiveIndex) { newActiveIndex -= 1; }
	    newActiveIndex = Math.max(newActiveIndex, 0);
	  }
	
	  if (params.loop) {
	    swiper.loopCreate();
	  }
	
	  if (!(params.observer && Support.observer)) {
	    swiper.update();
	  }
	  if (params.loop) {
	    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
	  } else {
	    swiper.slideTo(newActiveIndex, 0, false);
	  }
	}
	
	function removeAllSlides () {
	  var swiper = this;
	
	  var slidesIndexes = [];
	  for (var i = 0; i < swiper.slides.length; i += 1) {
	    slidesIndexes.push(i);
	  }
	  swiper.removeSlide(slidesIndexes);
	}
	
	var manipulation = {
	  appendSlide: appendSlide,
	  prependSlide: prependSlide,
	  removeSlide: removeSlide,
	  removeAllSlides: removeAllSlides,
	};
	
	var Device = (function Device() {
	  var ua = win.navigator.userAgent;
	
	  var device = {
	    ios: false,
	    android: false,
	    androidChrome: false,
	    desktop: false,
	    windows: false,
	    iphone: false,
	    ipod: false,
	    ipad: false,
	    cordova: win.cordova || win.phonegap,
	    phonegap: win.cordova || win.phonegap,
	  };
	
	  var windows = ua.match(/(Windows Phone);?[\s\/]+([\d.]+)?/); // eslint-disable-line
	  var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line
	  var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	  var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	  var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
	
	
	  // Windows
	  if (windows) {
	    device.os = 'windows';
	    device.osVersion = windows[2];
	    device.windows = true;
	  }
	  // Android
	  if (android && !windows) {
	    device.os = 'android';
	    device.osVersion = android[2];
	    device.android = true;
	    device.androidChrome = ua.toLowerCase().indexOf('chrome') >= 0;
	  }
	  if (ipad || iphone || ipod) {
	    device.os = 'ios';
	    device.ios = true;
	  }
	  // iOS
	  if (iphone && !ipod) {
	    device.osVersion = iphone[2].replace(/_/g, '.');
	    device.iphone = true;
	  }
	  if (ipad) {
	    device.osVersion = ipad[2].replace(/_/g, '.');
	    device.ipad = true;
	  }
	  if (ipod) {
	    device.osVersion = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	    device.iphone = true;
	  }
	  // iOS 8+ changed UA
	  if (device.ios && device.osVersion && ua.indexOf('Version/') >= 0) {
	    if (device.osVersion.split('.')[0] === '10') {
	      device.osVersion = ua.toLowerCase().split('version/')[1].split(' ')[0];
	    }
	  }
	
	  // Desktop
	  device.desktop = !(device.os || device.android || device.webView);
	
	  // Webview
	  device.webView = (iphone || ipad || ipod) && ua.match(/.*AppleWebKit(?!.*Safari)/i);
	
	  // Minimal UI
	  if (device.os && device.os === 'ios') {
	    var osVersionArr = device.osVersion.split('.');
	    var metaViewport = doc.querySelector('meta[name="viewport"]');
	    device.minimalUi =
	      !device.webView &&
	      (ipod || iphone) &&
	      (osVersionArr[0] * 1 === 7 ? osVersionArr[1] * 1 >= 1 : osVersionArr[0] * 1 > 7) &&
	      metaViewport && metaViewport.getAttribute('content').indexOf('minimal-ui') >= 0;
	  }
	
	  // Pixel Ratio
	  device.pixelRatio = win.devicePixelRatio || 1;
	
	  // Export object
	  return device;
	}());
	
	function onTouchStart (event) {
	  var swiper = this;
	  var data = swiper.touchEventsData;
	  var params = swiper.params;
	  var touches = swiper.touches;
	  if (swiper.animating && params.preventIntercationOnTransition) {
	    return;
	  }
	  var e = event;
	  if (e.originalEvent) { e = e.originalEvent; }
	  data.isTouchEvent = e.type === 'touchstart';
	  if (!data.isTouchEvent && 'which' in e && e.which === 3) { return; }
	  if (data.isTouched && data.isMoved) { return; }
	  if (params.noSwiping && $(e.target).closest(params.noSwipingSelector ? params.noSwipingSelector : ("." + (params.noSwipingClass)))[0]) {
	    swiper.allowClick = true;
	    return;
	  }
	  if (params.swipeHandler) {
	    if (!$(e).closest(params.swipeHandler)[0]) { return; }
	  }
	
	  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
	  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
	  var startX = touches.currentX;
	  var startY = touches.currentY;
	
	  // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore
	
	  if (
	    Device.ios &&
	    !Device.cordova &&
	    params.iOSEdgeSwipeDetection &&
	    (startX <= params.iOSEdgeSwipeThreshold) &&
	    (startX >= win.screen.width - params.iOSEdgeSwipeThreshold)
	  ) {
	    return;
	  }
	
	  Utils.extend(data, {
	    isTouched: true,
	    isMoved: false,
	    allowTouchCallbacks: true,
	    isScrolling: undefined,
	    startMoving: undefined,
	  });
	
	  touches.startX = startX;
	  touches.startY = startY;
	  data.touchStartTime = Utils.now();
	  swiper.allowClick = true;
	  swiper.updateSize();
	  swiper.swipeDirection = undefined;
	  if (params.threshold > 0) { data.allowThresholdMove = false; }
	  if (e.type !== 'touchstart') {
	    var preventDefault = true;
	    if ($(e.target).is(data.formElements)) { preventDefault = false; }
	    if (
	      doc.activeElement &&
	      $(doc.activeElement).is(data.formElements) &&
	      doc.activeElement !== e.target
	    ) {
	      doc.activeElement.blur();
	    }
	    if (preventDefault && swiper.allowTouchMove) {
	      e.preventDefault();
	    }
	  }
	  swiper.emit('touchStart', e);
	}
	
	function onTouchMove (event) {
	  var swiper = this;
	  var data = swiper.touchEventsData;
	  var params = swiper.params;
	  var touches = swiper.touches;
	  var rtl = swiper.rtlTranslate;
	  var e = event;
	  if (e.originalEvent) { e = e.originalEvent; }
	  if (!data.isTouched) {
	    if (data.startMoving && data.isScrolling) {
	      swiper.emit('touchMoveOpposite', e);
	    }
	    return;
	  }
	  if (data.isTouchEvent && e.type === 'mousemove') { return; }
	  var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
	  var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
	  if (e.preventedByNestedSwiper) {
	    touches.startX = pageX;
	    touches.startY = pageY;
	    return;
	  }
	  if (!swiper.allowTouchMove) {
	    // isMoved = true;
	    swiper.allowClick = false;
	    if (data.isTouched) {
	      Utils.extend(touches, {
	        startX: pageX,
	        startY: pageY,
	        currentX: pageX,
	        currentY: pageY,
	      });
	      data.touchStartTime = Utils.now();
	    }
	    return;
	  }
	  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
	    if (swiper.isVertical()) {
	      // Vertical
	      if (
	        (pageY < touches.startY && swiper.translate <= swiper.maxTranslate()) ||
	        (pageY > touches.startY && swiper.translate >= swiper.minTranslate())
	      ) {
	        data.isTouched = false;
	        data.isMoved = false;
	        return;
	      }
	    } else if (
	      (pageX < touches.startX && swiper.translate <= swiper.maxTranslate()) ||
	      (pageX > touches.startX && swiper.translate >= swiper.minTranslate())
	    ) {
	      return;
	    }
	  }
	  if (data.isTouchEvent && doc.activeElement) {
	    if (e.target === doc.activeElement && $(e.target).is(data.formElements)) {
	      data.isMoved = true;
	      swiper.allowClick = false;
	      return;
	    }
	  }
	  if (data.allowTouchCallbacks) {
	    swiper.emit('touchMove', e);
	  }
	  if (e.targetTouches && e.targetTouches.length > 1) { return; }
	
	  touches.currentX = pageX;
	  touches.currentY = pageY;
	
	  var diffX = touches.currentX - touches.startX;
	  var diffY = touches.currentY - touches.startY;
	
	  if (typeof data.isScrolling === 'undefined') {
	    var touchAngle;
	    if ((swiper.isHorizontal() && touches.currentY === touches.startY) || (swiper.isVertical() && touches.currentX === touches.startX)) {
	      data.isScrolling = false;
	    } else {
	      // eslint-disable-next-line
	      if ((diffX * diffX) + (diffY * diffY) >= 25) {
	        touchAngle = (Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180) / Math.PI;
	        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : (90 - touchAngle > params.touchAngle);
	      }
	    }
	  }
	  if (data.isScrolling) {
	    swiper.emit('touchMoveOpposite', e);
	  }
	  if (typeof startMoving === 'undefined') {
	    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
	      data.startMoving = true;
	    }
	  }
	  if (data.isScrolling) {
	    data.isTouched = false;
	    return;
	  }
	  if (!data.startMoving) {
	    return;
	  }
	  swiper.allowClick = false;
	  e.preventDefault();
	  if (params.touchMoveStopPropagation && !params.nested) {
	    e.stopPropagation();
	  }
	
	  if (!data.isMoved) {
	    if (params.loop) {
	      swiper.loopFix();
	    }
	    data.startTranslate = swiper.getTranslate();
	    swiper.setTransition(0);
	    if (swiper.animating) {
	      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
	    }
	    data.allowMomentumBounce = false;
	    // Grab Cursor
	    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
	      swiper.setGrabCursor(true);
	    }
	    swiper.emit('sliderFirstMove', e);
	  }
	  swiper.emit('sliderMove', e);
	  data.isMoved = true;
	
	  var diff = swiper.isHorizontal() ? diffX : diffY;
	  touches.diff = diff;
	
	  diff *= params.touchRatio;
	  if (rtl) { diff = -diff; }
	
	  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
	  data.currentTranslate = diff + data.startTranslate;
	
	  var disableParentSwiper = true;
	  var resistanceRatio = params.resistanceRatio;
	  if (params.touchReleaseOnEdges) {
	    resistanceRatio = 0;
	  }
	  if ((diff > 0 && data.currentTranslate > swiper.minTranslate())) {
	    disableParentSwiper = false;
	    if (params.resistance) { data.currentTranslate = (swiper.minTranslate() - 1) + (Math.pow( (-swiper.minTranslate() + data.startTranslate + diff), resistanceRatio )); }
	  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
	    disableParentSwiper = false;
	    if (params.resistance) { data.currentTranslate = (swiper.maxTranslate() + 1) - (Math.pow( (swiper.maxTranslate() - data.startTranslate - diff), resistanceRatio )); }
	  }
	
	  if (disableParentSwiper) {
	    e.preventedByNestedSwiper = true;
	  }
	
	  // Directions locks
	  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
	    data.currentTranslate = data.startTranslate;
	  }
	  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
	    data.currentTranslate = data.startTranslate;
	  }
	
	
	  // Threshold
	  if (params.threshold > 0) {
	    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
	      if (!data.allowThresholdMove) {
	        data.allowThresholdMove = true;
	        touches.startX = touches.currentX;
	        touches.startY = touches.currentY;
	        data.currentTranslate = data.startTranslate;
	        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
	        return;
	      }
	    } else {
	      data.currentTranslate = data.startTranslate;
	      return;
	    }
	  }
	
	  if (!params.followFinger) { return; }
	
	  // Update active index in free mode
	  if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
	    swiper.updateActiveIndex();
	    swiper.updateSlidesClasses();
	  }
	  if (params.freeMode) {
	    // Velocity
	    if (data.velocities.length === 0) {
	      data.velocities.push({
	        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
	        time: data.touchStartTime,
	      });
	    }
	    data.velocities.push({
	      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
	      time: Utils.now(),
	    });
	  }
	  // Update progress
	  swiper.updateProgress(data.currentTranslate);
	  // Update translate
	  swiper.setTranslate(data.currentTranslate);
	}
	
	function onTouchEnd (event) {
	  var swiper = this;
	  var data = swiper.touchEventsData;
	
	  var params = swiper.params;
	  var touches = swiper.touches;
	  var rtl = swiper.rtlTranslate;
	  var $wrapperEl = swiper.$wrapperEl;
	  var slidesGrid = swiper.slidesGrid;
	  var snapGrid = swiper.snapGrid;
	  var e = event;
	  if (e.originalEvent) { e = e.originalEvent; }
	  if (data.allowTouchCallbacks) {
	    swiper.emit('touchEnd', e);
	  }
	  data.allowTouchCallbacks = false;
	  if (!data.isTouched) {
	    if (data.isMoved && params.grabCursor) {
	      swiper.setGrabCursor(false);
	    }
	    data.isMoved = false;
	    data.startMoving = false;
	    return;
	  }
	  // Return Grab Cursor
	  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
	    swiper.setGrabCursor(false);
	  }
	
	  // Time diff
	  var touchEndTime = Utils.now();
	  var timeDiff = touchEndTime - data.touchStartTime;
	
	  // Tap, doubleTap, Click
	  if (swiper.allowClick) {
	    swiper.updateClickedSlide(e);
	    swiper.emit('tap', e);
	    if (timeDiff < 300 && (touchEndTime - data.lastClickTime) > 300) {
	      if (data.clickTimeout) { clearTimeout(data.clickTimeout); }
	      data.clickTimeout = Utils.nextTick(function () {
	        if (!swiper || swiper.destroyed) { return; }
	        swiper.emit('click', e);
	      }, 300);
	    }
	    if (timeDiff < 300 && (touchEndTime - data.lastClickTime) < 300) {
	      if (data.clickTimeout) { clearTimeout(data.clickTimeout); }
	      swiper.emit('doubleTap', e);
	    }
	  }
	
	  data.lastClickTime = Utils.now();
	  Utils.nextTick(function () {
	    if (!swiper.destroyed) { swiper.allowClick = true; }
	  });
	
	  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
	    data.isTouched = false;
	    data.isMoved = false;
	    data.startMoving = false;
	    return;
	  }
	  data.isTouched = false;
	  data.isMoved = false;
	  data.startMoving = false;
	
	  var currentPos;
	  if (params.followFinger) {
	    currentPos = rtl ? swiper.translate : -swiper.translate;
	  } else {
	    currentPos = -data.currentTranslate;
	  }
	
	  if (params.freeMode) {
	    if (currentPos < -swiper.minTranslate()) {
	      swiper.slideTo(swiper.activeIndex);
	      return;
	    } else if (currentPos > -swiper.maxTranslate()) {
	      if (swiper.slides.length < snapGrid.length) {
	        swiper.slideTo(snapGrid.length - 1);
	      } else {
	        swiper.slideTo(swiper.slides.length - 1);
	      }
	      return;
	    }
	
	    if (params.freeModeMomentum) {
	      if (data.velocities.length > 1) {
	        var lastMoveEvent = data.velocities.pop();
	        var velocityEvent = data.velocities.pop();
	
	        var distance = lastMoveEvent.position - velocityEvent.position;
	        var time = lastMoveEvent.time - velocityEvent.time;
	        swiper.velocity = distance / time;
	        swiper.velocity /= 2;
	        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
	          swiper.velocity = 0;
	        }
	        // this implies that the user stopped moving a finger then released.
	        // There would be no events with distance zero, so the last event is stale.
	        if (time > 150 || (Utils.now() - lastMoveEvent.time) > 300) {
	          swiper.velocity = 0;
	        }
	      } else {
	        swiper.velocity = 0;
	      }
	      swiper.velocity *= params.freeModeMomentumVelocityRatio;
	
	      data.velocities.length = 0;
	      var momentumDuration = 1000 * params.freeModeMomentumRatio;
	      var momentumDistance = swiper.velocity * momentumDuration;
	
	      var newPosition = swiper.translate + momentumDistance;
	      if (rtl) { newPosition = -newPosition; }
	
	      var doBounce = false;
	      var afterBouncePosition;
	      var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
	      if (newPosition < swiper.maxTranslate()) {
	        if (params.freeModeMomentumBounce) {
	          if (newPosition + swiper.maxTranslate() < -bounceAmount) {
	            newPosition = swiper.maxTranslate() - bounceAmount;
	          }
	          afterBouncePosition = swiper.maxTranslate();
	          doBounce = true;
	          data.allowMomentumBounce = true;
	        } else {
	          newPosition = swiper.maxTranslate();
	        }
	      } else if (newPosition > swiper.minTranslate()) {
	        if (params.freeModeMomentumBounce) {
	          if (newPosition - swiper.minTranslate() > bounceAmount) {
	            newPosition = swiper.minTranslate() + bounceAmount;
	          }
	          afterBouncePosition = swiper.minTranslate();
	          doBounce = true;
	          data.allowMomentumBounce = true;
	        } else {
	          newPosition = swiper.minTranslate();
	        }
	      } else if (params.freeModeSticky) {
	        var nextSlide;
	        for (var j = 0; j < snapGrid.length; j += 1) {
	          if (snapGrid[j] > -newPosition) {
	            nextSlide = j;
	            break;
	          }
	        }
	
	        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
	          newPosition = snapGrid[nextSlide];
	        } else {
	          newPosition = snapGrid[nextSlide - 1];
	        }
	        newPosition = -newPosition;
	      }
	      // Fix duration
	      if (swiper.velocity !== 0) {
	        if (rtl) {
	          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
	        } else {
	          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
	        }
	      } else if (params.freeModeSticky) {
	        swiper.slideToClosest();
	        return;
	      }
	
	      if (params.freeModeMomentumBounce && doBounce) {
	        swiper.updateProgress(afterBouncePosition);
	        swiper.setTransition(momentumDuration);
	        swiper.setTranslate(newPosition);
	        swiper.transitionStart(true, swiper.swipeDirection);
	        swiper.animating = true;
	        $wrapperEl.transitionEnd(function () {
	          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) { return; }
	          swiper.emit('momentumBounce');
	
	          swiper.setTransition(params.speed);
	          swiper.setTranslate(afterBouncePosition);
	          $wrapperEl.transitionEnd(function () {
	            if (!swiper || swiper.destroyed) { return; }
	            swiper.transitionEnd();
	          });
	        });
	      } else if (swiper.velocity) {
	        swiper.updateProgress(newPosition);
	        swiper.setTransition(momentumDuration);
	        swiper.setTranslate(newPosition);
	        swiper.transitionStart(true, swiper.swipeDirection);
	        if (!swiper.animating) {
	          swiper.animating = true;
	          $wrapperEl.transitionEnd(function () {
	            if (!swiper || swiper.destroyed) { return; }
	            swiper.transitionEnd();
	          });
	        }
	      } else {
	        swiper.updateProgress(newPosition);
	      }
	
	      swiper.updateActiveIndex();
	      swiper.updateSlidesClasses();
	    } else if (params.freeModeSticky) {
	      swiper.slideToClosest();
	      return;
	    }
	
	    if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
	      swiper.updateProgress();
	      swiper.updateActiveIndex();
	      swiper.updateSlidesClasses();
	    }
	    return;
	  }
	
	  // Find current slide
	  var stopIndex = 0;
	  var groupSize = swiper.slidesSizesGrid[0];
	  for (var i = 0; i < slidesGrid.length; i += params.slidesPerGroup) {
	    if (typeof slidesGrid[i + params.slidesPerGroup] !== 'undefined') {
	      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + params.slidesPerGroup]) {
	        stopIndex = i;
	        groupSize = slidesGrid[i + params.slidesPerGroup] - slidesGrid[i];
	      }
	    } else if (currentPos >= slidesGrid[i]) {
	      stopIndex = i;
	      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
	    }
	  }
	
	  // Find current slide size
	  var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
	
	  if (timeDiff > params.longSwipesMs) {
	    // Long touches
	    if (!params.longSwipes) {
	      swiper.slideTo(swiper.activeIndex);
	      return;
	    }
	    if (swiper.swipeDirection === 'next') {
	      if (ratio >= params.longSwipesRatio) { swiper.slideTo(stopIndex + params.slidesPerGroup); }
	      else { swiper.slideTo(stopIndex); }
	    }
	    if (swiper.swipeDirection === 'prev') {
	      if (ratio > (1 - params.longSwipesRatio)) { swiper.slideTo(stopIndex + params.slidesPerGroup); }
	      else { swiper.slideTo(stopIndex); }
	    }
	  } else {
	    // Short swipes
	    if (!params.shortSwipes) {
	      swiper.slideTo(swiper.activeIndex);
	      return;
	    }
	    if (swiper.swipeDirection === 'next') {
	      swiper.slideTo(stopIndex + params.slidesPerGroup);
	    }
	    if (swiper.swipeDirection === 'prev') {
	      swiper.slideTo(stopIndex);
	    }
	  }
	}
	
	function onResize () {
	  var swiper = this;
	
	  var params = swiper.params;
	  var el = swiper.el;
	
	  if (el && el.offsetWidth === 0) { return; }
	
	  // Breakpoints
	  if (params.breakpoints) {
	    swiper.setBreakpoint();
	  }
	
	  // Save locks
	  var allowSlideNext = swiper.allowSlideNext;
	  var allowSlidePrev = swiper.allowSlidePrev;
	
	  // Disable locks on resize
	  swiper.allowSlideNext = true;
	  swiper.allowSlidePrev = true;
	
	  swiper.updateSize();
	  swiper.updateSlides();
	
	  if (params.freeMode) {
	    var newTranslate = Math.min(Math.max(swiper.translate, swiper.maxTranslate()), swiper.minTranslate());
	    swiper.setTranslate(newTranslate);
	    swiper.updateActiveIndex();
	    swiper.updateSlidesClasses();
	
	    if (params.autoHeight) {
	      swiper.updateAutoHeight();
	    }
	  } else {
	    swiper.updateSlidesClasses();
	    if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
	      swiper.slideTo(swiper.slides.length - 1, 0, false, true);
	    } else {
	      swiper.slideTo(swiper.activeIndex, 0, false, true);
	    }
	  }
	  // Return locks after resize
	  swiper.allowSlidePrev = allowSlidePrev;
	  swiper.allowSlideNext = allowSlideNext;
	}
	
	function onClick (e) {
	  var swiper = this;
	  if (!swiper.allowClick) {
	    if (swiper.params.preventClicks) { e.preventDefault(); }
	    if (swiper.params.preventClicksPropagation && swiper.animating) {
	      e.stopPropagation();
	      e.stopImmediatePropagation();
	    }
	  }
	}
	
	function attachEvents() {
	  var swiper = this;
	  var params = swiper.params;
	  var touchEvents = swiper.touchEvents;
	  var el = swiper.el;
	  var wrapperEl = swiper.wrapperEl;
	
	  {
	    swiper.onTouchStart = onTouchStart.bind(swiper);
	    swiper.onTouchMove = onTouchMove.bind(swiper);
	    swiper.onTouchEnd = onTouchEnd.bind(swiper);
	  }
	
	  swiper.onClick = onClick.bind(swiper);
	
	  var target = params.touchEventsTarget === 'container' ? el : wrapperEl;
	  var capture = !!params.nested;
	
	  // Touch Events
	  {
	    if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
	      target.addEventListener(touchEvents.start, swiper.onTouchStart, false);
	      doc.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
	      doc.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
	    } else {
	      if (Support.touch) {
	        var passiveListener = touchEvents.start === 'touchstart' && Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
	        target.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
	        target.addEventListener(touchEvents.move, swiper.onTouchMove, Support.passiveListener ? { passive: false, capture: capture } : capture);
	        target.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
	      }
	      if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
	        target.addEventListener('mousedown', swiper.onTouchStart, false);
	        doc.addEventListener('mousemove', swiper.onTouchMove, capture);
	        doc.addEventListener('mouseup', swiper.onTouchEnd, false);
	      }
	    }
	    // Prevent Links Clicks
	    if (params.preventClicks || params.preventClicksPropagation) {
	      target.addEventListener('click', swiper.onClick, true);
	    }
	  }
	
	  // Resize handler
	  swiper.on('resize observerUpdate', onResize, true);
	}
	
	function detachEvents() {
	  var swiper = this;
	
	  var params = swiper.params;
	  var touchEvents = swiper.touchEvents;
	  var el = swiper.el;
	  var wrapperEl = swiper.wrapperEl;
	
	  var target = params.touchEventsTarget === 'container' ? el : wrapperEl;
	  var capture = !!params.nested;
	
	  // Touch Events
	  {
	    if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
	      target.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
	      doc.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
	      doc.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
	    } else {
	      if (Support.touch) {
	        var passiveListener = touchEvents.start === 'onTouchStart' && Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
	        target.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
	        target.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
	        target.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
	      }
	      if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
	        target.removeEventListener('mousedown', swiper.onTouchStart, false);
	        doc.removeEventListener('mousemove', swiper.onTouchMove, capture);
	        doc.removeEventListener('mouseup', swiper.onTouchEnd, false);
	      }
	    }
	    // Prevent Links Clicks
	    if (params.preventClicks || params.preventClicksPropagation) {
	      target.removeEventListener('click', swiper.onClick, true);
	    }
	  }
	
	  // Resize handler
	  swiper.off('resize observerUpdate', onResize);
	}
	
	var events = {
	  attachEvents: attachEvents,
	  detachEvents: detachEvents,
	};
	
	function setBreakpoint () {
	  var swiper = this;
	  var activeIndex = swiper.activeIndex;
	  var loopedSlides = swiper.loopedSlides; if ( loopedSlides === void 0 ) loopedSlides = 0;
	  var params = swiper.params;
	  var breakpoints = params.breakpoints;
	  if (!breakpoints || (breakpoints && Object.keys(breakpoints).length === 0)) { return; }
	  // Set breakpoint for window width and update parameters
	  var breakpoint = swiper.getBreakpoint(breakpoints);
	  if (breakpoint && swiper.currentBreakpoint !== breakpoint) {
	    var breakPointsParams = breakpoint in breakpoints ? breakpoints[breakpoint] : swiper.originalParams;
	    var needsReLoop = params.loop && (breakPointsParams.slidesPerView !== params.slidesPerView);
	
	    Utils.extend(swiper.params, breakPointsParams);
	
	    Utils.extend(swiper, {
	      allowTouchMove: swiper.params.allowTouchMove,
	      allowSlideNext: swiper.params.allowSlideNext,
	      allowSlidePrev: swiper.params.allowSlidePrev,
	    });
	
	    swiper.currentBreakpoint = breakpoint;
	
	    if (needsReLoop) {
	      swiper.loopDestroy();
	      swiper.loopCreate();
	      swiper.updateSlides();
	      swiper.slideTo((activeIndex - loopedSlides) + swiper.loopedSlides, 0, false);
	    }
	    swiper.emit('breakpoint', breakPointsParams);
	  }
	}
	
	function getBreakpoint (breakpoints) {
	  // Get breakpoint for window width
	  if (!breakpoints) { return undefined; }
	  var breakpoint = false;
	  var points = [];
	  Object.keys(breakpoints).forEach(function (point) {
	    points.push(point);
	  });
	  points.sort(function (a, b) { return parseInt(a, 10) - parseInt(b, 10); });
	  for (var i = 0; i < points.length; i += 1) {
	    var point = points[i];
	    if (point >= win.innerWidth && !breakpoint) {
	      breakpoint = point;
	    }
	  }
	  return breakpoint || 'max';
	}
	
	var breakpoints = { setBreakpoint: setBreakpoint, getBreakpoint: getBreakpoint };
	
	var Browser = (function Browser() {
	  function isSafari() {
	    var ua = win.navigator.userAgent.toLowerCase();
	    return (ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0);
	  }
	  return {
	    isIE: !!win.navigator.userAgent.match(/Trident/g) || !!win.navigator.userAgent.match(/MSIE/g),
	    isSafari: isSafari(),
	    isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(win.navigator.userAgent),
	  };
	}());
	
	function addClasses () {
	  var swiper = this;
	  var classNames = swiper.classNames;
	  var params = swiper.params;
	  var rtl = swiper.rtl;
	  var $el = swiper.$el;
	  var suffixes = [];
	
	  suffixes.push(params.direction);
	
	  if (params.freeMode) {
	    suffixes.push('free-mode');
	  }
	  if (!Support.flexbox) {
	    suffixes.push('no-flexbox');
	  }
	  if (params.autoHeight) {
	    suffixes.push('autoheight');
	  }
	  if (rtl) {
	    suffixes.push('rtl');
	  }
	  if (params.slidesPerColumn > 1) {
	    suffixes.push('multirow');
	  }
	  if (Device.android) {
	    suffixes.push('android');
	  }
	  if (Device.ios) {
	    suffixes.push('ios');
	  }
	  // WP8 Touch Events Fix
	  if (Browser.isIE && (Support.pointerEvents || Support.prefixedPointerEvents)) {
	    suffixes.push(("wp8-" + (params.direction)));
	  }
	
	  suffixes.forEach(function (suffix) {
	    classNames.push(params.containerModifierClass + suffix);
	  });
	
	  $el.addClass(classNames.join(' '));
	}
	
	function removeClasses () {
	  var swiper = this;
	  var $el = swiper.$el;
	  var classNames = swiper.classNames;
	
	  $el.removeClass(classNames.join(' '));
	}
	
	var classes = { addClasses: addClasses, removeClasses: removeClasses };
	
	function loadImage (imageEl, src, srcset, sizes, checkForComplete, callback) {
	  var image;
	  function onReady() {
	    if (callback) { callback(); }
	  }
	  if (!imageEl.complete || !checkForComplete) {
	    if (src) {
	      image = new win.Image();
	      image.onload = onReady;
	      image.onerror = onReady;
	      if (sizes) {
	        image.sizes = sizes;
	      }
	      if (srcset) {
	        image.srcset = srcset;
	      }
	      if (src) {
	        image.src = src;
	      }
	    } else {
	      onReady();
	    }
	  } else {
	    // image already loaded...
	    onReady();
	  }
	}
	
	function preloadImages () {
	  var swiper = this;
	  swiper.imagesToLoad = swiper.$el.find('img');
	  function onReady() {
	    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) { return; }
	    if (swiper.imagesLoaded !== undefined) { swiper.imagesLoaded += 1; }
	    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
	      if (swiper.params.updateOnImagesReady) { swiper.update(); }
	      swiper.emit('imagesReady');
	    }
	  }
	  for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
	    var imageEl = swiper.imagesToLoad[i];
	    swiper.loadImage(
	      imageEl,
	      imageEl.currentSrc || imageEl.getAttribute('src'),
	      imageEl.srcset || imageEl.getAttribute('srcset'),
	      imageEl.sizes || imageEl.getAttribute('sizes'),
	      true,
	      onReady
	    );
	  }
	}
	
	var images = {
	  loadImage: loadImage,
	  preloadImages: preloadImages,
	};
	
	function checkOverflow() {
	  var swiper = this;
	  var wasLocked = swiper.isLocked;
	
	  swiper.isLocked = swiper.snapGrid.length === 1;
	  swiper.allowTouchMove = !swiper.isLocked;
	
	  if (wasLocked && wasLocked !== swiper.isLocked) {
	    swiper.isEnd = false;
	    swiper.navigation.update();
	  }
	}
	
	var checkOverflow$1 = { checkOverflow: checkOverflow };
	
	var defaults = {
	  init: true,
	  direction: 'horizontal',
	  touchEventsTarget: 'container',
	  initialSlide: 0,
	  speed: 300,
	  //
	  preventIntercationOnTransition: false,
	
	  // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
	  iOSEdgeSwipeDetection: false,
	  iOSEdgeSwipeThreshold: 20,
	
	  // Free mode
	  freeMode: false,
	  freeModeMomentum: true,
	  freeModeMomentumRatio: 1,
	  freeModeMomentumBounce: true,
	  freeModeMomentumBounceRatio: 1,
	  freeModeMomentumVelocityRatio: 1,
	  freeModeSticky: false,
	  freeModeMinimumVelocity: 0.02,
	
	  // Autoheight
	  autoHeight: false,
	
	  // Set wrapper width
	  setWrapperSize: false,
	
	  // Virtual Translate
	  virtualTranslate: false,
	
	  // Effects
	  effect: 'slide', // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
	
	  // Breakpoints
	  breakpoints: undefined,
	
	  // Slides grid
	  spaceBetween: 0,
	  slidesPerView: 1,
	  slidesPerColumn: 1,
	  slidesPerColumnFill: 'column',
	  slidesPerGroup: 1,
	  centeredSlides: false,
	  slidesOffsetBefore: 0, // in px
	  slidesOffsetAfter: 0, // in px
	  normalizeSlideIndex: true,
	
	  // Disable swiper and hide navigation when container not overflow
	  watchOverflow: false,
	
	  // Round length
	  roundLengths: false,
	
	  // Touches
	  touchRatio: 1,
	  touchAngle: 45,
	  simulateTouch: true,
	  shortSwipes: true,
	  longSwipes: true,
	  longSwipesRatio: 0.5,
	  longSwipesMs: 300,
	  followFinger: true,
	  allowTouchMove: true,
	  threshold: 0,
	  touchMoveStopPropagation: true,
	  touchReleaseOnEdges: false,
	
	  // Unique Navigation Elements
	  uniqueNavElements: true,
	
	  // Resistance
	  resistance: true,
	  resistanceRatio: 0.85,
	
	  // Progress
	  watchSlidesProgress: false,
	  watchSlidesVisibility: false,
	
	  // Cursor
	  grabCursor: false,
	
	  // Clicks
	  preventClicks: true,
	  preventClicksPropagation: true,
	  slideToClickedSlide: false,
	
	  // Images
	  preloadImages: true,
	  updateOnImagesReady: true,
	
	  // loop
	  loop: false,
	  loopAdditionalSlides: 0,
	  loopedSlides: null,
	  loopFillGroupWithBlank: false,
	
	  // Swiping/no swiping
	  allowSlidePrev: true,
	  allowSlideNext: true,
	  swipeHandler: null, // '.swipe-handler',
	  noSwiping: true,
	  noSwipingClass: 'swiper-no-swiping',
	  noSwipingSelector: null,
	
	  // Passive Listeners
	  passiveListeners: true,
	
	  // NS
	  containerModifierClass: 'swiper-container-', // NEW
	  slideClass: 'swiper-slide',
	  slideBlankClass: 'swiper-slide-invisible-blank',
	  slideActiveClass: 'swiper-slide-active',
	  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
	  slideVisibleClass: 'swiper-slide-visible',
	  slideDuplicateClass: 'swiper-slide-duplicate',
	  slideNextClass: 'swiper-slide-next',
	  slideDuplicateNextClass: 'swiper-slide-duplicate-next',
	  slidePrevClass: 'swiper-slide-prev',
	  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
	  wrapperClass: 'swiper-wrapper',
	
	  // Callbacks
	  runCallbacksOnInit: true,
	};
	
	var prototypes = {
	  update: update,
	  translate: translate,
	  transition: transition$1,
	  slide: slide,
	  loop: loop,
	  grabCursor: grabCursor,
	  manipulation: manipulation,
	  events: events,
	  breakpoints: breakpoints,
	  checkOverflow: checkOverflow$1,
	  classes: classes,
	  images: images,
	};
	
	var extendedDefaults = {};
	
	var Swiper = (function (SwiperClass$$1) {
	  function Swiper() {
	    var assign;
	
	    var args = [], len = arguments.length;
	    while ( len-- ) args[ len ] = arguments[ len ];
	    var el;
	    var params;
	    if (args.length === 1 && args[0].constructor && args[0].constructor === Object) {
	      params = args[0];
	    } else {
	      (assign = args, el = assign[0], params = assign[1]);
	    }
	    if (!params) { params = {}; }
	
	    params = Utils.extend({}, params);
	    if (el && !params.el) { params.el = el; }
	
	    SwiperClass$$1.call(this, params);
	
	    Object.keys(prototypes).forEach(function (prototypeGroup) {
	      Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {
	        if (!Swiper.prototype[protoMethod]) {
	          Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
	        }
	      });
	    });
	
	    // Swiper Instance
	    var swiper = this;
	    if (typeof swiper.modules === 'undefined') {
	      swiper.modules = {};
	    }
	    Object.keys(swiper.modules).forEach(function (moduleName) {
	      var module = swiper.modules[moduleName];
	      if (module.params) {
	        var moduleParamName = Object.keys(module.params)[0];
	        var moduleParams = module.params[moduleParamName];
	        if (typeof moduleParams !== 'object') { return; }
	        if (!(moduleParamName in params && 'enabled' in moduleParams)) { return; }
	        if (params[moduleParamName] === true) {
	          params[moduleParamName] = { enabled: true };
	        }
	        if (
	          typeof params[moduleParamName] === 'object' &&
	          !('enabled' in params[moduleParamName])
	        ) {
	          params[moduleParamName].enabled = true;
	        }
	        if (!params[moduleParamName]) { params[moduleParamName] = { enabled: false }; }
	      }
	    });
	
	    // Extend defaults with modules params
	    var swiperParams = Utils.extend({}, defaults);
	    swiper.useModulesParams(swiperParams);
	
	    // Extend defaults with passed params
	    swiper.params = Utils.extend({}, swiperParams, extendedDefaults, params);
	    swiper.originalParams = Utils.extend({}, swiper.params);
	    swiper.passedParams = Utils.extend({}, params);
	
	    // Save Dom lib
	    swiper.$ = $;
	
	    // Find el
	    var $el = $(swiper.params.el);
	    el = $el[0];
	
	    if (!el) {
	      return undefined;
	    }
	
	    if ($el.length > 1) {
	      var swipers = [];
	      $el.each(function (index, containerEl) {
	        var newParams = Utils.extend({}, params, { el: containerEl });
	        swipers.push(new Swiper(newParams));
	      });
	      return swipers;
	    }
	
	    el.swiper = swiper;
	    $el.data('swiper', swiper);
	
	    // Find Wrapper
	    var $wrapperEl = $el.children(("." + (swiper.params.wrapperClass)));
	
	    // Extend Swiper
	    Utils.extend(swiper, {
	      $el: $el,
	      el: el,
	      $wrapperEl: $wrapperEl,
	      wrapperEl: $wrapperEl[0],
	
	      // Classes
	      classNames: [],
	
	      // Slides
	      slides: $(),
	      slidesGrid: [],
	      snapGrid: [],
	      slidesSizesGrid: [],
	
	      // isDirection
	      isHorizontal: function isHorizontal() {
	        return swiper.params.direction === 'horizontal';
	      },
	      isVertical: function isVertical() {
	        return swiper.params.direction === 'vertical';
	      },
	      // RTL
	      rtl: (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
	      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
	      wrongRTL: $wrapperEl.css('display') === '-webkit-box',
	
	      // Indexes
	      activeIndex: 0,
	      realIndex: 0,
	
	      //
	      isBeginning: true,
	      isEnd: false,
	
	      // Props
	      translate: 0,
	      progress: 0,
	      velocity: 0,
	      animating: false,
	
	      // Locks
	      allowSlideNext: swiper.params.allowSlideNext,
	      allowSlidePrev: swiper.params.allowSlidePrev,
	
	      // Touch Events
	      touchEvents: (function touchEvents() {
	        var touch = ['touchstart', 'touchmove', 'touchend'];
	        var desktop = ['mousedown', 'mousemove', 'mouseup'];
	        if (Support.pointerEvents) {
	          desktop = ['pointerdown', 'pointermove', 'pointerup'];
	        } else if (Support.prefixedPointerEvents) {
	          desktop = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp'];
	        }
	        swiper.touchEventsTouch = {
	          start: touch[0],
	          move: touch[1],
	          end: touch[2],
	        };
	        swiper.touchEventsDesktop = {
	          start: desktop[0],
	          move: desktop[1],
	          end: desktop[2],
	        };
	        return Support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
	      }()),
	      touchEventsData: {
	        isTouched: undefined,
	        isMoved: undefined,
	        allowTouchCallbacks: undefined,
	        touchStartTime: undefined,
	        isScrolling: undefined,
	        currentTranslate: undefined,
	        startTranslate: undefined,
	        allowThresholdMove: undefined,
	        // Form elements to match
	        formElements: 'input, select, option, textarea, button, video',
	        // Last click time
	        lastClickTime: Utils.now(),
	        clickTimeout: undefined,
	        // Velocities
	        velocities: [],
	        allowMomentumBounce: undefined,
	        isTouchEvent: undefined,
	        startMoving: undefined,
	      },
	
	      // Clicks
	      allowClick: true,
	
	      // Touches
	      allowTouchMove: swiper.params.allowTouchMove,
	
	      touches: {
	        startX: 0,
	        startY: 0,
	        currentX: 0,
	        currentY: 0,
	        diff: 0,
	      },
	
	      // Images
	      imagesToLoad: [],
	      imagesLoaded: 0,
	
	    });
	
	    // Install Modules
	    swiper.useModules();
	
	    // Init
	    if (swiper.params.init) {
	      swiper.init();
	    }
	
	    // Return app instance
	    return swiper;
	  }
	
	  if ( SwiperClass$$1 ) Swiper.__proto__ = SwiperClass$$1;
	  Swiper.prototype = Object.create( SwiperClass$$1 && SwiperClass$$1.prototype );
	  Swiper.prototype.constructor = Swiper;
	
	  var staticAccessors = { extendedDefaults: { configurable: true },defaults: { configurable: true },Class: { configurable: true },$: { configurable: true } };
	  Swiper.prototype.slidesPerViewDynamic = function slidesPerViewDynamic () {
	    var swiper = this;
	    var params = swiper.params;
	    var slides = swiper.slides;
	    var slidesGrid = swiper.slidesGrid;
	    var swiperSize = swiper.size;
	    var activeIndex = swiper.activeIndex;
	    var spv = 1;
	    if (params.centeredSlides) {
	      var slideSize = slides[activeIndex].swiperSlideSize;
	      var breakLoop;
	      for (var i = activeIndex + 1; i < slides.length; i += 1) {
	        if (slides[i] && !breakLoop) {
	          slideSize += slides[i].swiperSlideSize;
	          spv += 1;
	          if (slideSize > swiperSize) { breakLoop = true; }
	        }
	      }
	      for (var i$1 = activeIndex - 1; i$1 >= 0; i$1 -= 1) {
	        if (slides[i$1] && !breakLoop) {
	          slideSize += slides[i$1].swiperSlideSize;
	          spv += 1;
	          if (slideSize > swiperSize) { breakLoop = true; }
	        }
	      }
	    } else {
	      for (var i$2 = activeIndex + 1; i$2 < slides.length; i$2 += 1) {
	        if (slidesGrid[i$2] - slidesGrid[activeIndex] < swiperSize) {
	          spv += 1;
	        }
	      }
	    }
	    return spv;
	  };
	  Swiper.prototype.update = function update$$1 () {
	    var swiper = this;
	    if (!swiper || swiper.destroyed) { return; }
	    swiper.updateSize();
	    swiper.updateSlides();
	    swiper.updateProgress();
	    swiper.updateSlidesClasses();
	
	    function setTranslate() {
	      var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
	      var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
	      swiper.setTranslate(newTranslate);
	      swiper.updateActiveIndex();
	      swiper.updateSlidesClasses();
	    }
	    var translated;
	    if (swiper.params.freeMode) {
	      setTranslate();
	      if (swiper.params.autoHeight) {
	        swiper.updateAutoHeight();
	      }
	    } else {
	      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
	        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
	      } else {
	        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
	      }
	      if (!translated) {
	        setTranslate();
	      }
	    }
	    swiper.emit('update');
	  };
	  Swiper.prototype.init = function init () {
	    var swiper = this;
	    if (swiper.initialized) { return; }
	
	    swiper.emit('beforeInit');
	
	    // Set breakpoint
	    if (swiper.params.breakpoints) {
	      swiper.setBreakpoint();
	    }
	
	    // Add Classes
	    swiper.addClasses();
	
	    // Create loop
	    if (swiper.params.loop) {
	      swiper.loopCreate();
	    }
	
	    // Update size
	    swiper.updateSize();
	
	    // Update slides
	    swiper.updateSlides();
	
	    if (swiper.params.watchOverflow) {
	      swiper.checkOverflow();
	    }
	
	    // Set Grab Cursor
	    if (swiper.params.grabCursor) {
	      swiper.setGrabCursor();
	    }
	
	    if (swiper.params.preloadImages) {
	      swiper.preloadImages();
	    }
	
	    // Slide To Initial Slide
	    if (swiper.params.loop) {
	      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);
	    } else {
	      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);
	    }
	
	    // Attach events
	    swiper.attachEvents();
	
	    // Init Flag
	    swiper.initialized = true;
	
	    // Emit
	    swiper.emit('init');
	  };
	  Swiper.prototype.destroy = function destroy (deleteInstance, cleanStyles) {
	    if ( deleteInstance === void 0 ) deleteInstance = true;
	    if ( cleanStyles === void 0 ) cleanStyles = true;
	
	    var swiper = this;
	    var params = swiper.params;
	    var $el = swiper.$el;
	    var $wrapperEl = swiper.$wrapperEl;
	    var slides = swiper.slides;
	    swiper.emit('beforeDestroy');
	
	    // Init Flag
	    swiper.initialized = false;
	
	    // Detach events
	    swiper.detachEvents();
	
	    // Destroy loop
	    if (params.loop) {
	      swiper.loopDestroy();
	    }
	
	    // Cleanup styles
	    if (cleanStyles) {
	      swiper.removeClasses();
	      $el.removeAttr('style');
	      $wrapperEl.removeAttr('style');
	      if (slides && slides.length) {
	        slides
	          .removeClass([
	            params.slideVisibleClass,
	            params.slideActiveClass,
	            params.slideNextClass,
	            params.slidePrevClass ].join(' '))
	          .removeAttr('style')
	          .removeAttr('data-swiper-slide-index')
	          .removeAttr('data-swiper-column')
	          .removeAttr('data-swiper-row');
	      }
	    }
	
	    swiper.emit('destroy');
	
	    // Detach emitter events
	    Object.keys(swiper.eventsListeners).forEach(function (eventName) {
	      swiper.off(eventName);
	    });
	
	    if (deleteInstance !== false) {
	      swiper.$el[0].swiper = null;
	      swiper.$el.data('swiper', null);
	      Utils.deleteProps(swiper);
	    }
	    swiper.destroyed = true;
	  };
	  Swiper.extendDefaults = function extendDefaults (newDefaults) {
	    Utils.extend(extendedDefaults, newDefaults);
	  };
	  staticAccessors.extendedDefaults.get = function () {
	    return extendedDefaults;
	  };
	  staticAccessors.defaults.get = function () {
	    return defaults;
	  };
	  staticAccessors.Class.get = function () {
	    return SwiperClass$$1;
	  };
	  staticAccessors.$.get = function () {
	    return $;
	  };
	
	  Object.defineProperties( Swiper, staticAccessors );
	
	  return Swiper;
	}(SwiperClass));
	
	var Device$1 = {
	  name: 'device',
	  proto: {
	    device: Device,
	  },
	  static: {
	    device: Device,
	  },
	};
	
	var Support$1 = {
	  name: 'support',
	  proto: {
	    support: Support,
	  },
	  static: {
	    support: Support,
	  },
	};
	
	var Browser$1 = {
	  name: 'browser',
	  proto: {
	    browser: Browser,
	  },
	  static: {
	    browser: Browser,
	  },
	};
	
	var Resize = {
	  name: 'resize',
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      resize: {
	        resizeHandler: function resizeHandler() {
	          if (!swiper || swiper.destroyed || !swiper.initialized) { return; }
	          swiper.emit('beforeResize');
	          swiper.emit('resize');
	        },
	        orientationChangeHandler: function orientationChangeHandler() {
	          if (!swiper || swiper.destroyed || !swiper.initialized) { return; }
	          swiper.emit('orientationchange');
	        },
	      },
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      // Emit resize
	      win.addEventListener('resize', swiper.resize.resizeHandler);
	
	      // Emit orientationchange
	      win.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      win.removeEventListener('resize', swiper.resize.resizeHandler);
	      win.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
	    },
	  },
	};
	
	var Observer = {
	  func: win.MutationObserver || win.WebkitMutationObserver,
	  attach: function attach(target, options) {
	    if ( options === void 0 ) options = {};
	
	    var swiper = this;
	
	    var ObserverFunc = Observer.func;
	    var observer = new ObserverFunc(function (mutations) {
	      mutations.forEach(function (mutation) {
	        swiper.emit('observerUpdate', mutation);
	      });
	    });
	
	    observer.observe(target, {
	      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
	      childList: typeof options.childList === 'undefined' ? true : options.childList,
	      characterData: typeof options.characterData === 'undefined' ? true : options.characterData,
	    });
	
	    swiper.observer.observers.push(observer);
	  },
	  init: function init() {
	    var swiper = this;
	    if (!Support.observer || !swiper.params.observer) { return; }
	    if (swiper.params.observeParents) {
	      var containerParents = swiper.$el.parents();
	      for (var i = 0; i < containerParents.length; i += 1) {
	        swiper.observer.attach(containerParents[i]);
	      }
	    }
	    // Observe container
	    swiper.observer.attach(swiper.$el[0], { childList: false });
	
	    // Observe wrapper
	    swiper.observer.attach(swiper.$wrapperEl[0], { attributes: false });
	  },
	  destroy: function destroy() {
	    var swiper = this;
	    swiper.observer.observers.forEach(function (observer) {
	      observer.disconnect();
	    });
	    swiper.observer.observers = [];
	  },
	};
	
	var Observer$1 = {
	  name: 'observer',
	  params: {
	    observer: false,
	    observeParents: false,
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      observer: {
	        init: Observer.init.bind(swiper),
	        attach: Observer.attach.bind(swiper),
	        destroy: Observer.destroy.bind(swiper),
	        observers: [],
	      },
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      swiper.observer.init();
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      swiper.observer.destroy();
	    },
	  },
	};
	
	var Virtual = {
	  update: function update(force) {
	    var swiper = this;
	    var ref = swiper.params;
	    var slidesPerView = ref.slidesPerView;
	    var slidesPerGroup = ref.slidesPerGroup;
	    var centeredSlides = ref.centeredSlides;
	    var ref$1 = swiper.virtual;
	    var previousFrom = ref$1.from;
	    var previousTo = ref$1.to;
	    var slides = ref$1.slides;
	    var previousSlidesGrid = ref$1.slidesGrid;
	    var renderSlide = ref$1.renderSlide;
	    var previousOffset = ref$1.offset;
	    swiper.updateActiveIndex();
	    var activeIndex = swiper.activeIndex || 0;
	
	    var offsetProp;
	    if (swiper.rtlTranslate) { offsetProp = 'right'; }
	    else { offsetProp = swiper.isHorizontal() ? 'left' : 'top'; }
	
	    var slidesAfter;
	    var slidesBefore;
	    if (centeredSlides) {
	      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup;
	      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup;
	    } else {
	      slidesAfter = slidesPerView + (slidesPerGroup - 1);
	      slidesBefore = slidesPerGroup;
	    }
	    var from = Math.max((activeIndex || 0) - slidesBefore, 0);
	    var to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);
	    var offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
	
	    Utils.extend(swiper.virtual, {
	      from: from,
	      to: to,
	      offset: offset,
	      slidesGrid: swiper.slidesGrid,
	    });
	
	    function onRendered() {
	      swiper.updateSlides();
	      swiper.updateProgress();
	      swiper.updateSlidesClasses();
	      if (swiper.lazy && swiper.params.lazy.enabled) {
	        swiper.lazy.load();
	      }
	    }
	
	    if (previousFrom === from && previousTo === to && !force) {
	      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
	        swiper.slides.css(offsetProp, (offset + "px"));
	      }
	      swiper.updateProgress();
	      return;
	    }
	    if (swiper.params.virtual.renderExternal) {
	      swiper.params.virtual.renderExternal.call(swiper, {
	        offset: offset,
	        from: from,
	        to: to,
	        slides: (function getSlides() {
	          var slidesToRender = [];
	          for (var i = from; i <= to; i += 1) {
	            slidesToRender.push(slides[i]);
	          }
	          return slidesToRender;
	        }()),
	      });
	      onRendered();
	      return;
	    }
	    var prependIndexes = [];
	    var appendIndexes = [];
	    if (force) {
	      swiper.$wrapperEl.find(("." + (swiper.params.slideClass))).remove();
	    } else {
	      for (var i = previousFrom; i <= previousTo; i += 1) {
	        if (i < from || i > to) {
	          swiper.$wrapperEl.find(("." + (swiper.params.slideClass) + "[data-swiper-slide-index=\"" + i + "\"]")).remove();
	        }
	      }
	    }
	    for (var i$1 = 0; i$1 < slides.length; i$1 += 1) {
	      if (i$1 >= from && i$1 <= to) {
	        if (typeof previousTo === 'undefined' || force) {
	          appendIndexes.push(i$1);
	        } else {
	          if (i$1 > previousTo) { appendIndexes.push(i$1); }
	          if (i$1 < previousFrom) { prependIndexes.push(i$1); }
	        }
	      }
	    }
	    appendIndexes.forEach(function (index) {
	      swiper.$wrapperEl.append(renderSlide(slides[index], index));
	    });
	    prependIndexes.sort(function (a, b) { return a < b; }).forEach(function (index) {
	      swiper.$wrapperEl.prepend(renderSlide(slides[index], index));
	    });
	    swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, (offset + "px"));
	    onRendered();
	  },
	  renderSlide: function renderSlide(slide, index) {
	    var swiper = this;
	    var params = swiper.params.virtual;
	    if (params.cache && swiper.virtual.cache[index]) {
	      return swiper.virtual.cache[index];
	    }
	    var $slideEl = params.renderSlide
	      ? $(params.renderSlide.call(swiper, slide, index))
	      : $(("<div class=\"" + (swiper.params.slideClass) + "\" data-swiper-slide-index=\"" + index + "\">" + slide + "</div>"));
	    if (!$slideEl.attr('data-swiper-slide-index')) { $slideEl.attr('data-swiper-slide-index', index); }
	    if (params.cache) { swiper.virtual.cache[index] = $slideEl; }
	    return $slideEl;
	  },
	  appendSlide: function appendSlide(slide) {
	    var swiper = this;
	    swiper.virtual.slides.push(slide);
	    swiper.virtual.update(true);
	  },
	  prependSlide: function prependSlide(slide) {
	    var swiper = this;
	    swiper.virtual.slides.unshift(slide);
	    if (swiper.params.virtual.cache) {
	      var cache = swiper.virtual.cache;
	      var newCache = {};
	      Object.keys(cache).forEach(function (cachedIndex) {
	        newCache[cachedIndex + 1] = cache[cachedIndex];
	      });
	      swiper.virtual.cache = newCache;
	    }
	    swiper.virtual.update(true);
	    swiper.slideNext(0);
	  },
	};
	
	var Virtual$1 = {
	  name: 'virtual',
	  params: {
	    virtual: {
	      enabled: false,
	      slides: [],
	      cache: true,
	      renderSlide: null,
	      renderExternal: null,
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      virtual: {
	        update: Virtual.update.bind(swiper),
	        appendSlide: Virtual.appendSlide.bind(swiper),
	        prependSlide: Virtual.prependSlide.bind(swiper),
	        renderSlide: Virtual.renderSlide.bind(swiper),
	        slides: swiper.params.virtual.slides,
	        cache: {},
	      },
	    });
	  },
	  on: {
	    beforeInit: function beforeInit() {
	      var swiper = this;
	      if (!swiper.params.virtual.enabled) { return; }
	      swiper.classNames.push(((swiper.params.containerModifierClass) + "virtual"));
	      var overwriteParams = {
	        watchSlidesProgress: true,
	      };
	      Utils.extend(swiper.params, overwriteParams);
	      Utils.extend(swiper.originalParams, overwriteParams);
	
	      swiper.virtual.update();
	    },
	    setTranslate: function setTranslate() {
	      var swiper = this;
	      if (!swiper.params.virtual.enabled) { return; }
	      swiper.virtual.update();
	    },
	  },
	};
	
	var Keyboard = {
	  handle: function handle(event) {
	    var swiper = this;
	    var rtl = swiper.rtlTranslate;
	    var e = event;
	    if (e.originalEvent) { e = e.originalEvent; } // jquery fix
	    var kc = e.keyCode || e.charCode;
	    // Directions locks
	    if (!swiper.allowSlideNext && ((swiper.isHorizontal() && kc === 39) || (swiper.isVertical() && kc === 40))) {
	      return false;
	    }
	    if (!swiper.allowSlidePrev && ((swiper.isHorizontal() && kc === 37) || (swiper.isVertical() && kc === 38))) {
	      return false;
	    }
	    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
	      return undefined;
	    }
	    if (doc.activeElement && doc.activeElement.nodeName && (doc.activeElement.nodeName.toLowerCase() === 'input' || doc.activeElement.nodeName.toLowerCase() === 'textarea')) {
	      return undefined;
	    }
	    if (swiper.params.keyboard.onlyInViewport && (kc === 37 || kc === 39 || kc === 38 || kc === 40)) {
	      var inView = false;
	      // Check that swiper should be inside of visible area of window
	      if (swiper.$el.parents(("." + (swiper.params.slideClass))).length > 0 && swiper.$el.parents(("." + (swiper.params.slideActiveClass))).length === 0) {
	        return undefined;
	      }
	      var windowWidth = win.innerWidth;
	      var windowHeight = win.innerHeight;
	      var swiperOffset = swiper.$el.offset();
	      if (rtl) { swiperOffset.left -= swiper.$el[0].scrollLeft; }
	      var swiperCoord = [
	        [swiperOffset.left, swiperOffset.top],
	        [swiperOffset.left + swiper.width, swiperOffset.top],
	        [swiperOffset.left, swiperOffset.top + swiper.height],
	        [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height] ];
	      for (var i = 0; i < swiperCoord.length; i += 1) {
	        var point = swiperCoord[i];
	        if (
	          point[0] >= 0 && point[0] <= windowWidth &&
	          point[1] >= 0 && point[1] <= windowHeight
	        ) {
	          inView = true;
	        }
	      }
	      if (!inView) { return undefined; }
	    }
	    if (swiper.isHorizontal()) {
	      if (kc === 37 || kc === 39) {
	        if (e.preventDefault) { e.preventDefault(); }
	        else { e.returnValue = false; }
	      }
	      if ((kc === 39 && !rtl) || (kc === 37 && rtl)) { swiper.slideNext(); }
	      if ((kc === 37 && !rtl) || (kc === 39 && rtl)) { swiper.slidePrev(); }
	    } else {
	      if (kc === 38 || kc === 40) {
	        if (e.preventDefault) { e.preventDefault(); }
	        else { e.returnValue = false; }
	      }
	      if (kc === 40) { swiper.slideNext(); }
	      if (kc === 38) { swiper.slidePrev(); }
	    }
	    swiper.emit('keyPress', kc);
	    return undefined;
	  },
	  enable: function enable() {
	    var swiper = this;
	    if (swiper.keyboard.enabled) { return; }
	    $(doc).on('keydown', swiper.keyboard.handle);
	    swiper.keyboard.enabled = true;
	  },
	  disable: function disable() {
	    var swiper = this;
	    if (!swiper.keyboard.enabled) { return; }
	    $(doc).off('keydown', swiper.keyboard.handle);
	    swiper.keyboard.enabled = false;
	  },
	};
	
	var Keyboard$1 = {
	  name: 'keyboard',
	  params: {
	    keyboard: {
	      enabled: false,
	      onlyInViewport: true,
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      keyboard: {
	        enabled: false,
	        enable: Keyboard.enable.bind(swiper),
	        disable: Keyboard.disable.bind(swiper),
	        handle: Keyboard.handle.bind(swiper),
	      },
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      if (swiper.params.keyboard.enabled) {
	        swiper.keyboard.enable();
	      }
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      if (swiper.keyboard.enabled) {
	        swiper.keyboard.disable();
	      }
	    },
	  },
	};
	
	function isEventSupported() {
	  var eventName = 'onwheel';
	  var isSupported = eventName in doc;
	
	  if (!isSupported) {
	    var element = doc.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported &&
	    doc.implementation &&
	    doc.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    doc.implementation.hasFeature('', '') !== true
	  ) {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = doc.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	var Mousewheel = {
	  lastScrollTime: Utils.now(),
	  event: (function getEvent() {
	    if (win.navigator.userAgent.indexOf('firefox') > -1) { return 'DOMMouseScroll'; }
	    return isEventSupported() ? 'wheel' : 'mousewheel';
	  }()),
	  normalize: function normalize(e) {
	    // Reasonable defaults
	    var PIXEL_STEP = 10;
	    var LINE_HEIGHT = 40;
	    var PAGE_HEIGHT = 800;
	
	    var sX = 0;
	    var sY = 0; // spinX, spinY
	    var pX = 0;
	    var pY = 0; // pixelX, pixelY
	
	    // Legacy
	    if ('detail' in e) {
	      sY = e.detail;
	    }
	    if ('wheelDelta' in e) {
	      sY = -e.wheelDelta / 120;
	    }
	    if ('wheelDeltaY' in e) {
	      sY = -e.wheelDeltaY / 120;
	    }
	    if ('wheelDeltaX' in e) {
	      sX = -e.wheelDeltaX / 120;
	    }
	
	    // side scrolling on FF with DOMMouseScroll
	    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
	      sX = sY;
	      sY = 0;
	    }
	
	    pX = sX * PIXEL_STEP;
	    pY = sY * PIXEL_STEP;
	
	    if ('deltaY' in e) {
	      pY = e.deltaY;
	    }
	    if ('deltaX' in e) {
	      pX = e.deltaX;
	    }
	
	    if ((pX || pY) && e.deltaMode) {
	      if (e.deltaMode === 1) { // delta in LINE units
	        pX *= LINE_HEIGHT;
	        pY *= LINE_HEIGHT;
	      } else { // delta in PAGE units
	        pX *= PAGE_HEIGHT;
	        pY *= PAGE_HEIGHT;
	      }
	    }
	
	    // Fall-back if spin cannot be determined
	    if (pX && !sX) {
	      sX = (pX < 1) ? -1 : 1;
	    }
	    if (pY && !sY) {
	      sY = (pY < 1) ? -1 : 1;
	    }
	
	    return {
	      spinX: sX,
	      spinY: sY,
	      pixelX: pX,
	      pixelY: pY,
	    };
	  },
	  handleMouseEnter: function handleMouseEnter() {
	    var swiper = this;
	    swiper.mouseEntered = true;
	  },
	  handleMouseLeave: function handleMouseLeave() {
	    var swiper = this;
	    swiper.mouseEntered = false;
	  },
	  handle: function handle(event) {
	    var e = event;
	    var swiper = this;
	    var params = swiper.params.mousewheel;
	
	    if (!swiper.mouseEntered && !params.releaseOnEdges) { return true; }
	
	    if (e.originalEvent) { e = e.originalEvent; } // jquery fix
	    var delta = 0;
	    var rtlFactor = swiper.rtlTranslate ? -1 : 1;
	
	    var data = Mousewheel.normalize(e);
	
	    if (params.forceToAxis) {
	      if (swiper.isHorizontal()) {
	        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) { delta = data.pixelX * rtlFactor; }
	        else { return true; }
	      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) { delta = data.pixelY; }
	      else { return true; }
	    } else {
	      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
	    }
	
	    if (delta === 0) { return true; }
	
	    if (params.invert) { delta = -delta; }
	
	    if (!swiper.params.freeMode) {
	      if (Utils.now() - swiper.mousewheel.lastScrollTime > 60) {
	        if (delta < 0) {
	          if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
	            swiper.slideNext();
	            swiper.emit('scroll', e);
	          } else if (params.releaseOnEdges) { return true; }
	        } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
	          swiper.slidePrev();
	          swiper.emit('scroll', e);
	        } else if (params.releaseOnEdges) { return true; }
	      }
	      swiper.mousewheel.lastScrollTime = (new win.Date()).getTime();
	    } else {
	      // Freemode or scrollContainer:
	      var position = swiper.getTranslate() + (delta * params.sensitivity);
	      var wasBeginning = swiper.isBeginning;
	      var wasEnd = swiper.isEnd;
	
	      if (position >= swiper.minTranslate()) { position = swiper.minTranslate(); }
	      if (position <= swiper.maxTranslate()) { position = swiper.maxTranslate(); }
	
	      swiper.setTransition(0);
	      swiper.setTranslate(position);
	      swiper.updateProgress();
	      swiper.updateActiveIndex();
	      swiper.updateSlidesClasses();
	
	      if ((!wasBeginning && swiper.isBeginning) || (!wasEnd && swiper.isEnd)) {
	        swiper.updateSlidesClasses();
	      }
	
	      if (swiper.params.freeModeSticky) {
	        clearTimeout(swiper.mousewheel.timeout);
	        swiper.mousewheel.timeout = Utils.nextTick(function () {
	          swiper.slideToClosest();
	        }, 300);
	      }
	      // Emit event
	      swiper.emit('scroll', e);
	
	      // Stop autoplay
	      if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) { swiper.stopAutoplay(); }
	      // Return page scroll on edge positions
	      if (position === swiper.minTranslate() || position === swiper.maxTranslate()) { return true; }
	    }
	
	    if (e.preventDefault) { e.preventDefault(); }
	    else { e.returnValue = false; }
	    return false;
	  },
	  enable: function enable() {
	    var swiper = this;
	    if (!Mousewheel.event) { return false; }
	    if (swiper.mousewheel.enabled) { return false; }
	    var target = swiper.$el;
	    if (swiper.params.mousewheel.eventsTarged !== 'container') {
	      target = $(swiper.params.mousewheel.eventsTarged);
	    }
	    target.on('mouseenter', swiper.mousewheel.handleMouseEnter);
	    target.on('mouseleave', swiper.mousewheel.handleMouseLeave);
	    target.on(Mousewheel.event, swiper.mousewheel.handle);
	    swiper.mousewheel.enabled = true;
	    return true;
	  },
	  disable: function disable() {
	    var swiper = this;
	    if (!Mousewheel.event) { return false; }
	    if (!swiper.mousewheel.enabled) { return false; }
	    var target = swiper.$el;
	    if (swiper.params.mousewheel.eventsTarged !== 'container') {
	      target = $(swiper.params.mousewheel.eventsTarged);
	    }
	    target.off(Mousewheel.event, swiper.mousewheel.handle);
	    swiper.mousewheel.enabled = false;
	    return true;
	  },
	};
	
	var Mousewheel$1 = {
	  name: 'mousewheel',
	  params: {
	    mousewheel: {
	      enabled: false,
	      releaseOnEdges: false,
	      invert: false,
	      forceToAxis: false,
	      sensitivity: 1,
	      eventsTarged: 'container',
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      mousewheel: {
	        enabled: false,
	        enable: Mousewheel.enable.bind(swiper),
	        disable: Mousewheel.disable.bind(swiper),
	        handle: Mousewheel.handle.bind(swiper),
	        handleMouseEnter: Mousewheel.handleMouseEnter.bind(swiper),
	        handleMouseLeave: Mousewheel.handleMouseLeave.bind(swiper),
	        lastScrollTime: Utils.now(),
	      },
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      if (swiper.params.mousewheel.enabled) { swiper.mousewheel.enable(); }
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      if (swiper.mousewheel.enabled) { swiper.mousewheel.disable(); }
	    },
	  },
	};
	
	var Navigation = {
	  update: function update() {
	    // Update Navigation Buttons
	    var swiper = this;
	    var params = swiper.params.navigation;
	
	    if (swiper.params.loop) { return; }
	    var ref = swiper.navigation;
	    var $nextEl = ref.$nextEl;
	    var $prevEl = ref.$prevEl;
	
	    if ($prevEl && $prevEl.length > 0) {
	      if (swiper.isBeginning) {
	        $prevEl.addClass(params.disabledClass);
	      } else {
	        $prevEl.removeClass(params.disabledClass);
	      }
	      $prevEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
	    }
	    if ($nextEl && $nextEl.length > 0) {
	      if (swiper.isEnd) {
	        $nextEl.addClass(params.disabledClass);
	      } else {
	        $nextEl.removeClass(params.disabledClass);
	      }
	      $nextEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
	    }
	  },
	  init: function init() {
	    var swiper = this;
	    var params = swiper.params.navigation;
	    if (!(params.nextEl || params.prevEl)) { return; }
	
	    var $nextEl;
	    var $prevEl;
	    if (params.nextEl) {
	      $nextEl = $(params.nextEl);
	      if (
	        swiper.params.uniqueNavElements &&
	        typeof params.nextEl === 'string' &&
	        $nextEl.length > 1 &&
	        swiper.$el.find(params.nextEl).length === 1
	      ) {
	        $nextEl = swiper.$el.find(params.nextEl);
	      }
	    }
	    if (params.prevEl) {
	      $prevEl = $(params.prevEl);
	      if (
	        swiper.params.uniqueNavElements &&
	        typeof params.prevEl === 'string' &&
	        $prevEl.length > 1 &&
	        swiper.$el.find(params.prevEl).length === 1
	      ) {
	        $prevEl = swiper.$el.find(params.prevEl);
	      }
	    }
	
	    if ($nextEl && $nextEl.length > 0) {
	      $nextEl.on('click', function (e) {
	        e.preventDefault();
	        if (swiper.isEnd && !swiper.params.loop) { return; }
	        swiper.slideNext();
	      });
	    }
	    if ($prevEl && $prevEl.length > 0) {
	      $prevEl.on('click', function (e) {
	        e.preventDefault();
	        if (swiper.isBeginning && !swiper.params.loop) { return; }
	        swiper.slidePrev();
	      });
	    }
	
	    Utils.extend(swiper.navigation, {
	      $nextEl: $nextEl,
	      nextEl: $nextEl && $nextEl[0],
	      $prevEl: $prevEl,
	      prevEl: $prevEl && $prevEl[0],
	    });
	  },
	  destroy: function destroy() {
	    var swiper = this;
	    var ref = swiper.navigation;
	    var $nextEl = ref.$nextEl;
	    var $prevEl = ref.$prevEl;
	    if ($nextEl && $nextEl.length) {
	      $nextEl.off('click');
	      $nextEl.removeClass(swiper.params.navigation.disabledClass);
	    }
	    if ($prevEl && $prevEl.length) {
	      $prevEl.off('click');
	      $prevEl.removeClass(swiper.params.navigation.disabledClass);
	    }
	  },
	};
	
	var Navigation$1 = {
	  name: 'navigation',
	  params: {
	    navigation: {
	      nextEl: null,
	      prevEl: null,
	
	      hideOnClick: false,
	      disabledClass: 'swiper-button-disabled',
	      hiddenClass: 'swiper-button-hidden',
	      lockClass: 'swiper-button-lock',
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      navigation: {
	        init: Navigation.init.bind(swiper),
	        update: Navigation.update.bind(swiper),
	        destroy: Navigation.destroy.bind(swiper),
	      },
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      swiper.navigation.init();
	      swiper.navigation.update();
	    },
	    toEdge: function toEdge() {
	      var swiper = this;
	      swiper.navigation.update();
	    },
	    fromEdge: function fromEdge() {
	      var swiper = this;
	      swiper.navigation.update();
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      swiper.navigation.destroy();
	    },
	    click: function click(e) {
	      var swiper = this;
	      var ref = swiper.navigation;
	      var $nextEl = ref.$nextEl;
	      var $prevEl = ref.$prevEl;
	      if (
	        swiper.params.navigation.hideOnClick &&
	        !$(e.target).is($prevEl) &&
	        !$(e.target).is($nextEl)
	      ) {
	        if ($nextEl) { $nextEl.toggleClass(swiper.params.navigation.hiddenClass); }
	        if ($prevEl) { $prevEl.toggleClass(swiper.params.navigation.hiddenClass); }
	      }
	    },
	  },
	};
	
	var Pagination = {
	  update: function update() {
	    // Render || Update Pagination bullets/items
	    var swiper = this;
	    var rtl = swiper.rtl;
	    var params = swiper.params.pagination;
	    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return; }
	    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
	    var $el = swiper.pagination.$el;
	    // Current/Total
	    var current;
	    var total = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
	    if (swiper.params.loop) {
	      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);
	      if (current > slidesLength - 1 - (swiper.loopedSlides * 2)) {
	        current -= (slidesLength - (swiper.loopedSlides * 2));
	      }
	      if (current > total - 1) { current -= total; }
	      if (current < 0 && swiper.params.paginationType !== 'bullets') { current = total + current; }
	    } else if (typeof swiper.snapIndex !== 'undefined') {
	      current = swiper.snapIndex;
	    } else {
	      current = swiper.activeIndex || 0;
	    }
	    // Types
	    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
	      var bullets = swiper.pagination.bullets;
	      var firstIndex;
	      var lastIndex;
	      var midIndex;
	      if (params.dynamicBullets) {
	        swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
	        $el.css(swiper.isHorizontal() ? 'width' : 'height', ((swiper.pagination.bulletSize * (params.dynamicMainBullets + 4)) + "px"));
	        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
	          swiper.pagination.dynamicBulletIndex += (current - swiper.previousIndex);
	          if (swiper.pagination.dynamicBulletIndex > (params.dynamicMainBullets - 1)) {
	            swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
	          } else if (swiper.pagination.dynamicBulletIndex < 0) {
	            swiper.pagination.dynamicBulletIndex = 0;
	          }
	        }
	        firstIndex = current - swiper.pagination.dynamicBulletIndex;
	        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
	        midIndex = (lastIndex + firstIndex) / 2;
	      }
	      bullets.removeClass(((params.bulletActiveClass) + " " + (params.bulletActiveClass) + "-next " + (params.bulletActiveClass) + "-next-next " + (params.bulletActiveClass) + "-prev " + (params.bulletActiveClass) + "-prev-prev " + (params.bulletActiveClass) + "-main"));
	      if ($el.length > 1) {
	        bullets.each(function (index, bullet) {
	          var $bullet = $(bullet);
	          var bulletIndex = $bullet.index();
	          if (bulletIndex === current) {
	            $bullet.addClass(params.bulletActiveClass);
	          }
	          if (params.dynamicBullets) {
	            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
	              $bullet.addClass(((params.bulletActiveClass) + "-main"));
	            }
	            if (bulletIndex === firstIndex) {
	              $bullet
	                .prev()
	                .addClass(((params.bulletActiveClass) + "-prev"))
	                .prev()
	                .addClass(((params.bulletActiveClass) + "-prev-prev"));
	            }
	            if (bulletIndex === lastIndex) {
	              $bullet
	                .next()
	                .addClass(((params.bulletActiveClass) + "-next"))
	                .next()
	                .addClass(((params.bulletActiveClass) + "-next-next"));
	            }
	          }
	        });
	      } else {
	        var $bullet = bullets.eq(current);
	        $bullet.addClass(params.bulletActiveClass);
	        if (params.dynamicBullets) {
	          var $firstDisplayedBullet = bullets.eq(firstIndex);
	          var $lastDisplayedBullet = bullets.eq(lastIndex);
	          for (var i = firstIndex; i <= lastIndex; i += 1) {
	            bullets.eq(i).addClass(((params.bulletActiveClass) + "-main"));
	          }
	          $firstDisplayedBullet
	            .prev()
	            .addClass(((params.bulletActiveClass) + "-prev"))
	            .prev()
	            .addClass(((params.bulletActiveClass) + "-prev-prev"));
	          $lastDisplayedBullet
	            .next()
	            .addClass(((params.bulletActiveClass) + "-next"))
	            .next()
	            .addClass(((params.bulletActiveClass) + "-next-next"));
	        }
	      }
	      if (params.dynamicBullets) {
	        var dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
	        var bulletsOffset = (((swiper.pagination.bulletSize * dynamicBulletsLength) - (swiper.pagination.bulletSize)) / 2) - (midIndex * swiper.pagination.bulletSize);
	        var offsetProp = rtl ? 'right' : 'left';
	        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', (bulletsOffset + "px"));
	      }
	    }
	    if (params.type === 'fraction') {
	      $el.find(("." + (params.currentClass))).text(current + 1);
	      $el.find(("." + (params.totalClass))).text(total);
	    }
	    if (params.type === 'progressbar') {
	      var scale = (current + 1) / total;
	      var scaleX = scale;
	      var scaleY = 1;
	      if (!swiper.isHorizontal()) {
	        scaleY = scale;
	        scaleX = 1;
	      }
	      $el.find(("." + (params.progressbarFillClass))).transform(("translate3d(0,0,0) scaleX(" + scaleX + ") scaleY(" + scaleY + ")")).transition(swiper.params.speed);
	    }
	    if (params.type === 'custom' && params.renderCustom) {
	      $el.html(params.renderCustom(swiper, current + 1, total));
	      swiper.emit('paginationRender', swiper, $el[0]);
	    } else {
	      swiper.emit('paginationUpdate', swiper, $el[0]);
	    }
	    $el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
	  },
	  render: function render() {
	    // Render Container
	    var swiper = this;
	    var params = swiper.params.pagination;
	    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return; }
	    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
	
	    var $el = swiper.pagination.$el;
	    var paginationHTML = '';
	    if (params.type === 'bullets') {
	      var numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
	      for (var i = 0; i < numberOfBullets; i += 1) {
	        if (params.renderBullet) {
	          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
	        } else {
	          paginationHTML += "<" + (params.bulletElement) + " class=\"" + (params.bulletClass) + "\"></" + (params.bulletElement) + ">";
	        }
	      }
	      $el.html(paginationHTML);
	      swiper.pagination.bullets = $el.find(("." + (params.bulletClass)));
	    }
	    if (params.type === 'fraction') {
	      if (params.renderFraction) {
	        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
	      } else {
	        paginationHTML =
	        "<span class=\"" + (params.currentClass) + "\"></span>" +
	        ' / ' +
	        "<span class=\"" + (params.totalClass) + "\"></span>";
	      }
	      $el.html(paginationHTML);
	    }
	    if (params.type === 'progressbar') {
	      if (params.renderProgressbar) {
	        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
	      } else {
	        paginationHTML = "<span class=\"" + (params.progressbarFillClass) + "\"></span>";
	      }
	      $el.html(paginationHTML);
	    }
	    if (params.type !== 'custom') {
	      swiper.emit('paginationRender', swiper.pagination.$el[0]);
	    }
	  },
	  init: function init() {
	    var swiper = this;
	    var params = swiper.params.pagination;
	    if (!params.el) { return; }
	
	    var $el = $(params.el);
	    if ($el.length === 0) { return; }
	
	    if (
	      swiper.params.uniqueNavElements &&
	      typeof params.el === 'string' &&
	      $el.length > 1 &&
	      swiper.$el.find(params.el).length === 1
	    ) {
	      $el = swiper.$el.find(params.el);
	    }
	
	    if (params.type === 'bullets' && params.clickable) {
	      $el.addClass(params.clickableClass);
	    }
	
	    $el.addClass(params.modifierClass + params.type);
	
	    if (params.type === 'bullets' && params.dynamicBullets) {
	      $el.addClass(("" + (params.modifierClass) + (params.type) + "-dynamic"));
	      swiper.pagination.dynamicBulletIndex = 0;
	      if (params.dynamicMainBullets < 1) {
	        params.dynamicMainBullets = 1;
	      }
	    }
	
	    if (params.clickable) {
	      $el.on('click', ("." + (params.bulletClass)), function onClick(e) {
	        e.preventDefault();
	        var index = $(this).index() * swiper.params.slidesPerGroup;
	        if (swiper.params.loop) { index += swiper.loopedSlides; }
	        swiper.slideTo(index);
	      });
	    }
	
	    Utils.extend(swiper.pagination, {
	      $el: $el,
	      el: $el[0],
	    });
	  },
	  destroy: function destroy() {
	    var swiper = this;
	    var params = swiper.params.pagination;
	    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return; }
	    var $el = swiper.pagination.$el;
	
	    $el.removeClass(params.hiddenClass);
	    $el.removeClass(params.modifierClass + params.type);
	    if (swiper.pagination.bullets) { swiper.pagination.bullets.removeClass(params.bulletActiveClass); }
	    if (params.clickable) {
	      $el.off('click', ("." + (params.bulletClass)));
	    }
	  },
	};
	
	var Pagination$1 = {
	  name: 'pagination',
	  params: {
	    pagination: {
	      el: null,
	      bulletElement: 'span',
	      clickable: false,
	      hideOnClick: false,
	      renderBullet: null,
	      renderProgressbar: null,
	      renderFraction: null,
	      renderCustom: null,
	      type: 'bullets', // 'bullets' or 'progressbar' or 'fraction' or 'custom'
	      dynamicBullets: false,
	      dynamicMainBullets: 1,
	      bulletClass: 'swiper-pagination-bullet',
	      bulletActiveClass: 'swiper-pagination-bullet-active',
	      modifierClass: 'swiper-pagination-', // NEW
	      currentClass: 'swiper-pagination-current',
	      totalClass: 'swiper-pagination-total',
	      hiddenClass: 'swiper-pagination-hidden',
	      progressbarFillClass: 'swiper-pagination-progressbar-fill',
	      clickableClass: 'swiper-pagination-clickable', // NEW
	      lockClass: 'swiper-pagination-lock',
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      pagination: {
	        init: Pagination.init.bind(swiper),
	        render: Pagination.render.bind(swiper),
	        update: Pagination.update.bind(swiper),
	        destroy: Pagination.destroy.bind(swiper),
	        dynamicBulletIndex: 0,
	      },
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      swiper.pagination.init();
	      swiper.pagination.render();
	      swiper.pagination.update();
	    },
	    activeIndexChange: function activeIndexChange() {
	      var swiper = this;
	      if (swiper.params.loop) {
	        swiper.pagination.update();
	      } else if (typeof swiper.snapIndex === 'undefined') {
	        swiper.pagination.update();
	      }
	    },
	    snapIndexChange: function snapIndexChange() {
	      var swiper = this;
	      if (!swiper.params.loop) {
	        swiper.pagination.update();
	      }
	    },
	    slidesLengthChange: function slidesLengthChange() {
	      var swiper = this;
	      if (swiper.params.loop) {
	        swiper.pagination.render();
	        swiper.pagination.update();
	      }
	    },
	    snapGridLengthChange: function snapGridLengthChange() {
	      var swiper = this;
	      if (!swiper.params.loop) {
	        swiper.pagination.render();
	        swiper.pagination.update();
	      }
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      swiper.pagination.destroy();
	    },
	    click: function click(e) {
	      var swiper = this;
	      if (
	        swiper.params.pagination.el &&
	        swiper.params.pagination.hideOnClick &&
	        swiper.pagination.$el.length > 0 &&
	        !$(e.target).hasClass(swiper.params.pagination.bulletClass)
	      ) {
	        swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
	      }
	    },
	  },
	};
	
	var Scrollbar = {
	  setTranslate: function setTranslate() {
	    var swiper = this;
	    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return; }
	    var scrollbar = swiper.scrollbar;
	    var rtl = swiper.rtlTranslate;
	    var progress = swiper.progress;
	    var dragSize = scrollbar.dragSize;
	    var trackSize = scrollbar.trackSize;
	    var $dragEl = scrollbar.$dragEl;
	    var $el = scrollbar.$el;
	    var params = swiper.params.scrollbar;
	
	    var newSize = dragSize;
	    var newPos = (trackSize - dragSize) * progress;
	    if (rtl) {
	      newPos = -newPos;
	      if (newPos > 0) {
	        newSize = dragSize - newPos;
	        newPos = 0;
	      } else if (-newPos + dragSize > trackSize) {
	        newSize = trackSize + newPos;
	      }
	    } else if (newPos < 0) {
	      newSize = dragSize + newPos;
	      newPos = 0;
	    } else if (newPos + dragSize > trackSize) {
	      newSize = trackSize - newPos;
	    }
	    if (swiper.isHorizontal()) {
	      if (Support.transforms3d) {
	        $dragEl.transform(("translate3d(" + newPos + "px, 0, 0)"));
	      } else {
	        $dragEl.transform(("translateX(" + newPos + "px)"));
	      }
	      $dragEl[0].style.width = newSize + "px";
	    } else {
	      if (Support.transforms3d) {
	        $dragEl.transform(("translate3d(0px, " + newPos + "px, 0)"));
	      } else {
	        $dragEl.transform(("translateY(" + newPos + "px)"));
	      }
	      $dragEl[0].style.height = newSize + "px";
	    }
	    if (params.hide) {
	      clearTimeout(swiper.scrollbar.timeout);
	      $el[0].style.opacity = 1;
	      swiper.scrollbar.timeout = setTimeout(function () {
	        $el[0].style.opacity = 0;
	        $el.transition(400);
	      }, 1000);
	    }
	  },
	  setTransition: function setTransition(duration) {
	    var swiper = this;
	    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return; }
	    swiper.scrollbar.$dragEl.transition(duration);
	  },
	  updateSize: function updateSize() {
	    var swiper = this;
	    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return; }
	
	    var scrollbar = swiper.scrollbar;
	    var $dragEl = scrollbar.$dragEl;
	    var $el = scrollbar.$el;
	
	    $dragEl[0].style.width = '';
	    $dragEl[0].style.height = '';
	    var trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;
	
	    var divider = swiper.size / swiper.virtualSize;
	    var moveDivider = divider * (trackSize / swiper.size);
	    var dragSize;
	    if (swiper.params.scrollbar.dragSize === 'auto') {
	      dragSize = trackSize * divider;
	    } else {
	      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
	    }
	
	    if (swiper.isHorizontal()) {
	      $dragEl[0].style.width = dragSize + "px";
	    } else {
	      $dragEl[0].style.height = dragSize + "px";
	    }
	
	    if (divider >= 1) {
	      $el[0].style.display = 'none';
	    } else {
	      $el[0].style.display = '';
	    }
	    if (swiper.params.scrollbarHide) {
	      $el[0].style.opacity = 0;
	    }
	    Utils.extend(scrollbar, {
	      trackSize: trackSize,
	      divider: divider,
	      moveDivider: moveDivider,
	      dragSize: dragSize,
	    });
	    scrollbar.$el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);
	  },
	  setDragPosition: function setDragPosition(e) {
	    var swiper = this;
	    var scrollbar = swiper.scrollbar;
	    var rtl = swiper.rtlTranslate;
	    var $el = scrollbar.$el;
	    var dragSize = scrollbar.dragSize;
	    var trackSize = scrollbar.trackSize;
	
	    var pointerPosition;
	    if (swiper.isHorizontal()) {
	      pointerPosition = ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].pageX : e.pageX || e.clientX);
	    } else {
	      pointerPosition = ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].pageY : e.pageY || e.clientY);
	    }
	    var positionRatio;
	    positionRatio = ((pointerPosition) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragSize / 2)) / (trackSize - dragSize);
	    positionRatio = Math.max(Math.min(positionRatio, 1), 0);
	    if (rtl) {
	      positionRatio = 1 - positionRatio;
	    }
	
	    var position = swiper.minTranslate() + ((swiper.maxTranslate() - swiper.minTranslate()) * positionRatio);
	
	    swiper.updateProgress(position);
	    swiper.setTranslate(position);
	    swiper.updateActiveIndex();
	    swiper.updateSlidesClasses();
	  },
	  onDragStart: function onDragStart(e) {
	    var swiper = this;
	    var params = swiper.params.scrollbar;
	    var scrollbar = swiper.scrollbar;
	    var $wrapperEl = swiper.$wrapperEl;
	    var $el = scrollbar.$el;
	    var $dragEl = scrollbar.$dragEl;
	    swiper.scrollbar.isTouched = true;
	    e.preventDefault();
	    e.stopPropagation();
	
	    $wrapperEl.transition(100);
	    $dragEl.transition(100);
	    scrollbar.setDragPosition(e);
	
	    clearTimeout(swiper.scrollbar.dragTimeout);
	
	    $el.transition(0);
	    if (params.hide) {
	      $el.css('opacity', 1);
	    }
	    swiper.emit('scrollbarDragStart', e);
	  },
	  onDragMove: function onDragMove(e) {
	    var swiper = this;
	    var scrollbar = swiper.scrollbar;
	    var $wrapperEl = swiper.$wrapperEl;
	    var $el = scrollbar.$el;
	    var $dragEl = scrollbar.$dragEl;
	
	    if (!swiper.scrollbar.isTouched) { return; }
	    if (e.preventDefault) { e.preventDefault(); }
	    else { e.returnValue = false; }
	    scrollbar.setDragPosition(e);
	    $wrapperEl.transition(0);
	    $el.transition(0);
	    $dragEl.transition(0);
	    swiper.emit('scrollbarDragMove', e);
	  },
	  onDragEnd: function onDragEnd(e) {
	    var swiper = this;
	
	    var params = swiper.params.scrollbar;
	    var scrollbar = swiper.scrollbar;
	    var $el = scrollbar.$el;
	
	    if (!swiper.scrollbar.isTouched) { return; }
	    swiper.scrollbar.isTouched = false;
	    if (params.hide) {
	      clearTimeout(swiper.scrollbar.dragTimeout);
	      swiper.scrollbar.dragTimeout = Utils.nextTick(function () {
	        $el.css('opacity', 0);
	        $el.transition(400);
	      }, 1000);
	    }
	    swiper.emit('scrollbarDragEnd', e);
	    if (params.snapOnRelease) {
	      swiper.slideToClosest();
	    }
	  },
	  enableDraggable: function enableDraggable() {
	    var swiper = this;
	    if (!swiper.params.scrollbar.el) { return; }
	    var scrollbar = swiper.scrollbar;
	    var touchEvents = swiper.touchEvents;
	    var touchEventsDesktop = swiper.touchEventsDesktop;
	    var params = swiper.params;
	    var $el = scrollbar.$el;
	    var target = $el[0];
	    var activeListener = Support.passiveListener && params.passiveListener ? { passive: false, capture: false } : false;
	    var passiveListener = Support.passiveListener && params.passiveListener ? { passive: true, capture: false } : false;
	    if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
	      target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
	      doc.addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
	      doc.addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
	    } else {
	      if (Support.touch) {
	        target.addEventListener(touchEvents.start, swiper.scrollbar.onDragStart, activeListener);
	        target.addEventListener(touchEvents.move, swiper.scrollbar.onDragMove, activeListener);
	        target.addEventListener(touchEvents.end, swiper.scrollbar.onDragEnd, passiveListener);
	      }
	      if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
	        target.addEventListener('mousedown', swiper.scrollbar.onDragStart, activeListener);
	        doc.addEventListener('mousemove', swiper.scrollbar.onDragMove, activeListener);
	        doc.addEventListener('mouseup', swiper.scrollbar.onDragEnd, passiveListener);
	      }
	    }
	  },
	  disableDraggable: function disableDraggable() {
	    var swiper = this;
	    if (!swiper.params.scrollbar.el) { return; }
	    var scrollbar = swiper.scrollbar;
	    var touchEvents = swiper.touchEvents;
	    var touchEventsDesktop = swiper.touchEventsDesktop;
	    var params = swiper.params;
	    var $el = scrollbar.$el;
	    var target = $el[0];
	    var activeListener = Support.passiveListener && params.passiveListener ? { passive: false, capture: false } : false;
	    var passiveListener = Support.passiveListener && params.passiveListener ? { passive: true, capture: false } : false;
	    if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
	      target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
	      doc.removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
	      doc.removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
	    } else {
	      if (Support.touch) {
	        target.removeEventListener(touchEvents.start, swiper.scrollbar.onDragStart, activeListener);
	        target.removeEventListener(touchEvents.move, swiper.scrollbar.onDragMove, activeListener);
	        target.removeEventListener(touchEvents.end, swiper.scrollbar.onDragEnd, passiveListener);
	      }
	      if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
	        target.removeEventListener('mousedown', swiper.scrollbar.onDragStart, activeListener);
	        doc.removeEventListener('mousemove', swiper.scrollbar.onDragMove, activeListener);
	        doc.removeEventListener('mouseup', swiper.scrollbar.onDragEnd, passiveListener);
	      }
	    }
	  },
	  init: function init() {
	    var swiper = this;
	    if (!swiper.params.scrollbar.el) { return; }
	    var scrollbar = swiper.scrollbar;
	    var $swiperEl = swiper.$el;
	    var params = swiper.params.scrollbar;
	
	    var $el = $(params.el);
	    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
	      $el = $swiperEl.find(params.el);
	    }
	
	    var $dragEl = $el.find(("." + (swiper.params.scrollbar.dragClass)));
	    if ($dragEl.length === 0) {
	      $dragEl = $(("<div class=\"" + (swiper.params.scrollbar.dragClass) + "\"></div>"));
	      $el.append($dragEl);
	    }
	
	    Utils.extend(scrollbar, {
	      $el: $el,
	      el: $el[0],
	      $dragEl: $dragEl,
	      dragEl: $dragEl[0],
	    });
	
	    if (params.draggable) {
	      scrollbar.enableDraggable();
	    }
	  },
	  destroy: function destroy() {
	    var swiper = this;
	    swiper.scrollbar.disableDraggable();
	  },
	};
	
	var Scrollbar$1 = {
	  name: 'scrollbar',
	  params: {
	    scrollbar: {
	      el: null,
	      dragSize: 'auto',
	      hide: false,
	      draggable: false,
	      snapOnRelease: true,
	      lockClass: 'swiper-scrollbar-lock',
	      dragClass: 'swiper-scrollbar-drag',
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      scrollbar: {
	        init: Scrollbar.init.bind(swiper),
	        destroy: Scrollbar.destroy.bind(swiper),
	        updateSize: Scrollbar.updateSize.bind(swiper),
	        setTranslate: Scrollbar.setTranslate.bind(swiper),
	        setTransition: Scrollbar.setTransition.bind(swiper),
	        enableDraggable: Scrollbar.enableDraggable.bind(swiper),
	        disableDraggable: Scrollbar.disableDraggable.bind(swiper),
	        setDragPosition: Scrollbar.setDragPosition.bind(swiper),
	        onDragStart: Scrollbar.onDragStart.bind(swiper),
	        onDragMove: Scrollbar.onDragMove.bind(swiper),
	        onDragEnd: Scrollbar.onDragEnd.bind(swiper),
	        isTouched: false,
	        timeout: null,
	        dragTimeout: null,
	      },
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      swiper.scrollbar.init();
	      swiper.scrollbar.updateSize();
	      swiper.scrollbar.setTranslate();
	    },
	    update: function update() {
	      var swiper = this;
	      swiper.scrollbar.updateSize();
	    },
	    resize: function resize() {
	      var swiper = this;
	      swiper.scrollbar.updateSize();
	    },
	    observerUpdate: function observerUpdate() {
	      var swiper = this;
	      swiper.scrollbar.updateSize();
	    },
	    setTranslate: function setTranslate() {
	      var swiper = this;
	      swiper.scrollbar.setTranslate();
	    },
	    setTransition: function setTransition(duration) {
	      var swiper = this;
	      swiper.scrollbar.setTransition(duration);
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      swiper.scrollbar.destroy();
	    },
	  },
	};
	
	var Parallax = {
	  setTransform: function setTransform(el, progress) {
	    var swiper = this;
	    var rtl = swiper.rtl;
	
	    var $el = $(el);
	    var rtlFactor = rtl ? -1 : 1;
	
	    var p = $el.attr('data-swiper-parallax') || '0';
	    var x = $el.attr('data-swiper-parallax-x');
	    var y = $el.attr('data-swiper-parallax-y');
	    var scale = $el.attr('data-swiper-parallax-scale');
	    var opacity = $el.attr('data-swiper-parallax-opacity');
	
	    if (x || y) {
	      x = x || '0';
	      y = y || '0';
	    } else if (swiper.isHorizontal()) {
	      x = p;
	      y = '0';
	    } else {
	      y = p;
	      x = '0';
	    }
	
	    if ((x).indexOf('%') >= 0) {
	      x = (parseInt(x, 10) * progress * rtlFactor) + "%";
	    } else {
	      x = (x * progress * rtlFactor) + "px";
	    }
	    if ((y).indexOf('%') >= 0) {
	      y = (parseInt(y, 10) * progress) + "%";
	    } else {
	      y = (y * progress) + "px";
	    }
	
	    if (typeof opacity !== 'undefined' && opacity !== null) {
	      var currentOpacity = opacity - ((opacity - 1) * (1 - Math.abs(progress)));
	      $el[0].style.opacity = currentOpacity;
	    }
	    if (typeof scale === 'undefined' || scale === null) {
	      $el.transform(("translate3d(" + x + ", " + y + ", 0px)"));
	    } else {
	      var currentScale = scale - ((scale - 1) * (1 - Math.abs(progress)));
	      $el.transform(("translate3d(" + x + ", " + y + ", 0px) scale(" + currentScale + ")"));
	    }
	  },
	  setTranslate: function setTranslate() {
	    var swiper = this;
	    var $el = swiper.$el;
	    var slides = swiper.slides;
	    var progress = swiper.progress;
	    var snapGrid = swiper.snapGrid;
	    $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
	      .each(function (index, el) {
	        swiper.parallax.setTransform(el, progress);
	      });
	    slides.each(function (slideIndex, slideEl) {
	      var slideProgress = slideEl.progress;
	      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
	        slideProgress += Math.ceil(slideIndex / 2) - (progress * (snapGrid.length - 1));
	      }
	      slideProgress = Math.min(Math.max(slideProgress, -1), 1);
	      $(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
	        .each(function (index, el) {
	          swiper.parallax.setTransform(el, slideProgress);
	        });
	    });
	  },
	  setTransition: function setTransition(duration) {
	    if ( duration === void 0 ) duration = this.params.speed;
	
	    var swiper = this;
	    var $el = swiper.$el;
	    $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
	      .each(function (index, parallaxEl) {
	        var $parallaxEl = $(parallaxEl);
	        var parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
	        if (duration === 0) { parallaxDuration = 0; }
	        $parallaxEl.transition(parallaxDuration);
	      });
	  },
	};
	
	var Parallax$1 = {
	  name: 'parallax',
	  params: {
	    parallax: {
	      enabled: false,
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      parallax: {
	        setTransform: Parallax.setTransform.bind(swiper),
	        setTranslate: Parallax.setTranslate.bind(swiper),
	        setTransition: Parallax.setTransition.bind(swiper),
	      },
	    });
	  },
	  on: {
	    beforeInit: function beforeInit() {
	      var swiper = this;
	      if (!swiper.params.parallax.enabled) { return; }
	      swiper.params.watchSlidesProgress = true;
	    },
	    init: function init() {
	      var swiper = this;
	      if (!swiper.params.parallax) { return; }
	      swiper.parallax.setTranslate();
	    },
	    setTranslate: function setTranslate() {
	      var swiper = this;
	      if (!swiper.params.parallax) { return; }
	      swiper.parallax.setTranslate();
	    },
	    setTransition: function setTransition(duration) {
	      var swiper = this;
	      if (!swiper.params.parallax) { return; }
	      swiper.parallax.setTransition(duration);
	    },
	  },
	};
	
	var Zoom = {
	  // Calc Scale From Multi-touches
	  getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {
	    if (e.targetTouches.length < 2) { return 1; }
	    var x1 = e.targetTouches[0].pageX;
	    var y1 = e.targetTouches[0].pageY;
	    var x2 = e.targetTouches[1].pageX;
	    var y2 = e.targetTouches[1].pageY;
	    var distance = Math.sqrt((Math.pow( (x2 - x1), 2 )) + (Math.pow( (y2 - y1), 2 )));
	    return distance;
	  },
	  // Events
	  onGestureStart: function onGestureStart(e) {
	    var swiper = this;
	    var params = swiper.params.zoom;
	    var zoom = swiper.zoom;
	    var gesture = zoom.gesture;
	    zoom.fakeGestureTouched = false;
	    zoom.fakeGestureMoved = false;
	    if (!Support.gestures) {
	      if (e.type !== 'touchstart' || (e.type === 'touchstart' && e.targetTouches.length < 2)) {
	        return;
	      }
	      zoom.fakeGestureTouched = true;
	      gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);
	    }
	    if (!gesture.$slideEl || !gesture.$slideEl.length) {
	      gesture.$slideEl = $(e.target).closest('.swiper-slide');
	      if (gesture.$slideEl.length === 0) { gesture.$slideEl = swiper.slides.eq(swiper.activeIndex); }
	      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
	      gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
	      gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
	      if (gesture.$imageWrapEl.length === 0) {
	        gesture.$imageEl = undefined;
	        return;
	      }
	    }
	    gesture.$imageEl.transition(0);
	    swiper.zoom.isScaling = true;
	  },
	  onGestureChange: function onGestureChange(e) {
	    var swiper = this;
	    var params = swiper.params.zoom;
	    var zoom = swiper.zoom;
	    var gesture = zoom.gesture;
	    if (!Support.gestures) {
	      if (e.type !== 'touchmove' || (e.type === 'touchmove' && e.targetTouches.length < 2)) {
	        return;
	      }
	      zoom.fakeGestureMoved = true;
	      gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);
	    }
	    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
	    if (Support.gestures) {
	      swiper.zoom.scale = e.scale * zoom.currentScale;
	    } else {
	      zoom.scale = (gesture.scaleMove / gesture.scaleStart) * zoom.currentScale;
	    }
	    if (zoom.scale > gesture.maxRatio) {
	      zoom.scale = (gesture.maxRatio - 1) + (Math.pow( ((zoom.scale - gesture.maxRatio) + 1), 0.5 ));
	    }
	    if (zoom.scale < params.minRatio) {
	      zoom.scale = (params.minRatio + 1) - (Math.pow( ((params.minRatio - zoom.scale) + 1), 0.5 ));
	    }
	    gesture.$imageEl.transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
	  },
	  onGestureEnd: function onGestureEnd(e) {
	    var swiper = this;
	    var params = swiper.params.zoom;
	    var zoom = swiper.zoom;
	    var gesture = zoom.gesture;
	    if (!Support.gestures) {
	      if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {
	        return;
	      }
	      if (e.type !== 'touchend' || (e.type === 'touchend' && e.changedTouches.length < 2 && !Device.android)) {
	        return;
	      }
	      zoom.fakeGestureTouched = false;
	      zoom.fakeGestureMoved = false;
	    }
	    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
	    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
	    gesture.$imageEl.transition(swiper.params.speed).transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
	    zoom.currentScale = zoom.scale;
	    zoom.isScaling = false;
	    if (zoom.scale === 1) { gesture.$slideEl = undefined; }
	  },
	  onTouchStart: function onTouchStart(e) {
	    var swiper = this;
	    var zoom = swiper.zoom;
	    var gesture = zoom.gesture;
	    var image = zoom.image;
	    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
	    if (image.isTouched) { return; }
	    if (Device.android) { e.preventDefault(); }
	    image.isTouched = true;
	    image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
	    image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
	  },
	  onTouchMove: function onTouchMove(e) {
	    var swiper = this;
	    var zoom = swiper.zoom;
	    var gesture = zoom.gesture;
	    var image = zoom.image;
	    var velocity = zoom.velocity;
	    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
	    swiper.allowClick = false;
	    if (!image.isTouched || !gesture.$slideEl) { return; }
	
	    if (!image.isMoved) {
	      image.width = gesture.$imageEl[0].offsetWidth;
	      image.height = gesture.$imageEl[0].offsetHeight;
	      image.startX = Utils.getTranslate(gesture.$imageWrapEl[0], 'x') || 0;
	      image.startY = Utils.getTranslate(gesture.$imageWrapEl[0], 'y') || 0;
	      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
	      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
	      gesture.$imageWrapEl.transition(0);
	      if (swiper.rtl) {
	        image.startX = -image.startX;
	        image.startY = -image.startY;
	      }
	    }
	    // Define if we need image drag
	    var scaledWidth = image.width * zoom.scale;
	    var scaledHeight = image.height * zoom.scale;
	
	    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) { return; }
	
	    image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
	    image.maxX = -image.minX;
	    image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
	    image.maxY = -image.minY;
	
	    image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
	    image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
	
	    if (!image.isMoved && !zoom.isScaling) {
	      if (
	        swiper.isHorizontal() &&
	        (
	          (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x) ||
	          (Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)
	        )
	      ) {
	        image.isTouched = false;
	        return;
	      } else if (
	        !swiper.isHorizontal() &&
	        (
	          (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y) ||
	          (Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)
	        )
	      ) {
	        image.isTouched = false;
	        return;
	      }
	    }
	    e.preventDefault();
	    e.stopPropagation();
	
	    image.isMoved = true;
	    image.currentX = (image.touchesCurrent.x - image.touchesStart.x) + image.startX;
	    image.currentY = (image.touchesCurrent.y - image.touchesStart.y) + image.startY;
	
	    if (image.currentX < image.minX) {
	      image.currentX = (image.minX + 1) - (Math.pow( ((image.minX - image.currentX) + 1), 0.8 ));
	    }
	    if (image.currentX > image.maxX) {
	      image.currentX = (image.maxX - 1) + (Math.pow( ((image.currentX - image.maxX) + 1), 0.8 ));
	    }
	
	    if (image.currentY < image.minY) {
	      image.currentY = (image.minY + 1) - (Math.pow( ((image.minY - image.currentY) + 1), 0.8 ));
	    }
	    if (image.currentY > image.maxY) {
	      image.currentY = (image.maxY - 1) + (Math.pow( ((image.currentY - image.maxY) + 1), 0.8 ));
	    }
	
	    // Velocity
	    if (!velocity.prevPositionX) { velocity.prevPositionX = image.touchesCurrent.x; }
	    if (!velocity.prevPositionY) { velocity.prevPositionY = image.touchesCurrent.y; }
	    if (!velocity.prevTime) { velocity.prevTime = Date.now(); }
	    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
	    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
	    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) { velocity.x = 0; }
	    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) { velocity.y = 0; }
	    velocity.prevPositionX = image.touchesCurrent.x;
	    velocity.prevPositionY = image.touchesCurrent.y;
	    velocity.prevTime = Date.now();
	
	    gesture.$imageWrapEl.transform(("translate3d(" + (image.currentX) + "px, " + (image.currentY) + "px,0)"));
	  },
	  onTouchEnd: function onTouchEnd() {
	    var swiper = this;
	    var zoom = swiper.zoom;
	    var gesture = zoom.gesture;
	    var image = zoom.image;
	    var velocity = zoom.velocity;
	    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
	    if (!image.isTouched || !image.isMoved) {
	      image.isTouched = false;
	      image.isMoved = false;
	      return;
	    }
	    image.isTouched = false;
	    image.isMoved = false;
	    var momentumDurationX = 300;
	    var momentumDurationY = 300;
	    var momentumDistanceX = velocity.x * momentumDurationX;
	    var newPositionX = image.currentX + momentumDistanceX;
	    var momentumDistanceY = velocity.y * momentumDurationY;
	    var newPositionY = image.currentY + momentumDistanceY;
	
	    // Fix duration
	    if (velocity.x !== 0) { momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x); }
	    if (velocity.y !== 0) { momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y); }
	    var momentumDuration = Math.max(momentumDurationX, momentumDurationY);
	
	    image.currentX = newPositionX;
	    image.currentY = newPositionY;
	
	    // Define if we need image drag
	    var scaledWidth = image.width * zoom.scale;
	    var scaledHeight = image.height * zoom.scale;
	    image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
	    image.maxX = -image.minX;
	    image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
	    image.maxY = -image.minY;
	    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
	    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);
	
	    gesture.$imageWrapEl.transition(momentumDuration).transform(("translate3d(" + (image.currentX) + "px, " + (image.currentY) + "px,0)"));
	  },
	  onTransitionEnd: function onTransitionEnd() {
	    var swiper = this;
	    var zoom = swiper.zoom;
	    var gesture = zoom.gesture;
	    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
	      gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
	      gesture.$imageWrapEl.transform('translate3d(0,0,0)');
	      gesture.$slideEl = undefined;
	      gesture.$imageEl = undefined;
	      gesture.$imageWrapEl = undefined;
	
	      zoom.scale = 1;
	      zoom.currentScale = 1;
	    }
	  },
	  // Toggle Zoom
	  toggle: function toggle(e) {
	    var swiper = this;
	    var zoom = swiper.zoom;
	
	    if (zoom.scale && zoom.scale !== 1) {
	      // Zoom Out
	      zoom.out();
	    } else {
	      // Zoom In
	      zoom.in(e);
	    }
	  },
	  in: function in$1(e) {
	    var swiper = this;
	
	    var zoom = swiper.zoom;
	    var params = swiper.params.zoom;
	    var gesture = zoom.gesture;
	    var image = zoom.image;
	
	    if (!gesture.$slideEl) {
	      gesture.$slideEl = swiper.clickedSlide ? $(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
	      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
	      gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
	    }
	    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
	
	    gesture.$slideEl.addClass(("" + (params.zoomedSlideClass)));
	
	    var touchX;
	    var touchY;
	    var offsetX;
	    var offsetY;
	    var diffX;
	    var diffY;
	    var translateX;
	    var translateY;
	    var imageWidth;
	    var imageHeight;
	    var scaledWidth;
	    var scaledHeight;
	    var translateMinX;
	    var translateMinY;
	    var translateMaxX;
	    var translateMaxY;
	    var slideWidth;
	    var slideHeight;
	
	    if (typeof image.touchesStart.x === 'undefined' && e) {
	      touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
	      touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
	    } else {
	      touchX = image.touchesStart.x;
	      touchY = image.touchesStart.y;
	    }
	
	    zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
	    zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
	    if (e) {
	      slideWidth = gesture.$slideEl[0].offsetWidth;
	      slideHeight = gesture.$slideEl[0].offsetHeight;
	      offsetX = gesture.$slideEl.offset().left;
	      offsetY = gesture.$slideEl.offset().top;
	      diffX = (offsetX + (slideWidth / 2)) - touchX;
	      diffY = (offsetY + (slideHeight / 2)) - touchY;
	
	      imageWidth = gesture.$imageEl[0].offsetWidth;
	      imageHeight = gesture.$imageEl[0].offsetHeight;
	      scaledWidth = imageWidth * zoom.scale;
	      scaledHeight = imageHeight * zoom.scale;
	
	      translateMinX = Math.min(((slideWidth / 2) - (scaledWidth / 2)), 0);
	      translateMinY = Math.min(((slideHeight / 2) - (scaledHeight / 2)), 0);
	      translateMaxX = -translateMinX;
	      translateMaxY = -translateMinY;
	
	      translateX = diffX * zoom.scale;
	      translateY = diffY * zoom.scale;
	
	      if (translateX < translateMinX) {
	        translateX = translateMinX;
	      }
	      if (translateX > translateMaxX) {
	        translateX = translateMaxX;
	      }
	
	      if (translateY < translateMinY) {
	        translateY = translateMinY;
	      }
	      if (translateY > translateMaxY) {
	        translateY = translateMaxY;
	      }
	    } else {
	      translateX = 0;
	      translateY = 0;
	    }
	    gesture.$imageWrapEl.transition(300).transform(("translate3d(" + translateX + "px, " + translateY + "px,0)"));
	    gesture.$imageEl.transition(300).transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
	  },
	  out: function out() {
	    var swiper = this;
	
	    var zoom = swiper.zoom;
	    var params = swiper.params.zoom;
	    var gesture = zoom.gesture;
	
	    if (!gesture.$slideEl) {
	      gesture.$slideEl = swiper.clickedSlide ? $(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
	      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
	      gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
	    }
	    if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
	
	    zoom.scale = 1;
	    zoom.currentScale = 1;
	    gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
	    gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
	    gesture.$slideEl.removeClass(("" + (params.zoomedSlideClass)));
	    gesture.$slideEl = undefined;
	  },
	  // Attach/Detach Events
	  enable: function enable() {
	    var swiper = this;
	    var zoom = swiper.zoom;
	    if (zoom.enabled) { return; }
	    zoom.enabled = true;
	
	    var passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;
	
	    // Scale image
	    if (Support.gestures) {
	      swiper.$wrapperEl.on('gesturestart', '.swiper-slide', zoom.onGestureStart, passiveListener);
	      swiper.$wrapperEl.on('gesturechange', '.swiper-slide', zoom.onGestureChange, passiveListener);
	      swiper.$wrapperEl.on('gestureend', '.swiper-slide', zoom.onGestureEnd, passiveListener);
	    } else if (swiper.touchEvents.start === 'touchstart') {
	      swiper.$wrapperEl.on(swiper.touchEvents.start, '.swiper-slide', zoom.onGestureStart, passiveListener);
	      swiper.$wrapperEl.on(swiper.touchEvents.move, '.swiper-slide', zoom.onGestureChange, passiveListener);
	      swiper.$wrapperEl.on(swiper.touchEvents.end, '.swiper-slide', zoom.onGestureEnd, passiveListener);
	    }
	
	    // Move image
	    swiper.$wrapperEl.on(swiper.touchEvents.move, ("." + (swiper.params.zoom.containerClass)), zoom.onTouchMove);
	  },
	  disable: function disable() {
	    var swiper = this;
	    var zoom = swiper.zoom;
	    if (!zoom.enabled) { return; }
	
	    swiper.zoom.enabled = false;
	
	    var passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;
	
	    // Scale image
	    if (Support.gestures) {
	      swiper.$wrapperEl.off('gesturestart', '.swiper-slide', zoom.onGestureStart, passiveListener);
	      swiper.$wrapperEl.off('gesturechange', '.swiper-slide', zoom.onGestureChange, passiveListener);
	      swiper.$wrapperEl.off('gestureend', '.swiper-slide', zoom.onGestureEnd, passiveListener);
	    } else if (swiper.touchEvents.start === 'touchstart') {
	      swiper.$wrapperEl.off(swiper.touchEvents.start, '.swiper-slide', zoom.onGestureStart, passiveListener);
	      swiper.$wrapperEl.off(swiper.touchEvents.move, '.swiper-slide', zoom.onGestureChange, passiveListener);
	      swiper.$wrapperEl.off(swiper.touchEvents.end, '.swiper-slide', zoom.onGestureEnd, passiveListener);
	    }
	
	    // Move image
	    swiper.$wrapperEl.off(swiper.touchEvents.move, ("." + (swiper.params.zoom.containerClass)), zoom.onTouchMove);
	  },
	};
	
	var Zoom$1 = {
	  name: 'zoom',
	  params: {
	    zoom: {
	      enabled: false,
	      maxRatio: 3,
	      minRatio: 1,
	      toggle: true,
	      containerClass: 'swiper-zoom-container',
	      zoomedSlideClass: 'swiper-slide-zoomed',
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    var zoom = {
	      enabled: false,
	      scale: 1,
	      currentScale: 1,
	      isScaling: false,
	      gesture: {
	        $slideEl: undefined,
	        slideWidth: undefined,
	        slideHeight: undefined,
	        $imageEl: undefined,
	        $imageWrapEl: undefined,
	        maxRatio: 3,
	      },
	      image: {
	        isTouched: undefined,
	        isMoved: undefined,
	        currentX: undefined,
	        currentY: undefined,
	        minX: undefined,
	        minY: undefined,
	        maxX: undefined,
	        maxY: undefined,
	        width: undefined,
	        height: undefined,
	        startX: undefined,
	        startY: undefined,
	        touchesStart: {},
	        touchesCurrent: {},
	      },
	      velocity: {
	        x: undefined,
	        y: undefined,
	        prevPositionX: undefined,
	        prevPositionY: undefined,
	        prevTime: undefined,
	      },
	    };
	    ('onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out').split(' ').forEach(function (methodName) {
	      zoom[methodName] = Zoom[methodName].bind(swiper);
	    });
	    Utils.extend(swiper, {
	      zoom: zoom,
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      if (swiper.params.zoom.enabled) {
	        swiper.zoom.enable();
	      }
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      swiper.zoom.disable();
	    },
	    touchStart: function touchStart(e) {
	      var swiper = this;
	      if (!swiper.zoom.enabled) { return; }
	      swiper.zoom.onTouchStart(e);
	    },
	    touchEnd: function touchEnd(e) {
	      var swiper = this;
	      if (!swiper.zoom.enabled) { return; }
	      swiper.zoom.onTouchEnd(e);
	    },
	    doubleTap: function doubleTap(e) {
	      var swiper = this;
	      if (swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
	        swiper.zoom.toggle(e);
	      }
	    },
	    transitionEnd: function transitionEnd() {
	      var swiper = this;
	      if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
	        swiper.zoom.onTransitionEnd();
	      }
	    },
	  },
	};
	
	var Lazy = {
	  loadInSlide: function loadInSlide(index, loadInDuplicate) {
	    if ( loadInDuplicate === void 0 ) loadInDuplicate = true;
	
	    var swiper = this;
	    var params = swiper.params.lazy;
	    if (typeof index === 'undefined') { return; }
	    if (swiper.slides.length === 0) { return; }
	    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
	
	    var $slideEl = isVirtual
	      ? swiper.$wrapperEl.children(("." + (swiper.params.slideClass) + "[data-swiper-slide-index=\"" + index + "\"]"))
	      : swiper.slides.eq(index);
	
	    var $images = $slideEl.find(("." + (params.elementClass) + ":not(." + (params.loadedClass) + "):not(." + (params.loadingClass) + ")"));
	    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
	      $images = $images.add($slideEl[0]);
	    }
	    if ($images.length === 0) { return; }
	
	    $images.each(function (imageIndex, imageEl) {
	      var $imageEl = $(imageEl);
	      $imageEl.addClass(params.loadingClass);
	
	      var background = $imageEl.attr('data-background');
	      var src = $imageEl.attr('data-src');
	      var srcset = $imageEl.attr('data-srcset');
	      var sizes = $imageEl.attr('data-sizes');
	
	      swiper.loadImage($imageEl[0], (src || background), srcset, sizes, false, function () {
	        if (typeof swiper === 'undefined' || swiper === null || !swiper || (swiper && !swiper.params) || swiper.destroyed) { return; }
	        if (background) {
	          $imageEl.css('background-image', ("url(\"" + background + "\")"));
	          $imageEl.removeAttr('data-background');
	        } else {
	          if (srcset) {
	            $imageEl.attr('srcset', srcset);
	            $imageEl.removeAttr('data-srcset');
	          }
	          if (sizes) {
	            $imageEl.attr('sizes', sizes);
	            $imageEl.removeAttr('data-sizes');
	          }
	          if (src) {
	            $imageEl.attr('src', src);
	            $imageEl.removeAttr('data-src');
	          }
	        }
	
	        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
	        $slideEl.find(("." + (params.preloaderClass))).remove();
	        if (swiper.params.loop && loadInDuplicate) {
	          var slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');
	          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
	            var originalSlide = swiper.$wrapperEl.children(("[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]:not(." + (swiper.params.slideDuplicateClass) + ")"));
	            swiper.lazy.loadInSlide(originalSlide.index(), false);
	          } else {
	            var duplicatedSlide = swiper.$wrapperEl.children(("." + (swiper.params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]"));
	            swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
	          }
	        }
	        swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);
	      });
	
	      swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
	    });
	  },
	  load: function load() {
	    var swiper = this;
	    var $wrapperEl = swiper.$wrapperEl;
	    var swiperParams = swiper.params;
	    var slides = swiper.slides;
	    var activeIndex = swiper.activeIndex;
	    var isVirtual = swiper.virtual && swiperParams.virtual.enabled;
	    var params = swiperParams.lazy;
	
	    var slidesPerView = swiperParams.slidesPerView;
	    if (slidesPerView === 'auto') {
	      slidesPerView = 0;
	    }
	
	    function slideExist(index) {
	      if (isVirtual) {
	        if ($wrapperEl.children(("." + (swiperParams.slideClass) + "[data-swiper-slide-index=\"" + index + "\"]")).length) {
	          return true;
	        }
	      } else if (slides[index]) { return true; }
	      return false;
	    }
	    function slideIndex(slideEl) {
	      if (isVirtual) {
	        return $(slideEl).attr('data-swiper-slide-index');
	      }
	      return $(slideEl).index();
	    }
	
	    if (!swiper.lazy.initialImageLoaded) { swiper.lazy.initialImageLoaded = true; }
	    if (swiper.params.watchSlidesVisibility) {
	      $wrapperEl.children(("." + (swiperParams.slideVisibleClass))).each(function (elIndex, slideEl) {
	        var index = isVirtual ? $(slideEl).attr('data-swiper-slide-index') : $(slideEl).index();
	        swiper.lazy.loadInSlide(index);
	      });
	    } else if (slidesPerView > 1) {
	      for (var i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
	        if (slideExist(i)) { swiper.lazy.loadInSlide(i); }
	      }
	    } else {
	      swiper.lazy.loadInSlide(activeIndex);
	    }
	    if (params.loadPrevNext) {
	      if (slidesPerView > 1 || (params.loadPrevNextAmount && params.loadPrevNextAmount > 1)) {
	        var amount = params.loadPrevNextAmount;
	        var spv = slidesPerView;
	        var maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
	        var minIndex = Math.max(activeIndex - Math.max(spv, amount), 0);
	        // Next Slides
	        for (var i$1 = activeIndex + slidesPerView; i$1 < maxIndex; i$1 += 1) {
	          if (slideExist(i$1)) { swiper.lazy.loadInSlide(i$1); }
	        }
	        // Prev Slides
	        for (var i$2 = minIndex; i$2 < activeIndex; i$2 += 1) {
	          if (slideExist(i$2)) { swiper.lazy.loadInSlide(i$2); }
	        }
	      } else {
	        var nextSlide = $wrapperEl.children(("." + (swiperParams.slideNextClass)));
	        if (nextSlide.length > 0) { swiper.lazy.loadInSlide(slideIndex(nextSlide)); }
	
	        var prevSlide = $wrapperEl.children(("." + (swiperParams.slidePrevClass)));
	        if (prevSlide.length > 0) { swiper.lazy.loadInSlide(slideIndex(prevSlide)); }
	      }
	    }
	  },
	};
	
	var Lazy$1 = {
	  name: 'lazy',
	  params: {
	    lazy: {
	      enabled: false,
	      loadPrevNext: false,
	      loadPrevNextAmount: 1,
	      loadOnTransitionStart: false,
	
	      elementClass: 'swiper-lazy',
	      loadingClass: 'swiper-lazy-loading',
	      loadedClass: 'swiper-lazy-loaded',
	      preloaderClass: 'swiper-lazy-preloader',
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      lazy: {
	        initialImageLoaded: false,
	        load: Lazy.load.bind(swiper),
	        loadInSlide: Lazy.loadInSlide.bind(swiper),
	      },
	    });
	  },
	  on: {
	    beforeInit: function beforeInit() {
	      var swiper = this;
	      if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
	        swiper.params.preloadImages = false;
	      }
	    },
	    init: function init() {
	      var swiper = this;
	      if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
	        swiper.lazy.load();
	      }
	    },
	    scroll: function scroll() {
	      var swiper = this;
	      if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
	        swiper.lazy.load();
	      }
	    },
	    resize: function resize() {
	      var swiper = this;
	      if (swiper.params.lazy.enabled) {
	        swiper.lazy.load();
	      }
	    },
	    scrollbarDragMove: function scrollbarDragMove() {
	      var swiper = this;
	      if (swiper.params.lazy.enabled) {
	        swiper.lazy.load();
	      }
	    },
	    transitionStart: function transitionStart() {
	      var swiper = this;
	      if (swiper.params.lazy.enabled) {
	        if (swiper.params.lazy.loadOnTransitionStart || (!swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded)) {
	          swiper.lazy.load();
	        }
	      }
	    },
	    transitionEnd: function transitionEnd() {
	      var swiper = this;
	      if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
	        swiper.lazy.load();
	      }
	    },
	  },
	};
	
	/* eslint no-bitwise: ["error", { "allow": [">>"] }] */
	
	var Controller = {
	  LinearSpline: function LinearSpline(x, y) {
	    var binarySearch = (function search() {
	      var maxIndex;
	      var minIndex;
	      var guess;
	      return function (array, val) {
	        minIndex = -1;
	        maxIndex = array.length;
	        while (maxIndex - minIndex > 1) {
	          guess = maxIndex + minIndex >> 1;
	          if (array[guess] <= val) {
	            minIndex = guess;
	          } else {
	            maxIndex = guess;
	          }
	        }
	        return maxIndex;
	      };
	    }());
	    this.x = x;
	    this.y = y;
	    this.lastIndex = x.length - 1;
	    // Given an x value (x2), return the expected y2 value:
	    // (x1,y1) is the known point before given value,
	    // (x3,y3) is the known point after given value.
	    var i1;
	    var i3;
	
	    this.interpolate = function interpolate(x2) {
	      if (!x2) { return 0; }
	
	      // Get the indexes of x1 and x3 (the array indexes before and after given x2):
	      i3 = binarySearch(this.x, x2);
	      i1 = i3 - 1;
	
	      // We have our indexes i1 & i3, so we can calculate already:
	      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
	      return (((x2 - this.x[i1]) * (this.y[i3] - this.y[i1])) / (this.x[i3] - this.x[i1])) + this.y[i1];
	    };
	    return this;
	  },
	  // xxx: for now i will just save one spline function to to
	  getInterpolateFunction: function getInterpolateFunction(c) {
	    var swiper = this;
	    if (!swiper.controller.spline) {
	      swiper.controller.spline = swiper.params.loop ?
	        new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid) :
	        new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
	    }
	  },
	  setTranslate: function setTranslate(setTranslate$1, byController) {
	    var swiper = this;
	    var controlled = swiper.controller.control;
	    var multiplier;
	    var controlledTranslate;
	    function setControlledTranslate(c) {
	      // this will create an Interpolate function based on the snapGrids
	      // x is the Grid of the scrolled scroller and y will be the controlled scroller
	      // it makes sense to create this only once and recall it for the interpolation
	      // the function does a lot of value caching for performance
	      var translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;
	      if (swiper.params.controller.by === 'slide') {
	        swiper.controller.getInterpolateFunction(c);
	        // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
	        // but it did not work out
	        controlledTranslate = -swiper.controller.spline.interpolate(-translate);
	      }
	
	      if (!controlledTranslate || swiper.params.controller.by === 'container') {
	        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
	        controlledTranslate = ((translate - swiper.minTranslate()) * multiplier) + c.minTranslate();
	      }
	
	      if (swiper.params.controller.inverse) {
	        controlledTranslate = c.maxTranslate() - controlledTranslate;
	      }
	      c.updateProgress(controlledTranslate);
	      c.setTranslate(controlledTranslate, swiper);
	      c.updateActiveIndex();
	      c.updateSlidesClasses();
	    }
	    if (Array.isArray(controlled)) {
	      for (var i = 0; i < controlled.length; i += 1) {
	        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
	          setControlledTranslate(controlled[i]);
	        }
	      }
	    } else if (controlled instanceof Swiper && byController !== controlled) {
	      setControlledTranslate(controlled);
	    }
	  },
	  setTransition: function setTransition(duration, byController) {
	    var swiper = this;
	    var controlled = swiper.controller.control;
	    var i;
	    function setControlledTransition(c) {
	      c.setTransition(duration, swiper);
	      if (duration !== 0) {
	        c.transitionStart();
	        c.$wrapperEl.transitionEnd(function () {
	          if (!controlled) { return; }
	          if (c.params.loop && swiper.params.controller.by === 'slide') {
	            c.loopFix();
	          }
	          c.transitionEnd();
	        });
	      }
	    }
	    if (Array.isArray(controlled)) {
	      for (i = 0; i < controlled.length; i += 1) {
	        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
	          setControlledTransition(controlled[i]);
	        }
	      }
	    } else if (controlled instanceof Swiper && byController !== controlled) {
	      setControlledTransition(controlled);
	    }
	  },
	};
	var Controller$1 = {
	  name: 'controller',
	  params: {
	    controller: {
	      control: undefined,
	      inverse: false,
	      by: 'slide', // or 'container'
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      controller: {
	        control: swiper.params.controller.control,
	        getInterpolateFunction: Controller.getInterpolateFunction.bind(swiper),
	        setTranslate: Controller.setTranslate.bind(swiper),
	        setTransition: Controller.setTransition.bind(swiper),
	      },
	    });
	  },
	  on: {
	    update: function update() {
	      var swiper = this;
	      if (!swiper.controller.control) { return; }
	      if (swiper.controller.spline) {
	        swiper.controller.spline = undefined;
	        delete swiper.controller.spline;
	      }
	    },
	    resize: function resize() {
	      var swiper = this;
	      if (!swiper.controller.control) { return; }
	      if (swiper.controller.spline) {
	        swiper.controller.spline = undefined;
	        delete swiper.controller.spline;
	      }
	    },
	    observerUpdate: function observerUpdate() {
	      var swiper = this;
	      if (!swiper.controller.control) { return; }
	      if (swiper.controller.spline) {
	        swiper.controller.spline = undefined;
	        delete swiper.controller.spline;
	      }
	    },
	    setTranslate: function setTranslate(translate, byController) {
	      var swiper = this;
	      if (!swiper.controller.control) { return; }
	      swiper.controller.setTranslate(translate, byController);
	    },
	    setTransition: function setTransition(duration, byController) {
	      var swiper = this;
	      if (!swiper.controller.control) { return; }
	      swiper.controller.setTransition(duration, byController);
	    },
	  },
	};
	
	var a11y = {
	  makeElFocusable: function makeElFocusable($el) {
	    $el.attr('tabIndex', '0');
	    return $el;
	  },
	  addElRole: function addElRole($el, role) {
	    $el.attr('role', role);
	    return $el;
	  },
	  addElLabel: function addElLabel($el, label) {
	    $el.attr('aria-label', label);
	    return $el;
	  },
	  disableEl: function disableEl($el) {
	    $el.attr('aria-disabled', true);
	    return $el;
	  },
	  enableEl: function enableEl($el) {
	    $el.attr('aria-disabled', false);
	    return $el;
	  },
	  onEnterKey: function onEnterKey(e) {
	    var swiper = this;
	    var params = swiper.params.a11y;
	    if (e.keyCode !== 13) { return; }
	    var $targetEl = $(e.target);
	    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
	      if (!(swiper.isEnd && !swiper.params.loop)) {
	        swiper.slideNext();
	      }
	      if (swiper.isEnd) {
	        swiper.a11y.notify(params.lastSlideMessage);
	      } else {
	        swiper.a11y.notify(params.nextSlideMessage);
	      }
	    }
	    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
	      if (!(swiper.isBeginning && !swiper.params.loop)) {
	        swiper.slidePrev();
	      }
	      if (swiper.isBeginning) {
	        swiper.a11y.notify(params.firstSlideMessage);
	      } else {
	        swiper.a11y.notify(params.prevSlideMessage);
	      }
	    }
	    if (swiper.pagination && $targetEl.is(("." + (swiper.params.pagination.bulletClass)))) {
	      $targetEl[0].click();
	    }
	  },
	  notify: function notify(message) {
	    var swiper = this;
	    var notification = swiper.a11y.liveRegion;
	    if (notification.length === 0) { return; }
	    notification.html('');
	    notification.html(message);
	  },
	  updateNavigation: function updateNavigation() {
	    var swiper = this;
	
	    if (swiper.params.loop) { return; }
	    var ref = swiper.navigation;
	    var $nextEl = ref.$nextEl;
	    var $prevEl = ref.$prevEl;
	
	    if ($prevEl && $prevEl.length > 0) {
	      if (swiper.isBeginning) {
	        swiper.a11y.disableEl($prevEl);
	      } else {
	        swiper.a11y.enableEl($prevEl);
	      }
	    }
	    if ($nextEl && $nextEl.length > 0) {
	      if (swiper.isEnd) {
	        swiper.a11y.disableEl($nextEl);
	      } else {
	        swiper.a11y.enableEl($nextEl);
	      }
	    }
	  },
	  updatePagination: function updatePagination() {
	    var swiper = this;
	    var params = swiper.params.a11y;
	    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
	      swiper.pagination.bullets.each(function (bulletIndex, bulletEl) {
	        var $bulletEl = $(bulletEl);
	        swiper.a11y.makeElFocusable($bulletEl);
	        swiper.a11y.addElRole($bulletEl, 'button');
	        swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/{{index}}/, $bulletEl.index() + 1));
	      });
	    }
	  },
	  init: function init() {
	    var swiper = this;
	
	    swiper.$el.append(swiper.a11y.liveRegion);
	
	    // Navigation
	    var params = swiper.params.a11y;
	    var $nextEl;
	    var $prevEl;
	    if (swiper.navigation && swiper.navigation.$nextEl) {
	      $nextEl = swiper.navigation.$nextEl;
	    }
	    if (swiper.navigation && swiper.navigation.$prevEl) {
	      $prevEl = swiper.navigation.$prevEl;
	    }
	    if ($nextEl) {
	      swiper.a11y.makeElFocusable($nextEl);
	      swiper.a11y.addElRole($nextEl, 'button');
	      swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);
	      $nextEl.on('keydown', swiper.a11y.onEnterKey);
	    }
	    if ($prevEl) {
	      swiper.a11y.makeElFocusable($prevEl);
	      swiper.a11y.addElRole($prevEl, 'button');
	      swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);
	      $prevEl.on('keydown', swiper.a11y.onEnterKey);
	    }
	
	    // Pagination
	    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
	      swiper.pagination.$el.on('keydown', ("." + (swiper.params.pagination.bulletClass)), swiper.a11y.onEnterKey);
	    }
	  },
	  destroy: function destroy() {
	    var swiper = this;
	    if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) { swiper.a11y.liveRegion.remove(); }
	
	    var $nextEl;
	    var $prevEl;
	    if (swiper.navigation && swiper.navigation.$nextEl) {
	      $nextEl = swiper.navigation.$nextEl;
	    }
	    if (swiper.navigation && swiper.navigation.$prevEl) {
	      $prevEl = swiper.navigation.$prevEl;
	    }
	    if ($nextEl) {
	      $nextEl.off('keydown', swiper.a11y.onEnterKey);
	    }
	    if ($prevEl) {
	      $prevEl.off('keydown', swiper.a11y.onEnterKey);
	    }
	
	    // Pagination
	    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
	      swiper.pagination.$el.off('keydown', ("." + (swiper.params.pagination.bulletClass)), swiper.a11y.onEnterKey);
	    }
	  },
	};
	var A11y = {
	  name: 'a11y',
	  params: {
	    a11y: {
	      enabled: true,
	      notificationClass: 'swiper-notification',
	      prevSlideMessage: 'Previous slide',
	      nextSlideMessage: 'Next slide',
	      firstSlideMessage: 'This is the first slide',
	      lastSlideMessage: 'This is the last slide',
	      paginationBulletMessage: 'Go to slide {{index}}',
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      a11y: {
	        liveRegion: $(("<span class=\"" + (swiper.params.a11y.notificationClass) + "\" aria-live=\"assertive\" aria-atomic=\"true\"></span>")),
	      },
	    });
	    Object.keys(a11y).forEach(function (methodName) {
	      swiper.a11y[methodName] = a11y[methodName].bind(swiper);
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      if (!swiper.params.a11y.enabled) { return; }
	      swiper.a11y.init();
	      swiper.a11y.updateNavigation();
	    },
	    toEdge: function toEdge() {
	      var swiper = this;
	      if (!swiper.params.a11y.enabled) { return; }
	      swiper.a11y.updateNavigation();
	    },
	    fromEdge: function fromEdge() {
	      var swiper = this;
	      if (!swiper.params.a11y.enabled) { return; }
	      swiper.a11y.updateNavigation();
	    },
	    paginationUpdate: function paginationUpdate() {
	      var swiper = this;
	      if (!swiper.params.a11y.enabled) { return; }
	      swiper.a11y.updatePagination();
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      if (!swiper.params.a11y.enabled) { return; }
	      swiper.a11y.destroy();
	    },
	  },
	};
	
	var History = {
	  init: function init() {
	    var swiper = this;
	    if (!swiper.params.history) { return; }
	    if (!win.history || !win.history.pushState) {
	      swiper.params.history.enabled = false;
	      swiper.params.hashNavigation.enabled = true;
	      return;
	    }
	    var history = swiper.history;
	    history.initialized = true;
	    history.paths = History.getPathValues();
	    if (!history.paths.key && !history.paths.value) { return; }
	    history.scrollToSlide(0, history.paths.value, swiper.params.runCallbacksOnInit);
	    if (!swiper.params.history.replaceState) {
	      win.addEventListener('popstate', swiper.history.setHistoryPopState);
	    }
	  },
	  destroy: function destroy() {
	    var swiper = this;
	    if (!swiper.params.history.replaceState) {
	      win.removeEventListener('popstate', swiper.history.setHistoryPopState);
	    }
	  },
	  setHistoryPopState: function setHistoryPopState() {
	    var swiper = this;
	    swiper.history.paths = History.getPathValues();
	    swiper.history.scrollToSlide(swiper.params.speed, swiper.history.paths.value, false);
	  },
	  getPathValues: function getPathValues() {
	    var pathArray = win.location.pathname.slice(1).split('/').filter(function (part) { return part !== ''; });
	    var total = pathArray.length;
	    var key = pathArray[total - 2];
	    var value = pathArray[total - 1];
	    return { key: key, value: value };
	  },
	  setHistory: function setHistory(key, index) {
	    var swiper = this;
	    if (!swiper.history.initialized || !swiper.params.history.enabled) { return; }
	    var slide = swiper.slides.eq(index);
	    var value = History.slugify(slide.attr('data-history'));
	    if (!win.location.pathname.includes(key)) {
	      value = key + "/" + value;
	    }
	    var currentState = win.history.state;
	    if (currentState && currentState.value === value) {
	      return;
	    }
	    if (swiper.params.history.replaceState) {
	      win.history.replaceState({ value: value }, null, value);
	    } else {
	      win.history.pushState({ value: value }, null, value);
	    }
	  },
	  slugify: function slugify(text) {
	    return text.toString().toLowerCase()
	      .replace(/\s+/g, '-')
	      .replace(/[^\w-]+/g, '')
	      .replace(/--+/g, '-')
	      .replace(/^-+/, '')
	      .replace(/-+$/, '');
	  },
	  scrollToSlide: function scrollToSlide(speed, value, runCallbacks) {
	    var swiper = this;
	    if (value) {
	      for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
	        var slide = swiper.slides.eq(i);
	        var slideHistory = History.slugify(slide.attr('data-history'));
	        if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {
	          var index = slide.index();
	          swiper.slideTo(index, speed, runCallbacks);
	        }
	      }
	    } else {
	      swiper.slideTo(0, speed, runCallbacks);
	    }
	  },
	};
	
	var History$1 = {
	  name: 'history',
	  params: {
	    history: {
	      enabled: false,
	      replaceState: false,
	      key: 'slides',
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      history: {
	        init: History.init.bind(swiper),
	        setHistory: History.setHistory.bind(swiper),
	        setHistoryPopState: History.setHistoryPopState.bind(swiper),
	        scrollToSlide: History.scrollToSlide.bind(swiper),
	        destroy: History.destroy.bind(swiper),
	      },
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      if (swiper.params.history.enabled) {
	        swiper.history.init();
	      }
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      if (swiper.params.history.enabled) {
	        swiper.history.destroy();
	      }
	    },
	    transitionEnd: function transitionEnd() {
	      var swiper = this;
	      if (swiper.history.initialized) {
	        swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
	      }
	    },
	  },
	};
	
	var HashNavigation = {
	  onHashCange: function onHashCange() {
	    var swiper = this;
	    var newHash = doc.location.hash.replace('#', '');
	    var activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');
	    if (newHash !== activeSlideHash) {
	      swiper.slideTo(swiper.$wrapperEl.children(("." + (swiper.params.slideClass) + "[data-hash=\"" + newHash + "\"]")).index());
	    }
	  },
	  setHash: function setHash() {
	    var swiper = this;
	    if (!swiper.hashNavigation.initialized || !swiper.params.hashNavigation.enabled) { return; }
	    if (swiper.params.hashNavigation.replaceState && win.history && win.history.replaceState) {
	      win.history.replaceState(null, null, (("#" + (swiper.slides.eq(swiper.activeIndex).attr('data-hash'))) || ''));
	    } else {
	      var slide = swiper.slides.eq(swiper.activeIndex);
	      var hash = slide.attr('data-hash') || slide.attr('data-history');
	      doc.location.hash = hash || '';
	    }
	  },
	  init: function init() {
	    var swiper = this;
	    if (!swiper.params.hashNavigation.enabled || (swiper.params.history && swiper.params.history.enabled)) { return; }
	    swiper.hashNavigation.initialized = true;
	    var hash = doc.location.hash.replace('#', '');
	    if (hash) {
	      var speed = 0;
	      for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
	        var slide = swiper.slides.eq(i);
	        var slideHash = slide.attr('data-hash') || slide.attr('data-history');
	        if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {
	          var index = slide.index();
	          swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);
	        }
	      }
	    }
	    if (swiper.params.hashNavigation.watchState) {
	      $(win).on('hashchange', swiper.hashNavigation.onHashCange);
	    }
	  },
	  destroy: function destroy() {
	    var swiper = this;
	    if (swiper.params.hashNavigation.watchState) {
	      $(win).off('hashchange', swiper.hashNavigation.onHashCange);
	    }
	  },
	};
	var HashNavigation$1 = {
	  name: 'hash-navigation',
	  params: {
	    hashNavigation: {
	      enabled: false,
	      replaceState: false,
	      watchState: false,
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      hashNavigation: {
	        initialized: false,
	        init: HashNavigation.init.bind(swiper),
	        destroy: HashNavigation.destroy.bind(swiper),
	        setHash: HashNavigation.setHash.bind(swiper),
	        onHashCange: HashNavigation.onHashCange.bind(swiper),
	      },
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      if (swiper.params.hashNavigation.enabled) {
	        swiper.hashNavigation.init();
	      }
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      if (swiper.params.hashNavigation.enabled) {
	        swiper.hashNavigation.destroy();
	      }
	    },
	    transitionEnd: function transitionEnd() {
	      var swiper = this;
	      if (swiper.hashNavigation.initialized) {
	        swiper.hashNavigation.setHash();
	      }
	    },
	  },
	};
	
	var Autoplay = {
	  run: function run() {
	    var swiper = this;
	    var $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
	    var delay = swiper.params.autoplay.delay;
	    if ($activeSlideEl.attr('data-swiper-autoplay')) {
	      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
	    }
	    swiper.autoplay.timeout = Utils.nextTick(function () {
	      if (swiper.params.autoplay.reverseDirection) {
	        if (swiper.params.loop) {
	          swiper.loopFix();
	          swiper.slidePrev(swiper.params.speed, true, true);
	          swiper.emit('autoplay');
	        } else if (!swiper.isBeginning) {
	          swiper.slidePrev(swiper.params.speed, true, true);
	          swiper.emit('autoplay');
	        } else if (!swiper.params.autoplay.stopOnLastSlide) {
	          swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
	          swiper.emit('autoplay');
	        } else {
	          swiper.autoplay.stop();
	        }
	      } else if (swiper.params.loop) {
	        swiper.loopFix();
	        swiper.slideNext(swiper.params.speed, true, true);
	        swiper.emit('autoplay');
	      } else if (!swiper.isEnd) {
	        swiper.slideNext(swiper.params.speed, true, true);
	        swiper.emit('autoplay');
	      } else if (!swiper.params.autoplay.stopOnLastSlide) {
	        swiper.slideTo(0, swiper.params.speed, true, true);
	        swiper.emit('autoplay');
	      } else {
	        swiper.autoplay.stop();
	      }
	    }, delay);
	  },
	  start: function start() {
	    var swiper = this;
	    if (typeof swiper.autoplay.timeout !== 'undefined') { return false; }
	    if (swiper.autoplay.running) { return false; }
	    swiper.autoplay.running = true;
	    swiper.emit('autoplayStart');
	    swiper.autoplay.run();
	    return true;
	  },
	  stop: function stop() {
	    var swiper = this;
	    if (!swiper.autoplay.running) { return false; }
	    if (typeof swiper.autoplay.timeout === 'undefined') { return false; }
	
	    if (swiper.autoplay.timeout) {
	      clearTimeout(swiper.autoplay.timeout);
	      swiper.autoplay.timeout = undefined;
	    }
	    swiper.autoplay.running = false;
	    swiper.emit('autoplayStop');
	    return true;
	  },
	  pause: function pause(speed) {
	    var swiper = this;
	    if (!swiper.autoplay.running) { return; }
	    if (swiper.autoplay.paused) { return; }
	    if (swiper.autoplay.timeout) { clearTimeout(swiper.autoplay.timeout); }
	    swiper.autoplay.paused = true;
	    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
	      swiper.autoplay.paused = false;
	      swiper.autoplay.run();
	    } else {
	      swiper.$wrapperEl.transitionEnd(function () {
	        if (!swiper || swiper.destroyed) { return; }
	        swiper.autoplay.paused = false;
	        if (!swiper.autoplay.running) {
	          swiper.autoplay.stop();
	        } else {
	          swiper.autoplay.run();
	        }
	      });
	    }
	  },
	};
	
	var Autoplay$1 = {
	  name: 'autoplay',
	  params: {
	    autoplay: {
	      enabled: false,
	      delay: 3000,
	      waitForTransition: true,
	      disableOnInteraction: true,
	      stopOnLastSlide: false,
	      reverseDirection: false,
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      autoplay: {
	        running: false,
	        paused: false,
	        run: Autoplay.run.bind(swiper),
	        start: Autoplay.start.bind(swiper),
	        stop: Autoplay.stop.bind(swiper),
	        pause: Autoplay.pause.bind(swiper),
	      },
	    });
	  },
	  on: {
	    init: function init() {
	      var swiper = this;
	      if (swiper.params.autoplay.enabled) {
	        swiper.autoplay.start();
	      }
	    },
	    beforeTransitionStart: function beforeTransitionStart(speed, internal) {
	      var swiper = this;
	      if (swiper.autoplay.running) {
	        if (internal || !swiper.params.autoplay.disableOnInteraction) {
	          swiper.autoplay.pause(speed);
	        } else {
	          swiper.autoplay.stop();
	        }
	      }
	    },
	    sliderFirstMove: function sliderFirstMove() {
	      var swiper = this;
	      if (swiper.autoplay.running) {
	        if (swiper.params.autoplay.disableOnInteraction) {
	          swiper.autoplay.stop();
	        } else {
	          swiper.autoplay.pause();
	        }
	      }
	    },
	    destroy: function destroy() {
	      var swiper = this;
	      if (swiper.autoplay.running) {
	        swiper.autoplay.stop();
	      }
	    },
	  },
	};
	
	var Fade = {
	  setTranslate: function setTranslate() {
	    var swiper = this;
	    var slides = swiper.slides;
	    for (var i = 0; i < slides.length; i += 1) {
	      var $slideEl = swiper.slides.eq(i);
	      var offset = $slideEl[0].swiperSlideOffset;
	      var tx = -offset;
	      if (!swiper.params.virtualTranslate) { tx -= swiper.translate; }
	      var ty = 0;
	      if (!swiper.isHorizontal()) {
	        ty = tx;
	        tx = 0;
	      }
	      var slideOpacity = swiper.params.fadeEffect.crossFade ?
	        Math.max(1 - Math.abs($slideEl[0].progress), 0) :
	        1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
	      $slideEl
	        .css({
	          opacity: slideOpacity,
	        })
	        .transform(("translate3d(" + tx + "px, " + ty + "px, 0px)"));
	    }
	  },
	  setTransition: function setTransition(duration) {
	    var swiper = this;
	    var slides = swiper.slides;
	    var $wrapperEl = swiper.$wrapperEl;
	    slides.transition(duration);
	    if (swiper.params.virtualTranslate && duration !== 0) {
	      var eventTriggered = false;
	      slides.transitionEnd(function () {
	        if (eventTriggered) { return; }
	        if (!swiper || swiper.destroyed) { return; }
	        eventTriggered = true;
	        swiper.animating = false;
	        var triggerEvents = ['webkitTransitionEnd', 'transitionend'];
	        for (var i = 0; i < triggerEvents.length; i += 1) {
	          $wrapperEl.trigger(triggerEvents[i]);
	        }
	      });
	    }
	  },
	};
	
	var EffectFade = {
	  name: 'effect-fade',
	  params: {
	    fadeEffect: {
	      crossFade: false,
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      fadeEffect: {
	        setTranslate: Fade.setTranslate.bind(swiper),
	        setTransition: Fade.setTransition.bind(swiper),
	      },
	    });
	  },
	  on: {
	    beforeInit: function beforeInit() {
	      var swiper = this;
	      if (swiper.params.effect !== 'fade') { return; }
	      swiper.classNames.push(((swiper.params.containerModifierClass) + "fade"));
	      var overwriteParams = {
	        slidesPerView: 1,
	        slidesPerColumn: 1,
	        slidesPerGroup: 1,
	        watchSlidesProgress: true,
	        spaceBetween: 0,
	        virtualTranslate: true,
	      };
	      Utils.extend(swiper.params, overwriteParams);
	      Utils.extend(swiper.originalParams, overwriteParams);
	    },
	    setTranslate: function setTranslate() {
	      var swiper = this;
	      if (swiper.params.effect !== 'fade') { return; }
	      swiper.fadeEffect.setTranslate();
	    },
	    setTransition: function setTransition(duration) {
	      var swiper = this;
	      if (swiper.params.effect !== 'fade') { return; }
	      swiper.fadeEffect.setTransition(duration);
	    },
	  },
	};
	
	var Cube = {
	  setTranslate: function setTranslate() {
	    var swiper = this;
	    var $el = swiper.$el;
	    var $wrapperEl = swiper.$wrapperEl;
	    var slides = swiper.slides;
	    var swiperWidth = swiper.width;
	    var swiperHeight = swiper.height;
	    var rtl = swiper.rtlTranslate;
	    var swiperSize = swiper.size;
	    var params = swiper.params.cubeEffect;
	    var isHorizontal = swiper.isHorizontal();
	    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
	    var wrapperRotate = 0;
	    var $cubeShadowEl;
	    if (params.shadow) {
	      if (isHorizontal) {
	        $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');
	        if ($cubeShadowEl.length === 0) {
	          $cubeShadowEl = $('<div class="swiper-cube-shadow"></div>');
	          $wrapperEl.append($cubeShadowEl);
	        }
	        $cubeShadowEl.css({ height: (swiperWidth + "px") });
	      } else {
	        $cubeShadowEl = $el.find('.swiper-cube-shadow');
	        if ($cubeShadowEl.length === 0) {
	          $cubeShadowEl = $('<div class="swiper-cube-shadow"></div>');
	          $el.append($cubeShadowEl);
	        }
	      }
	    }
	    for (var i = 0; i < slides.length; i += 1) {
	      var $slideEl = slides.eq(i);
	      var slideIndex = i;
	      if (isVirtual) {
	        slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);
	      }
	      var slideAngle = slideIndex * 90;
	      var round = Math.floor(slideAngle / 360);
	      if (rtl) {
	        slideAngle = -slideAngle;
	        round = Math.floor(-slideAngle / 360);
	      }
	      var progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
	      var tx = 0;
	      var ty = 0;
	      var tz = 0;
	      if (slideIndex % 4 === 0) {
	        tx = -round * 4 * swiperSize;
	        tz = 0;
	      } else if ((slideIndex - 1) % 4 === 0) {
	        tx = 0;
	        tz = -round * 4 * swiperSize;
	      } else if ((slideIndex - 2) % 4 === 0) {
	        tx = swiperSize + (round * 4 * swiperSize);
	        tz = swiperSize;
	      } else if ((slideIndex - 3) % 4 === 0) {
	        tx = -swiperSize;
	        tz = (3 * swiperSize) + (swiperSize * 4 * round);
	      }
	      if (rtl) {
	        tx = -tx;
	      }
	
	      if (!isHorizontal) {
	        ty = tx;
	        tx = 0;
	      }
	
	      var transform = "rotateX(" + (isHorizontal ? 0 : -slideAngle) + "deg) rotateY(" + (isHorizontal ? slideAngle : 0) + "deg) translate3d(" + tx + "px, " + ty + "px, " + tz + "px)";
	      if (progress <= 1 && progress > -1) {
	        wrapperRotate = (slideIndex * 90) + (progress * 90);
	        if (rtl) { wrapperRotate = (-slideIndex * 90) - (progress * 90); }
	      }
	      $slideEl.transform(transform);
	      if (params.slideShadows) {
	        // Set shadows
	        var shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
	        var shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
	        if (shadowBefore.length === 0) {
	          shadowBefore = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>"));
	          $slideEl.append(shadowBefore);
	        }
	        if (shadowAfter.length === 0) {
	          shadowAfter = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>"));
	          $slideEl.append(shadowAfter);
	        }
	        if (shadowBefore.length) { shadowBefore[0].style.opacity = Math.max(-progress, 0); }
	        if (shadowAfter.length) { shadowAfter[0].style.opacity = Math.max(progress, 0); }
	      }
	    }
	    $wrapperEl.css({
	      '-webkit-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
	      '-moz-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
	      '-ms-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
	      'transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
	    });
	
	    if (params.shadow) {
	      if (isHorizontal) {
	        $cubeShadowEl.transform(("translate3d(0px, " + ((swiperWidth / 2) + params.shadowOffset) + "px, " + (-swiperWidth / 2) + "px) rotateX(90deg) rotateZ(0deg) scale(" + (params.shadowScale) + ")"));
	      } else {
	        var shadowAngle = Math.abs(wrapperRotate) - (Math.floor(Math.abs(wrapperRotate) / 90) * 90);
	        var multiplier = 1.5 - (
	          (Math.sin((shadowAngle * 2 * Math.PI) / 360) / 2) +
	          (Math.cos((shadowAngle * 2 * Math.PI) / 360) / 2)
	        );
	        var scale1 = params.shadowScale;
	        var scale2 = params.shadowScale / multiplier;
	        var offset = params.shadowOffset;
	        $cubeShadowEl.transform(("scale3d(" + scale1 + ", 1, " + scale2 + ") translate3d(0px, " + ((swiperHeight / 2) + offset) + "px, " + (-swiperHeight / 2 / scale2) + "px) rotateX(-90deg)"));
	      }
	    }
	    var zFactor = (Browser.isSafari || Browser.isUiWebView) ? (-swiperSize / 2) : 0;
	    $wrapperEl
	      .transform(("translate3d(0px,0," + zFactor + "px) rotateX(" + (swiper.isHorizontal() ? 0 : wrapperRotate) + "deg) rotateY(" + (swiper.isHorizontal() ? -wrapperRotate : 0) + "deg)"));
	  },
	  setTransition: function setTransition(duration) {
	    var swiper = this;
	    var $el = swiper.$el;
	    var slides = swiper.slides;
	    slides
	      .transition(duration)
	      .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
	      .transition(duration);
	    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
	      $el.find('.swiper-cube-shadow').transition(duration);
	    }
	  },
	};
	
	var EffectCube = {
	  name: 'effect-cube',
	  params: {
	    cubeEffect: {
	      slideShadows: true,
	      shadow: true,
	      shadowOffset: 20,
	      shadowScale: 0.94,
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      cubeEffect: {
	        setTranslate: Cube.setTranslate.bind(swiper),
	        setTransition: Cube.setTransition.bind(swiper),
	      },
	    });
	  },
	  on: {
	    beforeInit: function beforeInit() {
	      var swiper = this;
	      if (swiper.params.effect !== 'cube') { return; }
	      swiper.classNames.push(((swiper.params.containerModifierClass) + "cube"));
	      swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));
	      var overwriteParams = {
	        slidesPerView: 1,
	        slidesPerColumn: 1,
	        slidesPerGroup: 1,
	        watchSlidesProgress: true,
	        resistanceRatio: 0,
	        spaceBetween: 0,
	        centeredSlides: false,
	        virtualTranslate: true,
	      };
	      Utils.extend(swiper.params, overwriteParams);
	      Utils.extend(swiper.originalParams, overwriteParams);
	    },
	    setTranslate: function setTranslate() {
	      var swiper = this;
	      if (swiper.params.effect !== 'cube') { return; }
	      swiper.cubeEffect.setTranslate();
	    },
	    setTransition: function setTransition(duration) {
	      var swiper = this;
	      if (swiper.params.effect !== 'cube') { return; }
	      swiper.cubeEffect.setTransition(duration);
	    },
	  },
	};
	
	var Flip = {
	  setTranslate: function setTranslate() {
	    var swiper = this;
	    var slides = swiper.slides;
	    var rtl = swiper.rtlTranslate;
	    for (var i = 0; i < slides.length; i += 1) {
	      var $slideEl = slides.eq(i);
	      var progress = $slideEl[0].progress;
	      if (swiper.params.flipEffect.limitRotation) {
	        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
	      }
	      var offset = $slideEl[0].swiperSlideOffset;
	      var rotate = -180 * progress;
	      var rotateY = rotate;
	      var rotateX = 0;
	      var tx = -offset;
	      var ty = 0;
	      if (!swiper.isHorizontal()) {
	        ty = tx;
	        tx = 0;
	        rotateX = -rotateY;
	        rotateY = 0;
	      } else if (rtl) {
	        rotateY = -rotateY;
	      }
	
	      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;
	
	      if (swiper.params.flipEffect.slideShadows) {
	        // Set shadows
	        var shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
	        var shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
	        if (shadowBefore.length === 0) {
	          shadowBefore = $(("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'left' : 'top') + "\"></div>"));
	          $slideEl.append(shadowBefore);
	        }
	        if (shadowAfter.length === 0) {
	          shadowAfter = $(("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'right' : 'bottom') + "\"></div>"));
	          $slideEl.append(shadowAfter);
	        }
	        if (shadowBefore.length) { shadowBefore[0].style.opacity = Math.max(-progress, 0); }
	        if (shadowAfter.length) { shadowAfter[0].style.opacity = Math.max(progress, 0); }
	      }
	      $slideEl
	        .transform(("translate3d(" + tx + "px, " + ty + "px, 0px) rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)"));
	    }
	  },
	  setTransition: function setTransition(duration) {
	    var swiper = this;
	    var slides = swiper.slides;
	    var activeIndex = swiper.activeIndex;
	    var $wrapperEl = swiper.$wrapperEl;
	    slides
	      .transition(duration)
	      .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
	      .transition(duration);
	    if (swiper.params.virtualTranslate && duration !== 0) {
	      var eventTriggered = false;
	      // eslint-disable-next-line
	      slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {
	        if (eventTriggered) { return; }
	        if (!swiper || swiper.destroyed) { return; }
	        // if (!$(this).hasClass(swiper.params.slideActiveClass)) return;
	        eventTriggered = true;
	        swiper.animating = false;
	        var triggerEvents = ['webkitTransitionEnd', 'transitionend'];
	        for (var i = 0; i < triggerEvents.length; i += 1) {
	          $wrapperEl.trigger(triggerEvents[i]);
	        }
	      });
	    }
	  },
	};
	
	var EffectFlip = {
	  name: 'effect-flip',
	  params: {
	    flipEffect: {
	      slideShadows: true,
	      limitRotation: true,
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      flipEffect: {
	        setTranslate: Flip.setTranslate.bind(swiper),
	        setTransition: Flip.setTransition.bind(swiper),
	      },
	    });
	  },
	  on: {
	    beforeInit: function beforeInit() {
	      var swiper = this;
	      if (swiper.params.effect !== 'flip') { return; }
	      swiper.classNames.push(((swiper.params.containerModifierClass) + "flip"));
	      swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));
	      var overwriteParams = {
	        slidesPerView: 1,
	        slidesPerColumn: 1,
	        slidesPerGroup: 1,
	        watchSlidesProgress: true,
	        spaceBetween: 0,
	        virtualTranslate: true,
	      };
	      Utils.extend(swiper.params, overwriteParams);
	      Utils.extend(swiper.originalParams, overwriteParams);
	    },
	    setTranslate: function setTranslate() {
	      var swiper = this;
	      if (swiper.params.effect !== 'flip') { return; }
	      swiper.flipEffect.setTranslate();
	    },
	    setTransition: function setTransition(duration) {
	      var swiper = this;
	      if (swiper.params.effect !== 'flip') { return; }
	      swiper.flipEffect.setTransition(duration);
	    },
	  },
	};
	
	var Coverflow = {
	  setTranslate: function setTranslate() {
	    var swiper = this;
	    var swiperWidth = swiper.width;
	    var swiperHeight = swiper.height;
	    var slides = swiper.slides;
	    var $wrapperEl = swiper.$wrapperEl;
	    var slidesSizesGrid = swiper.slidesSizesGrid;
	    var params = swiper.params.coverflowEffect;
	    var isHorizontal = swiper.isHorizontal();
	    var transform = swiper.translate;
	    var center = isHorizontal ? -transform + (swiperWidth / 2) : -transform + (swiperHeight / 2);
	    var rotate = isHorizontal ? params.rotate : -params.rotate;
	    var translate = params.depth;
	    // Each slide offset from center
	    for (var i = 0, length = slides.length; i < length; i += 1) {
	      var $slideEl = slides.eq(i);
	      var slideSize = slidesSizesGrid[i];
	      var slideOffset = $slideEl[0].swiperSlideOffset;
	      var offsetMultiplier = ((center - slideOffset - (slideSize / 2)) / slideSize) * params.modifier;
	
	      var rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
	      var rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;
	      // var rotateZ = 0
	      var translateZ = -translate * Math.abs(offsetMultiplier);
	
	      var translateY = isHorizontal ? 0 : params.stretch * (offsetMultiplier);
	      var translateX = isHorizontal ? params.stretch * (offsetMultiplier) : 0;
	
	      // Fix for ultra small values
	      if (Math.abs(translateX) < 0.001) { translateX = 0; }
	      if (Math.abs(translateY) < 0.001) { translateY = 0; }
	      if (Math.abs(translateZ) < 0.001) { translateZ = 0; }
	      if (Math.abs(rotateY) < 0.001) { rotateY = 0; }
	      if (Math.abs(rotateX) < 0.001) { rotateX = 0; }
	
	      var slideTransform = "translate3d(" + translateX + "px," + translateY + "px," + translateZ + "px)  rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)";
	
	      $slideEl.transform(slideTransform);
	      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;
	      if (params.slideShadows) {
	        // Set shadows
	        var $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
	        var $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
	        if ($shadowBeforeEl.length === 0) {
	          $shadowBeforeEl = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>"));
	          $slideEl.append($shadowBeforeEl);
	        }
	        if ($shadowAfterEl.length === 0) {
	          $shadowAfterEl = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>"));
	          $slideEl.append($shadowAfterEl);
	        }
	        if ($shadowBeforeEl.length) { $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0; }
	        if ($shadowAfterEl.length) { $shadowAfterEl[0].style.opacity = (-offsetMultiplier) > 0 ? -offsetMultiplier : 0; }
	      }
	    }
	
	    // Set correct perspective for IE10
	    if (Support.pointerEvents || Support.prefixedPointerEvents) {
	      var ws = $wrapperEl[0].style;
	      ws.perspectiveOrigin = center + "px 50%";
	    }
	  },
	  setTransition: function setTransition(duration) {
	    var swiper = this;
	    swiper.slides
	      .transition(duration)
	      .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
	      .transition(duration);
	  },
	};
	
	var EffectCoverflow = {
	  name: 'effect-coverflow',
	  params: {
	    coverflowEffect: {
	      rotate: 50,
	      stretch: 0,
	      depth: 100,
	      modifier: 1,
	      slideShadows: true,
	    },
	  },
	  create: function create() {
	    var swiper = this;
	    Utils.extend(swiper, {
	      coverflowEffect: {
	        setTranslate: Coverflow.setTranslate.bind(swiper),
	        setTransition: Coverflow.setTransition.bind(swiper),
	      },
	    });
	  },
	  on: {
	    beforeInit: function beforeInit() {
	      var swiper = this;
	      if (swiper.params.effect !== 'coverflow') { return; }
	
	      swiper.classNames.push(((swiper.params.containerModifierClass) + "coverflow"));
	      swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));
	
	      swiper.params.watchSlidesProgress = true;
	      swiper.originalParams.watchSlidesProgress = true;
	    },
	    setTranslate: function setTranslate() {
	      var swiper = this;
	      if (swiper.params.effect !== 'coverflow') { return; }
	      swiper.coverflowEffect.setTranslate();
	    },
	    setTransition: function setTransition(duration) {
	      var swiper = this;
	      if (swiper.params.effect !== 'coverflow') { return; }
	      swiper.coverflowEffect.setTransition(duration);
	    },
	  },
	};
	
	// Swiper Class
	
	var components = [
	  Device$1,
	  Support$1,
	  Browser$1,
	  Resize,
	  Observer$1,
	  Virtual$1,
	  Keyboard$1,
	  Mousewheel$1,
	  Navigation$1,
	  Pagination$1,
	  Scrollbar$1,
	  Parallax$1,
	  Zoom$1,
	  Lazy$1,
	  Controller$1,
	  A11y,
	  History$1,
	  HashNavigation$1,
	  Autoplay$1,
	  EffectFade,
	  EffectCube,
	  EffectFlip,
	  EffectCoverflow
	];
	
	if (typeof Swiper.use === 'undefined') {
	  Swiper.use = Swiper.Class.use;
	  Swiper.installModule = Swiper.Class.installModule;
	}
	
	Swiper.use(components);
	
	return Swiper;
	
	})));


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends2 = __webpack_require__(8);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _swiper = __webpack_require__(51);
	
	var _swiper2 = _interopRequireDefault(_swiper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SliderGallery = function () {
		function SliderGallery() {
			(0, _classCallCheck3.default)(this, SliderGallery);
	
			this.selector = '.slider-gallery';
			this.pagination = {
				el: this.selector + '__pagination',
				type: 'fraction'
			};
			this.navigation = {
				nextEl: this.selector + '__button_next',
				prevEl: this.selector + '__button_prev'
			};
			this.windwoWidth = (0, _jquery2.default)(window).width();
		}
	
		(0, _createClass3.default)(SliderGallery, [{
			key: 'init',
			value: function init() {
				var selector = this.selector,
				    pagination = this.pagination,
				    navigation = this.navigation;
	
	
				var settings = {
					slidesPerView: 1,
					spaceBetween: 0,
					pagination: pagination,
					navigation: navigation
				};
	
				var mobileSettings = {
					freeMode: true,
					spaceBetween: 16,
					slidesPerView: 'auto',
					pagination: pagination,
					navigation: navigation,
					loop: true
				};
	
				return new _swiper2.default(selector, {
					breakpoints: {
						// mobile
						767: mobileSettings,
						// tablet
						1239: settings,
						// desktop
						9999: (0, _extends3.default)({}, settings, {
							noSwiping: true,
							noSwipingClass: 'no-swiping'
						})
					}
				});
			}
		}, {
			key: 'makeSlider',
			value: function makeSlider() {
				var _this = this;
	
				if ((0, _jquery2.default)(this.selector).length) {
					var gallerySlider = this.init();
	
					window.addEventListener('resize', function () {
						if (_this.windwoWidth === (0, _jquery2.default)(window).width()) {
							return;
						} // handle mobile browsers viewport changes
	
						if (!gallerySlider.destroyed) {
							if (Array.isArray(gallerySlider)) {
								gallerySlider.forEach(function (instance) {
									instance.destroy();
								});
							} else {
								gallerySlider.destroy();
							}
						}
	
						_this.windwoWidth = (0, _jquery2.default)(window).width();
						gallerySlider = _this.init();
					});
				}
			}
		}]);
		return SliderGallery;
	}();
	
	exports.default = SliderGallery;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends2 = __webpack_require__(8);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _swiper = __webpack_require__(51);
	
	var _swiper2 = _interopRequireDefault(_swiper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var imageScale = 0.68;
	
	var SliderAccordion = function () {
		function SliderAccordion(options) {
			var _this = this;
	
			(0, _classCallCheck3.default)(this, SliderAccordion);
	
			this.setMobileImageSize = function () {
				var width = (0, _jquery2.default)(window).width();
	
				_this.$images.each(function () {
					var $image = (0, _jquery2.default)(this);
					if (width <= 767) {
						$image.css({
							width: $image.data('mobile-width'),
							height: $image.data('mobile-height')
						});
					} else {
						$image.css({
							width: $image.attr('width'),
							height: $image.attr('height')
						});
					}
				});
			};
	
			this.selector = options.selector;
			this.responsiveImages = options.responsiveImages;
			this.$section = (0, _jquery2.default)(this.selector);
			if (this.responsiveImages) {
				this.$images = this.$section.find(this.selector + '__img');
				this.$images.each(function () {
					var $image = (0, _jquery2.default)(this);
					// сохраняем вычисленный размер изображений на мобильных
					$image.data('mobile-width', $image.attr('width') * imageScale);
					$image.data('mobile-height', $image.attr('height') * imageScale);
				});
			}
			this.windwoWidth = (0, _jquery2.default)(window).width();
		}
	
		(0, _createClass3.default)(SliderAccordion, [{
			key: 'init',
			value: function init() {
				var selector = this.selector,
				    responsiveImages = this.responsiveImages;
	
	
				var settings = {
					slidesOffsetBefore: 0,
					slidesPerView: 1,
					spaceBetween: 0,
					navigation: {
						nextEl: this.selector + '__button-controls_next',
						prevEl: this.selector + '__button-controls_prev'
					}
				};
	
				if (responsiveImages) {
					this.setMobileImageSize();
				}
	
				return new _swiper2.default(selector + '__slider', {
					breakpoints: {
						// tablet
						1239: settings,
						// desktop
						9999: (0, _extends3.default)({}, settings, {
							noSwiping: true,
							noSwipingClass: 'no-swiping'
						})
					}
				});
			}
		}, {
			key: 'makeSlider',
			value: function makeSlider() {
				var _this2 = this;
	
				if ((0, _jquery2.default)(this.selector).length) {
					var sliderAccordion = this.init();
	
					window.addEventListener('resize', function () {
						if (_this2.windwoWidth === (0, _jquery2.default)(window).width()) {
							return;
						} // handle mobile browsers viewport changes
	
						if (!sliderAccordion.destroyed) {
							if (Array.isArray(sliderAccordion)) {
								sliderAccordion.forEach(function (instance) {
									instance.destroy();
								});
							} else {
								sliderAccordion.destroy();
							}
						}
	
						_this2.windwoWidth = (0, _jquery2.default)(window).width();
						sliderAccordion = _this2.init();
					});
				}
			}
		}]);
		return SliderAccordion;
	}();
	
	exports.default = SliderAccordion;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends2 = __webpack_require__(8);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _swiper = __webpack_require__(51);
	
	var _swiper2 = _interopRequireDefault(_swiper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var NewsSlider = function () {
		function NewsSlider() {
			(0, _classCallCheck3.default)(this, NewsSlider);
	
			this.elSelector = '.news-slider';
			this.nextSelector = this.elSelector + '__button_next';
			this.prevSelector = this.elSelector + '__button_prev';
			this.paginationSelector = this.elSelector + '__pagination';
			this.windwoWidth = (0, _jquery2.default)(window).width();
		}
	
		(0, _createClass3.default)(NewsSlider, [{
			key: 'init',
			value: function init() {
				var elSelector = this.elSelector,
				    nextSelector = this.nextSelector,
				    prevSelector = this.prevSelector,
				    paginationSelector = this.paginationSelector;
	
	
				var settings = {
					slidesOffsetBefore: 0,
					slidesPerView: 1,
					spaceBetween: 0,
					pagination: {
						el: paginationSelector,
						type: 'fraction'
					},
					navigation: {
						nextEl: nextSelector,
						prevEl: prevSelector
					}
				};
	
				return new _swiper2.default(elSelector, {
					breakpoints: {
						// mobile
						767: {
							slidesPerView: 'auto',
							CSSWidthAndHeight: true,
							centeredSlides: true,
							spaceBetween: 16,
							pagination: {
								el: paginationSelector
							}
						},
						// tablet
						1239: (0, _extends3.default)({}, settings),
						// desktop
						9999: (0, _extends3.default)({}, settings, {
							noSwiping: true,
							noSwipingClass: 'no-swiping'
						})
					}
				});
			}
		}, {
			key: 'makeSlider',
			value: function makeSlider() {
				var _this = this;
	
				if ((0, _jquery2.default)(this.elSelector).length) {
					var newsSlider = this.init();
	
					window.addEventListener('resize', function () {
						if (_this.windwoWidth === (0, _jquery2.default)(window).width()) {
							return;
						} // handle mobile browsers viewport changes
	
						if (!newsSlider.destroyed) {
							if (Array.isArray(newsSlider)) {
								newsSlider.forEach(function (instance) {
									instance.destroy();
								});
							} else {
								newsSlider.destroy();
							}
						}
	
						_this.windwoWidth = (0, _jquery2.default)(window).width();
						newsSlider = _this.init();
					});
				}
			}
		}]);
		return NewsSlider;
	}();
	
	exports.default = NewsSlider;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends2 = __webpack_require__(8);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _swiper = __webpack_require__(51);
	
	var _swiper2 = _interopRequireDefault(_swiper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var AlbumSlider = function () {
		function AlbumSlider() {
			var _this = this;
	
			(0, _classCallCheck3.default)(this, AlbumSlider);
	
			this.handleClick = function (e) {
				var previewSelector = _this.previewSelector,
				    videoSelector = _this.videoSelector,
				    activeClass = _this.activeClass,
				    videoOverlaySelector = _this.videoOverlaySelector;
	
				var $target = (0, _jquery2.default)(e.currentTarget).children(previewSelector);
				var index = $target.data('index');
				var $slides = _this.$frame.children();
				var $video = $slides.filter('.' + activeClass).find(videoSelector);
	
				if ($video.length && $video.hasClass('video_started') && !$video.hasClass('video_paused')) {
					$video.find(videoOverlaySelector).click();
				}
	
				$slides.removeClass(activeClass);
				$slides.eq(index).addClass(activeClass);
			};
	
			this.elSelector = '.album-slider';
			this.swiperSelector = this.elSelector + '__swiper';
			this.nextSelector = this.elSelector + '__button_next';
			this.prevSelector = this.elSelector + '__button_prev';
			this.paginationSelector = this.elSelector + '__pagination';
			this.slideSelector = '.js-album-slide';
			this.previewSelector = '.js-album-preview';
			this.activeClass = 'album-slider__frame-inner_active';
			this.videoSelector = '.video';
			this.videoOverlaySelector = this.videoSelector + '__overlay';
			this.$frame = (0, _jquery2.default)('.js-album-frame');
			this.windwoWidth = (0, _jquery2.default)(window).width();
		}
	
		(0, _createClass3.default)(AlbumSlider, [{
			key: 'init',
			value: function init() {
				var swiperSelector = this.swiperSelector,
				    nextSelector = this.nextSelector,
				    prevSelector = this.prevSelector,
				    paginationSelector = this.paginationSelector;
	
	
				var settings = {
					slidesOffsetBefore: 0,
					slidesPerView: 1,
					spaceBetween: 0,
					pagination: {
						el: paginationSelector,
						type: 'fraction'
					},
					navigation: {
						nextEl: nextSelector,
						prevEl: prevSelector
					}
				};
	
				return new _swiper2.default(swiperSelector, {
					breakpoints: {
						// mobile
						767: {
							slidesPerView: 'auto',
							CSSWidthAndHeight: true,
							centeredSlides: true,
							spaceBetween: 16,
							pagination: {
								el: paginationSelector
							}
						},
						// tablet
						1239: (0, _extends3.default)({}, settings),
						// desktop
						9999: (0, _extends3.default)({}, settings, {
							noSwiping: true,
							slidesPerView: 5,
							spaceBetween: 29,
							noSwipingClass: 'no-swiping'
						})
					}
				});
			}
		}, {
			key: 'makeSlider',
			value: function makeSlider() {
				var _this2 = this;
	
				if ((0, _jquery2.default)(this.swiperSelector).length) {
					var albumSlider = this.init();
	
					(0, _jquery2.default)(this.slideSelector).on('click', this.handleClick);
	
					window.addEventListener('resize', function () {
						if (_this2.windwoWidth === (0, _jquery2.default)(window).width()) {
							return;
						} // handle mobile browsers viewport changes
	
						if (!albumSlider.destroyed) {
							if (Array.isArray(albumSlider)) {
								albumSlider.forEach(function (instance) {
									instance.destroy();
								});
							} else {
								albumSlider.destroy();
							}
						}
	
						_this2.windwoWidth = (0, _jquery2.default)(window).width();
						albumSlider = _this2.init();
					});
				}
			}
		}]);
		return AlbumSlider;
	}();
	
	exports.default = AlbumSlider;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var $page = (0, _jquery2.default)('.page');
	var $header = (0, _jquery2.default)('.header');
	var $toggler = (0, _jquery2.default)('.js-header-menu-toggler');
	
	var Header = function () {
		function Header() {
			(0, _classCallCheck3.default)(this, Header);
		}
	
		(0, _createClass3.default)(Header, [{
			key: 'handleMenuToggle',
			value: function handleMenuToggle() {
				$header.toggleClass('header_menu-open');
				$page.toggleClass('page_mobile-menu');
			}
		}, {
			key: 'onScroll',
			value: function onScroll() {
				var _window = window,
				    scrollY = _window.scrollY;
	
				var shadowClass = 'header_with-shadow';
	
				if (scrollY === 0) {
					$header.removeClass(shadowClass);
				} else if (!$header.hasClass(shadowClass)) {
					$header.addClass(shadowClass);
				}
			}
		}, {
			key: 'handleKeyboardFocus',
			value: function handleKeyboardFocus() {
				var navLink = '.header__nav-link';
				var navSublist = '.header__nav-sublist';
				var focusedClass = 'focused';
	
				(0, _jquery2.default)('.header__nav').on('focus', navLink, function () {
					var el = (0, _jquery2.default)(this);
	
					el.parent().toggleClass(focusedClass);
					el.parent().attr('aria-expanded', 'true');
				}).on('blur', navLink, function () {
					var el = (0, _jquery2.default)(this);
	
					el.parent().toggleClass(focusedClass);
					setTimeout(function () {
						if (el.siblings(navSublist).attr('data-has-focus') !== 'true') {
							el.parent().attr('aria-expanded', 'false');
						}
					}, 100);
				}).on('focusin', navSublist, function () {
					(0, _jquery2.default)(this).attr('data-has-focus', 'true');
				}).on('focusout', navSublist, function () {
					var el = (0, _jquery2.default)(this);
	
					setTimeout(function () {
						if (el.find(':focus').length === 0) {
							el.attr('data-has-focus', 'false');
	
							if (!el.parent().hasClass(focusedClass)) {
								el.parent().attr('aria-expanded', 'false');
							}
						}
					}, 100);
				});
			}
		}, {
			key: 'init',
			value: function init() {
				$toggler.on('click', this.handleMenuToggle);
				this.onScroll();
				window.addEventListener('scroll', this.onScroll);
				this.handleKeyboardFocus();
			}
		}]);
		return Header;
	}();
	
	exports.default = Header;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* eslint-disable no-undef */
	var InteractiveMap = function () {
		function InteractiveMap() {
			(0, _classCallCheck3.default)(this, InteractiveMap);
		}
	
		(0, _createClass3.default)(InteractiveMap, [{
			key: 'init',
			value: function init() {
				if ($('#map')[0]) {
					ymaps.ready(function () {
						var point = [56.086441, 37.616392];
						var imgPath = 'images/pin@2x.png';
	
						var myMap = new ymaps.Map('map', {
							center: point,
							zoom: 16,
							controls: ['fullscreenControl']
						});
	
						var marker = new ymaps.Placemark(point, {}, {
							iconLayout: 'default#image',
							iconImageHref: imgPath,
							iconImageSize: [52, 67],
							iconImageOffset: [-26, -67]
						});
	
						myMap.geoObjects.add(marker);
						myMap.behaviors.disable('scrollZoom');
						myMap.behaviors.disable('drag');
					});
				}
			}
		}]);
		return InteractiveMap;
	}();
	
	exports.default = InteractiveMap;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var pageSelector = '.profile-page';
	var linkSelector = '.submenu__link';
	var contentSelector = '.profile-page__content';
	var activeLinkClass = 'submenu__link_selected';
	var activeContentClass = 'profile-page__content_visible';
	
	var ProfilePage = function () {
		function ProfilePage() {
			(0, _classCallCheck3.default)(this, ProfilePage);
		}
	
		(0, _createClass3.default)(ProfilePage, [{
			key: 'init',
			value: function init() {
				if ((0, _jquery2.default)(pageSelector)[0]) {
					(0, _jquery2.default)(linkSelector).on('click', function (e) {
						var $this = (0, _jquery2.default)(e.currentTarget);
	
						var index = $this.attr('id').substr(15);
	
						// switch active menu link
						(0, _jquery2.default)(linkSelector).removeClass(activeLinkClass);
						$this.addClass(activeLinkClass);
	
						// switch active content part
						(0, _jquery2.default)(contentSelector).removeClass(activeContentClass);
						(0, _jquery2.default)(contentSelector + '[data-index=\'' + index + '\']').addClass(activeContentClass);
					});
				}
			}
		}]);
		return ProfilePage;
	}();
	
	exports.default = ProfilePage;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var NewsPage = function () {
		function NewsPage() {
			var _this = this;
	
			var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NewsPage.defaultOptions;
			(0, _classCallCheck3.default)(this, NewsPage);
	
			this.handleClick = function (e) {
				var activeClass = _this.options.activeClass;
	
				var $target = (0, _jquery2.default)(e.currentTarget);
	
				if ($target.hasClass(activeClass)) {
					return false;
				}
	
				_this.$years.removeClass(activeClass);
				$target.addClass(activeClass);
			};
	
			this.handleHideNews = function () {
				var hideItemClass = _this.options.hideItemClass;
	
				var newsCount = _this.$news.length;
	
				_this.$news.removeClass(hideItemClass);
	
				if (newsCount % 2) {
					_this.$news.last().addClass(hideItemClass);
				}
			};
	
			this.options = options;
			this.$years = (0, _jquery2.default)(options.yearSelector);
			this.$news = (0, _jquery2.default)(options.newsSelector);
			this.$window = (0, _jquery2.default)(window);
		}
	
		(0, _createClass3.default)(NewsPage, [{
			key: 'init',
			value: function init() {
				this.$years.on('click', this.handleClick);
				this.handleHideNews();
			}
		}]);
		return NewsPage;
	}();
	
	NewsPage.defaultOptions = {
		yearSelector: '.js-news-page-year',
		newsSelector: '.js-news-page-item',
		activeClass: 'news-page__nav-button_state_active',
		hideItemClass: 'news-page__item_hide'
	};
	exports.default = NewsPage;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends2 = __webpack_require__(8);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _swiper = __webpack_require__(51);
	
	var _swiper2 = _interopRequireDefault(_swiper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var MobileSlider = function () {
		function MobileSlider(options) {
			(0, _classCallCheck3.default)(this, MobileSlider);
	
			this.selector = options.selector;
			this.windwoWidth = (0, _jquery2.default)(window).width();
		}
	
		(0, _createClass3.default)(MobileSlider, [{
			key: 'init',
			value: function init() {
				var selector = this.selector;
	
	
				var settings = {
					slidesPerView: 'auto',
					CSSWidthAndHeight: true,
					spaceBetween: 30,
					pagination: {
						el: this.selector + '__pagination',
						clickable: true
					}
				};
	
				return new _swiper2.default(selector + '__container', {
					breakpoints: {
						// mobile
						767: (0, _extends3.default)({}, settings, {
							centeredSlides: true
						}),
						// tablet
						1239: (0, _extends3.default)({}, settings, {
							centeredSlides: true,
							initialSlide: 1
						}),
						// desktop
						9999: (0, _extends3.default)({}, settings, {
							noSwiping: true,
							noSwipingClass: 'no-swiping'
						})
					}
				});
			}
		}, {
			key: 'makeSlider',
			value: function makeSlider() {
				var _this = this;
	
				if ((0, _jquery2.default)(this.selector).length) {
					var mobileSlider = this.init();
	
					window.addEventListener('resize', function () {
						if (_this.windwoWidth === (0, _jquery2.default)(window).width()) {
							return;
						} // handle mobile browsers viewport changes
	
						if (!mobileSlider.destroyed) {
							if (Array.isArray(mobileSlider)) {
								mobileSlider.forEach(function (instance) {
									instance.destroy();
								});
							} else {
								mobileSlider.destroy();
							}
						}
	
						_this.windwoWidth = (0, _jquery2.default)(window).width();
						mobileSlider = _this.init();
					});
				}
			}
		}]);
		return MobileSlider;
	}();
	
	exports.default = MobileSlider;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _lottieWeb = __webpack_require__(62);
	
	var _lottieWeb2 = _interopRequireDefault(_lottieWeb);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var selector = 'cards-section';
	var $section = (0, _jquery2.default)('.' + selector);
	var $list = $section.find('.' + selector + '__list');
	
	var CardsSection = function () {
		function CardsSection() {
			(0, _classCallCheck3.default)(this, CardsSection);
	
			this.checkOdd = function () {
				$list.removeClass(selector + '__list_odd');
				var $cards = $section.find('.' + selector + '__card');
				if ($cards.length % 2) {
					$list.addClass(selector + '__list_odd');
				}
			};
	
			this.containers = (0, _jquery2.default)('.js-lottie-animation');
			this.animations = [];
		}
	
		(0, _createClass3.default)(CardsSection, [{
			key: 'initAnimation',
			value: function initAnimation() {
				var _this = this;
	
				this.containers.map(function (id) {
					var container = _this.containers.eq(id);
					var type = container.attr('data-anim-type');
	
					_this.animations.push(_lottieWeb2.default.loadAnimation({
						container: container[0], // the dom element that will contain the animation
						renderer: 'svg',
						loop: false,
						autoplay: false,
						path: '/bodymovin/anim' + type + '.json' // the path to the animation json
					}));
	
					if (window.innerWidth >= 1240) {
						container.on('mouseenter', function () {
							return _this.frameLaunch(id);
						});
						container.on('mouseleave', function () {
							return _this.frameReverse(id);
						});
					}
				});
			}
		}, {
			key: 'frameLaunch',
			value: function frameLaunch(id) {
				var animation = this.animations[id];
	
				animation.setDirection(1);
				animation.goToAndPlay(0, true);
			}
		}, {
			key: 'frameReverse',
			value: function frameReverse(id) {
				var animation = this.animations[id];
	
				animation.pause();
				animation.setDirection(-1);
				animation.play();
			}
		}], [{
			key: 'init',
			value: function init() {
				var instance = new CardsSection();
				instance.checkOdd();
				instance.initAnimation();
	
				return instance;
			}
		}]);
		return CardsSection;
	}();
	
	exports.default = CardsSection;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return factory(root);
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module === "object" && module.exports) {
	        module.exports = factory(root);
	    } else {
	        root.lottie = factory(root);
	        root.bodymovin = root.lottie;
	    }
	}((window || {}), function(window) {
	    "use strict";
	    var svgNS = "http://www.w3.org/2000/svg";
	
	var locationHref = '';
	
	var initialDefaultFrame = -999999;
	
	var subframeEnabled = true;
	var expressionsPlugin;
	var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
	var cachedColors = {};
	var bm_rounder = Math.round;
	var bm_rnd;
	var bm_pow = Math.pow;
	var bm_sqrt = Math.sqrt;
	var bm_abs = Math.abs;
	var bm_floor = Math.floor;
	var bm_max = Math.max;
	var bm_min = Math.min;
	var blitter = 10;
	
	var BMMath = {};
	(function(){
	    var propertyNames = Object.getOwnPropertyNames(Math);
	    var i, len = propertyNames.length;
	    for(i=0;i<len;i+=1){
	        BMMath[propertyNames[i]] = Math[propertyNames[i]];
	    }
	}());
	
	function ProjectInterface(){return {};}
	
	BMMath.random = Math.random;
	BMMath.abs = function(val){
	    var tOfVal = typeof val;
	    if(tOfVal === 'object' && val.length){
	        var absArr = createSizedArray(val.length);
	        var i, len = val.length;
	        for(i=0;i<len;i+=1){
	            absArr[i] = Math.abs(val[i]);
	        }
	        return absArr;
	    }
	    return Math.abs(val);
	
	};
	var defaultCurveSegments = 150;
	var degToRads = Math.PI/180;
	var roundCorner = 0.5519;
	
	function roundValues(flag){
	    if(flag){
	        bm_rnd = Math.round;
	    }else{
	        bm_rnd = function(val){
	            return val;
	        };
	    }
	}
	roundValues(false);
	
	function styleDiv(element){
	    element.style.position = 'absolute';
	    element.style.top = 0;
	    element.style.left = 0;
	    element.style.display = 'block';
	    element.style.transformOrigin = element.style.webkitTransformOrigin = '0 0';
	    element.style.backfaceVisibility  = element.style.webkitBackfaceVisibility = 'visible';
	    element.style.transformStyle = element.style.webkitTransformStyle = element.style.mozTransformStyle = "preserve-3d";
	}
	
	function BMEnterFrameEvent(n,c,t,d){
	    this.type = n;
	    this.currentTime = c;
	    this.totalTime = t;
	    this.direction = d < 0 ? -1:1;
	}
	
	function BMCompleteEvent(n,d){
	    this.type = n;
	    this.direction = d < 0 ? -1:1;
	}
	
	function BMCompleteLoopEvent(n,c,t,d){
	    this.type = n;
	    this.currentLoop = t;
	    this.totalLoops = c;
	    this.direction = d < 0 ? -1:1;
	}
	
	function BMSegmentStartEvent(n,f,t){
	    this.type = n;
	    this.firstFrame = f;
	    this.totalFrames = t;
	}
	
	function BMDestroyEvent(n,t){
	    this.type = n;
	    this.target = t;
	}
	
	function randomString(length, chars){
	    if(chars === undefined){
	        chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';
	    }
	    var i;
	    var result = '';
	    for (i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];
	    return result;
	}
	
	function HSVtoRGB(h, s, v) {
	    var r, g, b, i, f, p, q, t;
	    i = Math.floor(h * 6);
	    f = h * 6 - i;
	    p = v * (1 - s);
	    q = v * (1 - f * s);
	    t = v * (1 - (1 - f) * s);
	    switch (i % 6) {
	        case 0: r = v; g = t; b = p; break;
	        case 1: r = q; g = v; b = p; break;
	        case 2: r = p; g = v; b = t; break;
	        case 3: r = p; g = q; b = v; break;
	        case 4: r = t; g = p; b = v; break;
	        case 5: r = v; g = p; b = q; break;
	    }
	    return [ r,
	        g,
	         b ];
	}
	
	function RGBtoHSV(r, g, b) {
	    var max = Math.max(r, g, b), min = Math.min(r, g, b),
	        d = max - min,
	        h,
	        s = (max === 0 ? 0 : d / max),
	        v = max / 255;
	
	    switch (max) {
	        case min: h = 0; break;
	        case r: h = (g - b) + d * (g < b ? 6: 0); h /= 6 * d; break;
	        case g: h = (b - r) + d * 2; h /= 6 * d; break;
	        case b: h = (r - g) + d * 4; h /= 6 * d; break;
	    }
	
	    return [
	         h,
	         s,
	         v
	    ];
	}
	
	function addSaturationToRGB(color,offset){
	    var hsv = RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);
	    hsv[1] += offset;
	    if (hsv[1] > 1) {
	        hsv[1] = 1;
	    }
	    else if (hsv[1] <= 0) {
	        hsv[1] = 0;
	    }
	    return HSVtoRGB(hsv[0],hsv[1],hsv[2]);
	}
	
	function addBrightnessToRGB(color,offset){
	    var hsv = RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);
	    hsv[2] += offset;
	    if (hsv[2] > 1) {
	        hsv[2] = 1;
	    }
	    else if (hsv[2] < 0) {
	        hsv[2] = 0;
	    }
	    return HSVtoRGB(hsv[0],hsv[1],hsv[2]);
	}
	
	function addHueToRGB(color,offset) {
	    var hsv = RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);
	    hsv[0] += offset/360;
	    if (hsv[0] > 1) {
	        hsv[0] -= 1;
	    }
	    else if (hsv[0] < 0) {
	        hsv[0] += 1;
	    }
	    return HSVtoRGB(hsv[0],hsv[1],hsv[2]);
	}
	
	var rgbToHex = (function(){
	    var colorMap = [];
	    var i;
	    var hex;
	    for(i=0;i<256;i+=1){
	        hex = i.toString(16);
	        colorMap[i] = hex.length == 1 ? '0' + hex : hex;
	    }
	
	    return function(r, g, b) {
	        if(r<0){
	            r = 0;
	        }
	        if(g<0){
	            g = 0;
	        }
	        if(b<0){
	            b = 0;
	        }
	        return '#' + colorMap[r] + colorMap[g] + colorMap[b];
	    };
	}());
	function BaseEvent(){}
	BaseEvent.prototype = {
		triggerEvent: function (eventName, args) {
		    if (this._cbs[eventName]) {
		        var len = this._cbs[eventName].length;
		        for (var i = 0; i < len; i++){
		            this._cbs[eventName][i](args);
		        }
		    }
		},
		addEventListener: function (eventName, callback) {
		    if (!this._cbs[eventName]){
		        this._cbs[eventName] = [];
		    }
		    this._cbs[eventName].push(callback);
	
			return function() {
				this.removeEventListener(eventName, callback);
			}.bind(this);
		},
		removeEventListener: function (eventName,callback){
		    if (!callback){
		        this._cbs[eventName] = null;
		    }else if(this._cbs[eventName]){
		        var i = 0, len = this._cbs[eventName].length;
		        while(i<len){
		            if(this._cbs[eventName][i] === callback){
		                this._cbs[eventName].splice(i,1);
		                i -=1;
		                len -= 1;
		            }
		            i += 1;
		        }
		        if(!this._cbs[eventName].length){
		            this._cbs[eventName] = null;
		        }
		    }
		}
	};
	var createTypedArray = (function(){
		function createRegularArray(type, len){
			var i = 0, arr = [], value;
			switch(type) {
				case 'int16':
				case 'uint8c':
					value = 1;
					break;
				default:
					value = 1.1;
					break;
			}
			for(i = 0; i < len; i += 1) {
				arr.push(value);
			}
			return arr;
		}
		function createTypedArray(type, len){
			if(type === 'float32') {
				return new Float32Array(len);
			} else if(type === 'int16') {
				return new Int16Array(len);
			} else if(type === 'uint8c') {
				return new Uint8ClampedArray(len);
			}
		}
		if(typeof Uint8ClampedArray === 'function' && typeof Float32Array === 'function') {
			return createTypedArray;
		} else {
			return createRegularArray;
		}
	}());
	
	function createSizedArray(len) {
		return Array.apply(null,{length:len});
	}
	function createNS(type) {
		//return {appendChild:function(){},setAttribute:function(){},style:{}}
		return document.createElementNS(svgNS, type);
	}
	function createTag(type) {
		//return {appendChild:function(){},setAttribute:function(){},style:{}}
		return document.createElement(type);
	}
	function addDynamicProperty(prop) {
		if(this.dynamicProperties.indexOf(prop) === -1) {
	        this.dynamicProperties.push(prop);
	        this.container.addDynamicProperty(this);
	    }
	}
	/*!
	 Transformation Matrix v2.0
	 (c) Epistemex 2014-2015
	 www.epistemex.com
	 By Ken Fyrstenberg
	 Contributions by leeoniya.
	 License: MIT, header required.
	 */
	
	/**
	 * 2D transformation matrix object initialized with identity matrix.
	 *
	 * The matrix can synchronize a canvas context by supplying the context
	 * as an argument, or later apply current absolute transform to an
	 * existing context.
	 *
	 * All values are handled as floating point values.
	 *
	 * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
	 * @prop {number} a - scale x
	 * @prop {number} b - shear y
	 * @prop {number} c - shear x
	 * @prop {number} d - scale y
	 * @prop {number} e - translate x
	 * @prop {number} f - translate y
	 * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
	 * @constructor
	 */
	
	var Matrix = (function(){
	
	    var _cos = Math.cos;
	    var _sin = Math.sin;
	    var _tan = Math.tan;
	    var _rnd = Math.round;
	
	    function reset(){
	        this.props[0] = 1;
	        this.props[1] = 0;
	        this.props[2] = 0;
	        this.props[3] = 0;
	        this.props[4] = 0;
	        this.props[5] = 1;
	        this.props[6] = 0;
	        this.props[7] = 0;
	        this.props[8] = 0;
	        this.props[9] = 0;
	        this.props[10] = 1;
	        this.props[11] = 0;
	        this.props[12] = 0;
	        this.props[13] = 0;
	        this.props[14] = 0;
	        this.props[15] = 1;
	        return this;
	    }
	
	    function rotate(angle) {
	        if(angle === 0){
	            return this;
	        }
	        var mCos = _cos(angle);
	        var mSin = _sin(angle);
	        return this._t(mCos, -mSin,  0, 0, mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1);
	    }
	
	    function rotateX(angle){
	        if(angle === 0){
	            return this;
	        }
	        var mCos = _cos(angle);
	        var mSin = _sin(angle);
	        return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin,  mCos, 0, 0, 0, 0, 1);
	    }
	
	    function rotateY(angle){
	        if(angle === 0){
	            return this;
	        }
	        var mCos = _cos(angle);
	        var mSin = _sin(angle);
	        return this._t(mCos,  0,  mSin, 0, 0, 1, 0, 0, -mSin,  0,  mCos, 0, 0, 0, 0, 1);
	    }
	
	    function rotateZ(angle){
	        if(angle === 0){
	            return this;
	        }
	        var mCos = _cos(angle);
	        var mSin = _sin(angle);
	        return this._t(mCos, -mSin,  0, 0, mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1);
	    }
	
	    function shear(sx,sy){
	        return this._t(1, sy, sx, 1, 0, 0);
	    }
	
	    function skew(ax, ay){
	        return this.shear(_tan(ax), _tan(ay));
	    }
	
	    function skewFromAxis(ax, angle){
	        var mCos = _cos(angle);
	        var mSin = _sin(angle);
	        return this._t(mCos, mSin,  0, 0, -mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1)
	            ._t(1, 0,  0, 0, _tan(ax),  1, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1)
	            ._t(mCos, -mSin,  0, 0, mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1);
	        //return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
	    }
	
	    function scale(sx, sy, sz) {
	        sz = isNaN(sz) ? 1 : sz;
	        if(sx == 1 && sy == 1 && sz == 1){
	            return this;
	        }
	        return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
	    }
	
	    function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
	        this.props[0] = a;
	        this.props[1] = b;
	        this.props[2] = c;
	        this.props[3] = d;
	        this.props[4] = e;
	        this.props[5] = f;
	        this.props[6] = g;
	        this.props[7] = h;
	        this.props[8] = i;
	        this.props[9] = j;
	        this.props[10] = k;
	        this.props[11] = l;
	        this.props[12] = m;
	        this.props[13] = n;
	        this.props[14] = o;
	        this.props[15] = p;
	        return this;
	    }
	
	    function translate(tx, ty, tz) {
	        tz = tz || 0;
	        if(tx !== 0 || ty !== 0 || tz !== 0){
	            return this._t(1,0,0,0,0,1,0,0,0,0,1,0,tx,ty,tz,1);
	        }
	        return this;
	    }
	
	    function transform(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {
	
	        var _p = this.props;
	
	        if(a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0){
	            //NOTE: commenting this condition because TurboFan deoptimizes code when present
	            //if(m2 !== 0 || n2 !== 0 || o2 !== 0){
	                _p[12] = _p[12] * a2 + _p[15] * m2;
	                _p[13] = _p[13] * f2 + _p[15] * n2;
	                _p[14] = _p[14] * k2 + _p[15] * o2;
	                _p[15] = _p[15] * p2;
	            //}
	            this._identityCalculated = false;
	            return this;
	        }
	
	        var a1 = _p[0];
	        var b1 = _p[1];
	        var c1 = _p[2];
	        var d1 = _p[3];
	        var e1 = _p[4];
	        var f1 = _p[5];
	        var g1 = _p[6];
	        var h1 = _p[7];
	        var i1 = _p[8];
	        var j1 = _p[9];
	        var k1 = _p[10];
	        var l1 = _p[11];
	        var m1 = _p[12];
	        var n1 = _p[13];
	        var o1 = _p[14];
	        var p1 = _p[15];
	
	        /* matrix order (canvas compatible):
	         * ace
	         * bdf
	         * 001
	         */
	        _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
	        _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2 ;
	        _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2 ;
	        _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2 ;
	
	        _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2 ;
	        _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2 ;
	        _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2 ;
	        _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2 ;
	
	        _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2 ;
	        _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2 ;
	        _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2 ;
	        _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2 ;
	
	        _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2 ;
	        _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2 ;
	        _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2 ;
	        _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2 ;
	
	        this._identityCalculated = false;
	        return this;
	    }
	
	    function isIdentity() {
	        if(!this._identityCalculated){
	            this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
	            this._identityCalculated = true;
	        }
	        return this._identity;
	    }
	
	    function equals(matr){
	        var i = 0;
	        while (i < 16) {
	            if(matr.props[i] !== this.props[i]) {
	                return false;
	            }
	            i+=1;
	        }
	        return true;
	    }
	
	    function clone(matr){
	        var i;
	        for(i=0;i<16;i+=1){
	            matr.props[i] = this.props[i];
	        }
	    }
	
	    function cloneFromProps(props){
	        var i;
	        for(i=0;i<16;i+=1){
	            this.props[i] = props[i];
	        }
	    }
	
	    function applyToPoint(x, y, z) {
	
	        return {
	            x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
	            y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
	            z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
	        };
	        /*return {
	         x: x * me.a + y * me.c + me.e,
	         y: x * me.b + y * me.d + me.f
	         };*/
	    }
	    function applyToX(x, y, z) {
	        return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
	    }
	    function applyToY(x, y, z) {
	        return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
	    }
	    function applyToZ(x, y, z) {
	        return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
	    }
	
	    function inversePoint(pt) {
	        var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
	        var a = this.props[5]/determinant;
	        var b = - this.props[1]/determinant;
	        var c = - this.props[4]/determinant;
	        var d = this.props[0]/determinant;
	        var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12])/determinant;
	        var f = - (this.props[0] * this.props[13] - this.props[1] * this.props[12])/determinant;
	        return [pt[0] * a + pt[1] * c + e, pt[0] * b + pt[1] * d + f, 0];
	    }
	
	    function inversePoints(pts){
	        var i, len = pts.length, retPts = [];
	        for(i=0;i<len;i+=1){
	            retPts[i] = inversePoint(pts[i]);
	        }
	        return retPts;
	    }
	
	    function applyToTriplePoints(pt1, pt2, pt3) {
	        var arr = createTypedArray('float32', 6);
	        if(this.isIdentity()) {
	            arr[0] = pt1[0];
	            arr[1] = pt1[1];
	            arr[2] = pt2[0];
	            arr[3] = pt2[1];
	            arr[4] = pt3[0];
	            arr[5] = pt3[1];
	        } else {
	            var p0 = this.props[0], p1 = this.props[1], p4 = this.props[4], p5 = this.props[5], p12 = this.props[12], p13 = this.props[13];
	            arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
	            arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
	            arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
	            arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
	            arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
	            arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
	        }
	        return arr;
	    }
	
	    function applyToPointArray(x,y,z){
	        var arr;
	        if(this.isIdentity()) {
	            arr = [x,y,z];
	        } else {
	            arr = [x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]];
	        }
	        return arr;
	    }
	
	    function applyToPointStringified(x, y) {
	        if(this.isIdentity()) {
	            return x + ',' + y;
	        }
	        return (x * this.props[0] + y * this.props[4] + this.props[12])+','+(x * this.props[1] + y * this.props[5] + this.props[13]);
	    }
	
	    function toCSS() {
	        //Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
	        /*if(this.isIdentity()) {
	            return '';
	        }*/
	        var i = 0;
	        var props = this.props;
	        var cssValue = 'matrix3d(';
	        var v = 10000;
	        while(i<16){
	            cssValue += _rnd(props[i]*v)/v;
	            cssValue += i === 15 ? ')':',';
	            i += 1;
	        }
	        return cssValue;
	    }
	
	    function to2dCSS() {
	        //Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
	        /*if(this.isIdentity()) {
	            return '';
	        }*/
	        var v = 10000;
	        var props = this.props;
	        return "matrix(" + _rnd(props[0]*v)/v + ',' + _rnd(props[1]*v)/v + ',' + _rnd(props[4]*v)/v + ',' + _rnd(props[5]*v)/v + ',' + _rnd(props[12]*v)/v + ',' + _rnd(props[13]*v)/v + ")";
	    }
	
	    return function(){
	        this.reset = reset;
	        this.rotate = rotate;
	        this.rotateX = rotateX;
	        this.rotateY = rotateY;
	        this.rotateZ = rotateZ;
	        this.skew = skew;
	        this.skewFromAxis = skewFromAxis;
	        this.shear = shear;
	        this.scale = scale;
	        this.setTransform = setTransform;
	        this.translate = translate;
	        this.transform = transform;
	        this.applyToPoint = applyToPoint;
	        this.applyToX = applyToX;
	        this.applyToY = applyToY;
	        this.applyToZ = applyToZ;
	        this.applyToPointArray = applyToPointArray;
	        this.applyToTriplePoints = applyToTriplePoints;
	        this.applyToPointStringified = applyToPointStringified;
	        this.toCSS = toCSS;
	        this.to2dCSS = to2dCSS;
	        this.clone = clone;
	        this.cloneFromProps = cloneFromProps;
	        this.equals = equals;
	        this.inversePoints = inversePoints;
	        this.inversePoint = inversePoint;
	        this._t = this.transform;
	        this.isIdentity = isIdentity;
	        this._identity = true;
	        this._identityCalculated = false;
	
	        this.props = createTypedArray('float32', 16);
	        this.reset();
	    };
	}());
	
	/*
	 Copyright 2014 David Bau.
	
	 Permission is hereby granted, free of charge, to any person obtaining
	 a copy of this software and associated documentation files (the
	 "Software"), to deal in the Software without restriction, including
	 without limitation the rights to use, copy, modify, merge, publish,
	 distribute, sublicense, and/or sell copies of the Software, and to
	 permit persons to whom the Software is furnished to do so, subject to
	 the following conditions:
	
	 The above copyright notice and this permission notice shall be
	 included in all copies or substantial portions of the Software.
	
	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	 */
	
	(function (pool, math) {
	//
	// The following constants are related to IEEE 754 limits.
	//
	    var global = this,
	        width = 256,        // each RC4 output is 0 <= x < 256
	        chunks = 6,         // at least six RC4 outputs for each double
	        digits = 52,        // there are 52 significant digits in a double
	        rngname = 'random', // rngname: name for Math.random and Math.seedrandom
	        startdenom = math.pow(width, chunks),
	        significance = math.pow(2, digits),
	        overflow = significance * 2,
	        mask = width - 1,
	        nodecrypto;         // node.js crypto module, initialized at the bottom.
	
	//
	// seedrandom()
	// This is the seedrandom function described above.
	//
	    function seedrandom(seed, options, callback) {
	        var key = [];
	        options = (options === true) ? { entropy: true } : (options || {});
	
	        // Flatten the seed string or build one from local entropy if needed.
	        var shortseed = mixkey(flatten(
	            options.entropy ? [seed, tostring(pool)] :
	                (seed === null) ? autoseed() : seed, 3), key);
	
	        // Use the seed to initialize an ARC4 generator.
	        var arc4 = new ARC4(key);
	
	        // This function returns a random double in [0, 1) that contains
	        // randomness in every bit of the mantissa of the IEEE 754 value.
	        var prng = function() {
	            var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
	                d = startdenom,                 //   and denominator d = 2 ^ 48.
	                x = 0;                          //   and no 'extra last byte'.
	            while (n < significance) {          // Fill up all significant digits by
	                n = (n + x) * width;              //   shifting numerator and
	                d *= width;                       //   denominator and generating a
	                x = arc4.g(1);                    //   new least-significant-byte.
	            }
	            while (n >= overflow) {             // To avoid rounding up, before adding
	                n /= 2;                           //   last byte, shift everything
	                d /= 2;                           //   right using integer math until
	                x >>>= 1;                         //   we have exactly the desired bits.
	            }
	            return (n + x) / d;                 // Form the number within [0, 1).
	        };
	
	        prng.int32 = function() { return arc4.g(4) | 0; };
	        prng.quick = function() { return arc4.g(4) / 0x100000000; };
	        prng.double = prng;
	
	        // Mix the randomness into accumulated entropy.
	        mixkey(tostring(arc4.S), pool);
	
	        // Calling convention: what to return as a function of prng, seed, is_math.
	        return (options.pass || callback ||
	        function(prng, seed, is_math_call, state) {
	            if (state) {
	                // Load the arc4 state from the given state if it has an S array.
	                if (state.S) { copy(state, arc4); }
	                // Only provide the .state method if requested via options.state.
	                prng.state = function() { return copy(arc4, {}); };
	            }
	
	            // If called as a method of Math (Math.seedrandom()), mutate
	            // Math.random because that is how seedrandom.js has worked since v1.0.
	            if (is_math_call) { math[rngname] = prng; return seed; }
	
	            // Otherwise, it is a newer calling convention, so return the
	            // prng directly.
	            else return prng;
	        })(
	            prng,
	            shortseed,
	            'global' in options ? options.global : (this == math),
	            options.state);
	    }
	    math['seed' + rngname] = seedrandom;
	
	//
	// ARC4
	//
	// An ARC4 implementation.  The constructor takes a key in the form of
	// an array of at most (width) integers that should be 0 <= x < (width).
	//
	// The g(count) method returns a pseudorandom integer that concatenates
	// the next (count) outputs from ARC4.  Its return value is a number x
	// that is in the range 0 <= x < (width ^ count).
	//
	    function ARC4(key) {
	        var t, keylen = key.length,
	            me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
	
	        // The empty key [] is treated as [0].
	        if (!keylen) { key = [keylen++]; }
	
	        // Set up S using the standard key scheduling algorithm.
	        while (i < width) {
	            s[i] = i++;
	        }
	        for (i = 0; i < width; i++) {
	            s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
	            s[j] = t;
	        }
	
	        // The "g" method returns the next (count) outputs as one number.
	        me.g = function(count) {
	            // Using instance members instead of closure state nearly doubles speed.
	            var t, r = 0,
	                i = me.i, j = me.j, s = me.S;
	            while (count--) {
	                t = s[i = mask & (i + 1)];
	                r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
	            }
	            me.i = i; me.j = j;
	            return r;
	            // For robust unpredictability, the function call below automatically
	            // discards an initial batch of values.  This is called RC4-drop[256].
	            // See http://google.com/search?q=rsa+fluhrer+response&btnI
	        };
	    }
	
	//
	// copy()
	// Copies internal state of ARC4 to or from a plain object.
	//
	    function copy(f, t) {
	        t.i = f.i;
	        t.j = f.j;
	        t.S = f.S.slice();
	        return t;
	    }
	
	//
	// flatten()
	// Converts an object tree to nested arrays of strings.
	//
	    function flatten(obj, depth) {
	        var result = [], typ = (typeof obj), prop;
	        if (depth && typ == 'object') {
	            for (prop in obj) {
	                try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
	            }
	        }
	        return (result.length ? result : typ == 'string' ? obj : obj + '\0');
	    }
	
	//
	// mixkey()
	// Mixes a string seed into a key that is an array of integers, and
	// returns a shortened string seed that is equivalent to the result key.
	//
	    function mixkey(seed, key) {
	        var stringseed = seed + '', smear, j = 0;
	        while (j < stringseed.length) {
	            key[mask & j] =
	                mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
	        }
	        return tostring(key);
	    }
	
	//
	// autoseed()
	// Returns an object for autoseeding, using window.crypto and Node crypto
	// module if available.
	//
	    function autoseed() {
	        try {
	            if (nodecrypto) { return tostring(nodecrypto.randomBytes(width)); }
	            var out = new Uint8Array(width);
	            (global.crypto || global.msCrypto).getRandomValues(out);
	            return tostring(out);
	        } catch (e) {
	            var browser = global.navigator,
	                plugins = browser && browser.plugins;
	            return [+new Date(), global, plugins, global.screen, tostring(pool)];
	        }
	    }
	
	//
	// tostring()
	// Converts an array of charcodes to a string
	//
	    function tostring(a) {
	        return String.fromCharCode.apply(0, a);
	    }
	
	//
	// When seedrandom.js is loaded, we immediately mix a few bits
	// from the built-in RNG into the entropy pool.  Because we do
	// not want to interfere with deterministic PRNG state later,
	// seedrandom will not call math.random on its own again after
	// initialization.
	//
	    mixkey(math.random(), pool);
	
	//
	// Nodejs and AMD support: export the implementation as a module using
	// either convention.
	//
	
	// End anonymous scope, and pass initial values.
	})(
	    [],     // pool: entropy pool starts empty
	    BMMath    // math: package containing random, pow, and seedrandom
	);
	var BezierFactory = (function(){
	    /**
	     * BezierEasing - use bezier curve for transition easing function
	     * by Gaëtan Renaudeau 2014 - 2015 – MIT License
	     *
	     * Credits: is based on Firefox's nsSMILKeySpline.cpp
	     * Usage:
	     * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
	     * spline.get(x) => returns the easing value | x must be in [0, 1] range
	     *
	     */
	
	        var ob = {};
	    ob.getBezierEasing = getBezierEasing;
	    var beziers = {};
	
	    function getBezierEasing(a,b,c,d,nm){
	        var str = nm || ('bez_' + a+'_'+b+'_'+c+'_'+d).replace(/\./g, 'p');
	        if(beziers[str]){
	            return beziers[str];
	        }
	        var bezEasing = new BezierEasing([a,b,c,d]);
	        beziers[str] = bezEasing;
	        return bezEasing;
	    }
	
	// These values are established by empiricism with tests (tradeoff: performance VS precision)
	    var NEWTON_ITERATIONS = 4;
	    var NEWTON_MIN_SLOPE = 0.001;
	    var SUBDIVISION_PRECISION = 0.0000001;
	    var SUBDIVISION_MAX_ITERATIONS = 10;
	
	    var kSplineTableSize = 11;
	    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
	
	    var float32ArraySupported = typeof Float32Array === "function";
	
	    function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
	    function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
	    function C (aA1)      { return 3.0 * aA1; }
	
	// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
	    function calcBezier (aT, aA1, aA2) {
	        return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;
	    }
	
	// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
	    function getSlope (aT, aA1, aA2) {
	        return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
	    }
	
	    function binarySubdivide (aX, aA, aB, mX1, mX2) {
	        var currentX, currentT, i = 0;
	        do {
	            currentT = aA + (aB - aA) / 2.0;
	            currentX = calcBezier(currentT, mX1, mX2) - aX;
	            if (currentX > 0.0) {
	                aB = currentT;
	            } else {
	                aA = currentT;
	            }
	        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
	        return currentT;
	    }
	
	    function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
	        for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
	            var currentSlope = getSlope(aGuessT, mX1, mX2);
	            if (currentSlope === 0.0) return aGuessT;
	            var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
	            aGuessT -= currentX / currentSlope;
	        }
	        return aGuessT;
	    }
	
	    /**
	     * points is an array of [ mX1, mY1, mX2, mY2 ]
	     */
	    function BezierEasing (points) {
	        this._p = points;
	        this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
	        this._precomputed = false;
	
	        this.get = this.get.bind(this);
	    }
	
	    BezierEasing.prototype = {
	
	        get: function (x) {
	            var mX1 = this._p[0],
	                mY1 = this._p[1],
	                mX2 = this._p[2],
	                mY2 = this._p[3];
	            if (!this._precomputed) this._precompute();
	            if (mX1 === mY1 && mX2 === mY2) return x; // linear
	            // Because JavaScript number are imprecise, we should guarantee the extremes are right.
	            if (x === 0) return 0;
	            if (x === 1) return 1;
	            return calcBezier(this._getTForX(x), mY1, mY2);
	        },
	
	        // Private part
	
	        _precompute: function () {
	            var mX1 = this._p[0],
	                mY1 = this._p[1],
	                mX2 = this._p[2],
	                mY2 = this._p[3];
	            this._precomputed = true;
	            if (mX1 !== mY1 || mX2 !== mY2)
	                this._calcSampleValues();
	        },
	
	        _calcSampleValues: function () {
	            var mX1 = this._p[0],
	                mX2 = this._p[2];
	            for (var i = 0; i < kSplineTableSize; ++i) {
	                this._mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
	            }
	        },
	
	        /**
	         * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
	         */
	        _getTForX: function (aX) {
	            var mX1 = this._p[0],
	                mX2 = this._p[2],
	                mSampleValues = this._mSampleValues;
	
	            var intervalStart = 0.0;
	            var currentSample = 1;
	            var lastSample = kSplineTableSize - 1;
	
	            for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
	                intervalStart += kSampleStepSize;
	            }
	            --currentSample;
	
	            // Interpolate to provide an initial guess for t
	            var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample+1] - mSampleValues[currentSample]);
	            var guessForT = intervalStart + dist * kSampleStepSize;
	
	            var initialSlope = getSlope(guessForT, mX1, mX2);
	            if (initialSlope >= NEWTON_MIN_SLOPE) {
	                return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
	            } else if (initialSlope === 0.0) {
	                return guessForT;
	            } else {
	                return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
	            }
	        }
	    };
	
	    return ob;
	
	}());
	(function () {
	    var lastTime = 0;
	    var vendors = ['ms', 'moz', 'webkit', 'o'];
	    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
	        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
	        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
	    }
	    if(!window.requestAnimationFrame)
	        window.requestAnimationFrame = function (callback, element) {
	            var currTime = new Date().getTime();
	            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	            var id = setTimeout(function () {
	                    callback(currTime + timeToCall);
	                },
	                timeToCall);
	            lastTime = currTime + timeToCall;
	            return id;
	        };
	    if(!window.cancelAnimationFrame)
	        window.cancelAnimationFrame = function (id) {
	            clearTimeout(id);
	        };
	}());
	
	function extendPrototype(sources,destination){
	    var i, len = sources.length, sourcePrototype;
	    for (i = 0;i < len;i += 1) {
	        sourcePrototype = sources[i].prototype;
	        for (var attr in sourcePrototype) {
	            if (sourcePrototype.hasOwnProperty(attr)) destination.prototype[attr] = sourcePrototype[attr];
	        }
	    }
	}
	
	function getDescriptor(object, prop) {
	    return Object.getOwnPropertyDescriptor(object, prop);
	}
	
	function createProxyFunction(prototype) {
		function ProxyFunction(){}
		ProxyFunction.prototype = prototype;
		return ProxyFunction;
	}
	function bezFunction(){
	
	    var easingFunctions = [];
	    var math = Math;
	
	    function pointOnLine2D(x1,y1, x2,y2, x3,y3){
	        var det1 = (x1*y2) + (y1*x3) + (x2*y3) - (x3*y2) - (y3*x1) - (x2*y1);
	        return det1 > -0.001 && det1 < 0.001;
	    }
	
	    function pointOnLine3D(x1,y1,z1, x2,y2,z2, x3,y3,z3){
	        if(z1 === 0 && z2 === 0 && z3 === 0) {
	            return pointOnLine2D(x1,y1, x2,y2, x3,y3);
	        }
	        var dist1 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) + Math.pow(z2 - z1, 2));
	        var dist2 = Math.sqrt(Math.pow(x3 - x1, 2) + Math.pow(y3 - y1, 2) + Math.pow(z3 - z1, 2));
	        var dist3 = Math.sqrt(Math.pow(x3 - x2, 2) + Math.pow(y3 - y2, 2) + Math.pow(z3 - z2, 2));
	        var diffDist;
	        if(dist1 > dist2){
	            if(dist1 > dist3){
	                diffDist = dist1 - dist2 - dist3;
	            } else {
	                diffDist = dist3 - dist2 - dist1;
	            }
	        } else if(dist3 > dist2){
	            diffDist = dist3 - dist2 - dist1;
	        } else {
	            diffDist = dist2 - dist1 - dist3;
	        }
	        return diffDist > -0.0001 && diffDist < 0.0001;
	    }
	
	    var getBezierLength = (function(){
	
	        return function(pt1,pt2,pt3,pt4){
	            var curveSegments = defaultCurveSegments;
	            var k;
	            var i, len;
	            var ptCoord,perc,addedLength = 0;
	            var ptDistance;
	            var point = [],lastPoint = [];
	            var lengthData = bezier_length_pool.newElement();
	            len = pt3.length;
	            for(k=0;k<curveSegments;k+=1){
	                perc = k/(curveSegments-1);
	                ptDistance = 0;
	                for(i=0;i<len;i+=1){
	                    ptCoord = bm_pow(1-perc,3)*pt1[i]+3*bm_pow(1-perc,2)*perc*pt3[i]+3*(1-perc)*bm_pow(perc,2)*pt4[i]+bm_pow(perc,3)*pt2[i];
	                    point[i] = ptCoord;
	                    if(lastPoint[i] !== null){
	                        ptDistance += bm_pow(point[i] - lastPoint[i],2);
	                    }
	                    lastPoint[i] = point[i];
	                }
	                if(ptDistance){
	                    ptDistance = bm_sqrt(ptDistance);
	                    addedLength += ptDistance;
	                }
	                lengthData.percents[k] = perc;
	                lengthData.lengths[k] = addedLength;
	            }
	            lengthData.addedLength = addedLength;
	            return lengthData;
	        };
	    }());
	
	    function getSegmentsLength(shapeData) {
	        var segmentsLength = segments_length_pool.newElement();
	        var closed = shapeData.c;
	        var pathV = shapeData.v;
	        var pathO = shapeData.o;
	        var pathI = shapeData.i;
	        var i, len = shapeData._length;
	        var lengths = segmentsLength.lengths;
	        var totalLength = 0;
	        for(i=0;i<len-1;i+=1){
	            lengths[i] = getBezierLength(pathV[i],pathV[i+1],pathO[i],pathI[i+1]);
	            totalLength += lengths[i].addedLength;
	        }
	        if(closed){
	            lengths[i] = getBezierLength(pathV[i],pathV[0],pathO[i],pathI[0]);
	            totalLength += lengths[i].addedLength;
	        }
	        segmentsLength.totalLength = totalLength;
	        return segmentsLength;
	    }
	
	    function BezierData(length){
	        this.segmentLength = 0;
	        this.points = new Array(length);
	    }
	
	    function PointData(partial,point){
	        this.partialLength = partial;
	        this.point = point;
	    }
	
	    var buildBezierData = (function(){
	
	        var storedData = {};
	
	        return function (keyData){
	            var pt1 = keyData.s;
	            var pt2 = keyData.e;
	            var pt3 = keyData.to;
	            var pt4 = keyData.ti;
	            var bezierName = (pt1[0]+'_'+pt1[1]+'_'+pt2[0]+'_'+pt2[1]+'_'+pt3[0]+'_'+pt3[1]+'_'+pt4[0]+'_'+pt4[1]).replace(/\./g, 'p');
	            if(storedData[bezierName]){
	                keyData.bezierData = storedData[bezierName];
	                return;
	            }
	            var curveSegments = defaultCurveSegments;
	            var k, i, len;
	            var ptCoord,perc,addedLength = 0;
	            var ptDistance;
	            var point,lastPoint = null;
	            if (pt1.length === 2 && (pt1[0] != pt2[0] || pt1[1] != pt2[1]) && pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt1[0]+pt3[0],pt1[1]+pt3[1]) && pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt2[0]+pt4[0],pt2[1]+pt4[1])){
	                curveSegments = 2;
	            }
	            var bezierData = new BezierData(curveSegments);
	            len = pt3.length;
	            for (k = 0; k < curveSegments; k += 1) {
	                point = createSizedArray(len);
	                perc = k / (curveSegments - 1);
	                ptDistance = 0;
	                for (i = 0; i < len; i += 1){
	                    ptCoord = bm_pow(1-perc,3)*pt1[i]+3*bm_pow(1-perc,2)*perc*(pt1[i] + pt3[i])+3*(1-perc)*bm_pow(perc,2)*(pt2[i] + pt4[i])+bm_pow(perc,3)*pt2[i];
	                    point[i] = ptCoord;
	                    if(lastPoint !== null){
	                        ptDistance += bm_pow(point[i] - lastPoint[i],2);
	                    }
	                }
	                ptDistance = bm_sqrt(ptDistance);
	                addedLength += ptDistance;
	                bezierData.points[k] = new PointData(ptDistance, point);
	                lastPoint = point;
	            }
	            bezierData.segmentLength = addedLength;
	            keyData.bezierData = bezierData;
	            storedData[bezierName] = bezierData;
	        };
	    }());
	
	    function getDistancePerc(perc,bezierData){
	        var percents = bezierData.percents;
	        var lengths = bezierData.lengths;
	        var len = percents.length;
	        var initPos = bm_floor((len-1)*perc);
	        var lengthPos = perc*bezierData.addedLength;
	        var lPerc = 0;
	        if(initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]){
	            return percents[initPos];
	        }else{
	            var dir = lengths[initPos] > lengthPos ? -1 : 1;
	            var flag = true;
	            while(flag){
	                if(lengths[initPos] <= lengthPos && lengths[initPos+1] > lengthPos){
	                    lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos+1] - lengths[initPos]);
	                    flag = false;
	                }else{
	                    initPos += dir;
	                }
	                if(initPos < 0 || initPos >= len - 1){
	                    //FIX for TypedArrays that don't store floating point values with enough accuracy
	                    if(initPos === len - 1) {
	                        return percents[initPos];
	                    }
	                    flag = false;
	                }
	            }
	            return percents[initPos] + (percents[initPos+1] - percents[initPos])*lPerc;
	        }
	    }
	
	    function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
	        var t1 = getDistancePerc(percent,bezierData);
	        var u0 = 1;
	        var u1 = 1 - t1;
	        var ptX = Math.round((u1*u1*u1* pt1[0] + (t1*u1*u1 + u1*t1*u1 + u1*u1*t1)* pt3[0] + (t1*t1*u1 + u1*t1*t1 + t1*u1*t1)*pt4[0] + t1*t1*t1* pt2[0])* 1000) / 1000;
	        var ptY = Math.round((u1*u1*u1* pt1[1] + (t1*u1*u1 + u1*t1*u1 + u1*u1*t1)* pt3[1] + (t1*t1*u1 + u1*t1*t1 + t1*u1*t1)*pt4[1] + t1*t1*t1* pt2[1])* 1000) / 1000;
	        return [ptX, ptY];
	    }
	
	    function getSegmentArray() {
	
	    }
	
	    var bezier_segment_points = createTypedArray('float32', 8);
	
	    function getNewSegment(pt1,pt2,pt3,pt4,startPerc,endPerc, bezierData){
	
	        startPerc = startPerc < 0 ? 0 : startPerc > 1 ? 1 : startPerc;
	        var t0 = getDistancePerc(startPerc,bezierData);
	        endPerc = endPerc > 1 ? 1 : endPerc;
	        var t1 = getDistancePerc(endPerc,bezierData);
	        var i, len = pt1.length;
	        var u0 = 1 - t0;
	        var u1 = 1 - t1;
	        var u0u0u0 = u0*u0*u0;
	        var t0u0u0_3 = t0*u0*u0*3; // t0*u0*u0 + u0*t0*u0 + u0*u0*t0
	        var t0t0u0_3 = t0*t0*u0*3; // t0*t0*u0 + u0*t0*t0 + t0*u0*t0
	        var t0t0t0 = t0*t0*t0;
	        //
	        var u0u0u1 = u0*u0*u1;
	        var t0u0u1_3 = t0*u0*u1 + u0*t0*u1 + u0*u0*t1;
	        var t0t0u1_3 = t0*t0*u1 + u0*t0*t1 + t0*u0*t1;
	        var t0t0t1 = t0*t0*t1;
	        //
	        var u0u1u1 = u0*u1*u1;
	        var t0u1u1_3 = t0*u1*u1 + u0*t1*u1 + u0*u1*t1;
	        var t0t1u1_3 = t0*t1*u1 + u0*t1*t1 + t0*u1*t1;
	        var t0t1t1 = t0*t1*t1;
	        //
	        var u1u1u1 = u1*u1*u1;
	        var t1u1u1_3 = t1*u1*u1 + u1*t1*u1 + u1*u1*t1;
	        var t1t1u1_3 = t1*t1*u1 + u1*t1*t1 + t1*u1*t1;
	        var t1t1t1 = t1*t1*t1;
	        //Math.round(num * 100) / 100
	        for(i=0;i<len;i+=1){
	            bezier_segment_points[i * 4] = Math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1000) / 1000;
	            bezier_segment_points[i * 4 + 1] = Math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1000) / 1000;
	            bezier_segment_points[i * 4 + 2] = Math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1000) / 1000;
	            bezier_segment_points[i * 4 + 3] = Math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1000) / 1000;
	            // pts.pt1[i] = Math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1000) / 1000;
	            // pts.pt3[i] = Math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1000) / 1000;
	            // pts.pt4[i] = Math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1000) / 1000;
	            // pts.pt2[i] = Math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1000) / 1000;
	            // pts.pt1[i] =  Math.round((u0*u0*u0* pt1[i] + (t0*u0*u0 + u0*t0*u0 + u0*u0*t0) * pt3[i] + (t0*t0*u0 + u0*t0*t0 + t0*u0*t0)* pt4[i] + t0*t0*t0* pt2[i])* 1000) / 1000;
	            // pts.pt3[i] = Math.round((u0*u0*u1*pt1[i] + (t0*u0*u1 + u0*t0*u1 + u0*u0*t1)* pt3[i] + (t0*t0*u1 + u0*t0*t1 + t0*u0*t1)* pt4[i] + t0*t0*t1* pt2[i])* 1000) / 1000;
	            // pts.pt4[i] = Math.round((u0*u1*u1* pt1[i] + (t0*u1*u1 + u0*t1*u1 + u0*u1*t1)* pt3[i] + (t0*t1*u1 + u0*t1*t1 + t0*u1*t1)* pt4[i] + t0*t1*t1* pt2[i])* 1000) / 1000;
	            // pts.pt2[i] = Math.round((u1*u1*u1* pt1[i] + (t1*u1*u1 + u1*t1*u1 + u1*u1*t1)* pt3[i] + (t1*t1*u1 + u1*t1*t1 + t1*u1*t1)*pt4[i] + t1*t1*t1* pt2[i])* 1000) / 1000;
	        }
	
	        return bezier_segment_points;
	    }
	
	    return {
	        //getEasingCurve : getEasingCurve,
	        getSegmentsLength : getSegmentsLength,
	        getNewSegment : getNewSegment,
	        getPointInSegment : getPointInSegment,
	        buildBezierData : buildBezierData,
	        pointOnLine2D : pointOnLine2D,
	        pointOnLine3D : pointOnLine3D
	    };
	}
	
	var bez = bezFunction();
	function dataFunctionManager(){
	
	    //var tCanvasHelper = createTag('canvas').getContext('2d');
	
	    function completeLayers(layers, comps, fontManager){
	        var layerData;
	        var animArray, lastFrame;
	        var i, len = layers.length;
	        var j, jLen, k, kLen;
	        for(i=0;i<len;i+=1){
	            layerData = layers[i];
	            if(!('ks' in layerData) || layerData.completed){
	                continue;
	            }
	            layerData.completed = true;
	            if(layerData.tt){
	                layers[i-1].td = layerData.tt;
	            }
	            animArray = [];
	            lastFrame = -1;
	            if(layerData.hasMask){
	                var maskProps = layerData.masksProperties;
	                jLen = maskProps.length;
	                for(j=0;j<jLen;j+=1){
	                    if(maskProps[j].pt.k.i){
	                        convertPathsToAbsoluteValues(maskProps[j].pt.k);
	                    }else{
	                        kLen = maskProps[j].pt.k.length;
	                        for(k=0;k<kLen;k+=1){
	                            if(maskProps[j].pt.k[k].s){
	                                convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);
	                            }
	                            if(maskProps[j].pt.k[k].e){
	                                convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);
	                            }
	                        }
	                    }
	                }
	            }
	            if(layerData.ty===0){
	                layerData.layers = findCompLayers(layerData.refId, comps);
	                completeLayers(layerData.layers,comps, fontManager);
	            }else if(layerData.ty === 4){
	                completeShapes(layerData.shapes);
	            }else if(layerData.ty == 5){
	                completeText(layerData, fontManager);
	            }
	        }
	    }
	
	    function findCompLayers(id,comps){
	        var i = 0, len = comps.length;
	        while(i<len){
	            if(comps[i].id === id){
	                if(!comps[i].layers.__used) {
	                    comps[i].layers.__used = true;
	                    return comps[i].layers;
	                }
	                return JSON.parse(JSON.stringify(comps[i].layers));
	            }
	            i += 1;
	        }
	    }
	
	    function completeShapes(arr){
	        var i, len = arr.length;
	        var j, jLen;
	        var hasPaths = false;
	        for(i=len-1;i>=0;i-=1){
	            if(arr[i].ty == 'sh'){
	                if(arr[i].ks.k.i){
	                    convertPathsToAbsoluteValues(arr[i].ks.k);
	                }else{
	                    jLen = arr[i].ks.k.length;
	                    for(j=0;j<jLen;j+=1){
	                        if(arr[i].ks.k[j].s){
	                            convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
	                        }
	                        if(arr[i].ks.k[j].e){
	                            convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
	                        }
	                    }
	                }
	                hasPaths = true;
	            }else if(arr[i].ty == 'gr'){
	                completeShapes(arr[i].it);
	            }
	        }
	        /*if(hasPaths){
	            //mx: distance
	            //ss: sensitivity
	            //dc: decay
	            arr.splice(arr.length-1,0,{
	                "ty": "ms",
	                "mx":20,
	                "ss":10,
	                 "dc":0.001,
	                "maxDist":200
	            });
	        }*/
	    }
	
	    function convertPathsToAbsoluteValues(path){
	        var i, len = path.i.length;
	        for(i=0;i<len;i+=1){
	            path.i[i][0] += path.v[i][0];
	            path.i[i][1] += path.v[i][1];
	            path.o[i][0] += path.v[i][0];
	            path.o[i][1] += path.v[i][1];
	        }
	    }
	
	    function checkVersion(minimum,animVersionString){
	        var animVersion = animVersionString ? animVersionString.split('.') : [100,100,100];
	        if(minimum[0]>animVersion[0]){
	            return true;
	        } else if(animVersion[0] > minimum[0]){
	            return false;
	        }
	        if(minimum[1]>animVersion[1]){
	            return true;
	        } else if(animVersion[1] > minimum[1]){
	            return false;
	        }
	        if(minimum[2]>animVersion[2]){
	            return true;
	        } else if(animVersion[2] > minimum[2]){
	            return false;
	        }
	    }
	
	    var checkText = (function(){
	        var minimumVersion = [4,4,14];
	
	        function updateTextLayer(textLayer){
	            var documentData = textLayer.t.d;
	            textLayer.t.d = {
	                k: [
	                    {
	                        s:documentData,
	                        t:0
	                    }
	                ]
	            };
	        }
	
	        function iterateLayers(layers){
	            var i, len = layers.length;
	            for(i=0;i<len;i+=1){
	                if(layers[i].ty === 5){
	                    updateTextLayer(layers[i]);
	                }
	            }
	        }
	
	        return function (animationData){
	            if(checkVersion(minimumVersion,animationData.v)){
	                iterateLayers(animationData.layers);
	                if(animationData.assets){
	                    var i, len = animationData.assets.length;
	                    for(i=0;i<len;i+=1){
	                        if(animationData.assets[i].layers){
	                            iterateLayers(animationData.assets[i].layers);
	
	                        }
	                    }
	                }
	            }
	        };
	    }());
	
	    var checkChars = (function() {
	        var minimumVersion = [4,7,99];
	        return function (animationData){
	            if(animationData.chars && !checkVersion(minimumVersion,animationData.v)){
	                var i, len = animationData.chars.length, j, jLen, k, kLen;
	                var pathData, paths;
	                for(i = 0; i < len; i += 1) {
	                    if(animationData.chars[i].data && animationData.chars[i].data.shapes) {
	                        paths = animationData.chars[i].data.shapes[0].it;
	                        jLen = paths.length;
	
	                        for(j = 0; j < jLen; j += 1) {
	                            pathData = paths[j].ks.k;
	                            if(!pathData.__converted) {
	                                convertPathsToAbsoluteValues(paths[j].ks.k);
	                                pathData.__converted = true;
	                            }
	                        }
	                    }
	                }
	            }
	        };
	    }());
	
	    var checkColors = (function(){
	        var minimumVersion = [4,1,9];
	
	        function iterateShapes(shapes){
	            var i, len = shapes.length;
	            var j, jLen;
	            for(i=0;i<len;i+=1){
	                if(shapes[i].ty === 'gr'){
	                    iterateShapes(shapes[i].it);
	                }else if(shapes[i].ty === 'fl' || shapes[i].ty === 'st'){
	                    if(shapes[i].c.k && shapes[i].c.k[0].i){
	                        jLen = shapes[i].c.k.length;
	                        for(j=0;j<jLen;j+=1){
	                            if(shapes[i].c.k[j].s){
	                                shapes[i].c.k[j].s[0] /= 255;
	                                shapes[i].c.k[j].s[1] /= 255;
	                                shapes[i].c.k[j].s[2] /= 255;
	                                shapes[i].c.k[j].s[3] /= 255;
	                            }
	                            if(shapes[i].c.k[j].e){
	                                shapes[i].c.k[j].e[0] /= 255;
	                                shapes[i].c.k[j].e[1] /= 255;
	                                shapes[i].c.k[j].e[2] /= 255;
	                                shapes[i].c.k[j].e[3] /= 255;
	                            }
	                        }
	                    } else {
	                        shapes[i].c.k[0] /= 255;
	                        shapes[i].c.k[1] /= 255;
	                        shapes[i].c.k[2] /= 255;
	                        shapes[i].c.k[3] /= 255;
	                    }
	                }
	            }
	        }
	
	        function iterateLayers(layers){
	            var i, len = layers.length;
	            for(i=0;i<len;i+=1){
	                if(layers[i].ty === 4){
	                    iterateShapes(layers[i].shapes);
	                }
	            }
	        }
	
	        return function (animationData){
	            if(checkVersion(minimumVersion,animationData.v)){
	                iterateLayers(animationData.layers);
	                if(animationData.assets){
	                    var i, len = animationData.assets.length;
	                    for(i=0;i<len;i+=1){
	                        if(animationData.assets[i].layers){
	                            iterateLayers(animationData.assets[i].layers);
	
	                        }
	                    }
	                }
	            }
	        };
	    }());
	
	    var checkShapes = (function(){
	        var minimumVersion = [4,4,18];
	
	
	
	        function completeShapes(arr){
	            var i, len = arr.length;
	            var j, jLen;
	            var hasPaths = false;
	            for(i=len-1;i>=0;i-=1){
	                if(arr[i].ty == 'sh'){
	                    if(arr[i].ks.k.i){
	                        arr[i].ks.k.c = arr[i].closed;
	                    }else{
	                        jLen = arr[i].ks.k.length;
	                        for(j=0;j<jLen;j+=1){
	                            if(arr[i].ks.k[j].s){
	                                arr[i].ks.k[j].s[0].c = arr[i].closed;
	                            }
	                            if(arr[i].ks.k[j].e){
	                                arr[i].ks.k[j].e[0].c = arr[i].closed;
	                            }
	                        }
	                    }
	                    hasPaths = true;
	                }else if(arr[i].ty == 'gr'){
	                    completeShapes(arr[i].it);
	                }
	            }
	        }
	
	        function iterateLayers(layers){
	            var layerData;
	            var i, len = layers.length;
	            var j, jLen, k, kLen;
	            for(i=0;i<len;i+=1){
	                layerData = layers[i];
	                if(layerData.hasMask){
	                    var maskProps = layerData.masksProperties;
	                    jLen = maskProps.length;
	                    for(j=0;j<jLen;j+=1){
	                        if(maskProps[j].pt.k.i){
	                            maskProps[j].pt.k.c = maskProps[j].cl;
	                        }else{
	                            kLen = maskProps[j].pt.k.length;
	                            for(k=0;k<kLen;k+=1){
	                                if(maskProps[j].pt.k[k].s){
	                                    maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;
	                                }
	                                if(maskProps[j].pt.k[k].e){
	                                    maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;
	                                }
	                            }
	                        }
	                    }
	                }
	                if(layerData.ty === 4){
	                    completeShapes(layerData.shapes);
	                }
	            }
	        }
	
	        return function (animationData){
	            if(checkVersion(minimumVersion,animationData.v)){
	                iterateLayers(animationData.layers);
	                if(animationData.assets){
	                    var i, len = animationData.assets.length;
	                    for(i=0;i<len;i+=1){
	                        if(animationData.assets[i].layers){
	                            iterateLayers(animationData.assets[i].layers);
	
	                        }
	                    }
	                }
	            }
	        };
	    }());
	
	    /*function blitPaths(path){
	        var i, len = path.i.length;
	        for(i=0;i<len;i+=1){
	            path.i[i][0] /= blitter;
	            path.i[i][1] /= blitter;
	            path.o[i][0] /= blitter;
	            path.o[i][1] /= blitter;
	            path.v[i][0] /= blitter;
	            path.v[i][1] /= blitter;
	        }
	    }
	
	    function blitShapes(arr){
	        var i, len = arr.length;
	        var j, jLen;
	        var hasPaths = false;
	        for(i=len-1;i>=0;i-=1){
	            if(arr[i].ty == 'sh'){
	                if(arr[i].ks.k.i){
	                    blitPaths(arr[i].ks.k);
	                }else{
	                    jLen = arr[i].ks.k.length;
	                    for(j=0;j<jLen;j+=1){
	                        if(arr[i].ks.k[j].s){
	                            blitPaths(arr[i].ks.k[j].s[0]);
	                        }
	                        if(arr[i].ks.k[j].e){
	                            blitPaths(arr[i].ks.k[j].e[0]);
	                        }
	                    }
	                }
	                hasPaths = true;
	            }else if(arr[i].ty == 'gr'){
	                blitShapes(arr[i].it);
	            }else if(arr[i].ty == 'rc'){
	                blitProperty(arr[i].p);
	                blitProperty(arr[i].s);
	            }else if(arr[i].ty == 'st'){
	                blitProperty(arr[i].w);
	            }else if(arr[i].ty == 'tr'){
	                blitProperty(arr[i].p);
	                blitProperty(arr[i].sk);
	                blitProperty(arr[i].a);
	            }else if(arr[i].ty == 'el'){
	                blitProperty(arr[i].p);
	                blitProperty(arr[i].s);
	            }else if(arr[i].ty == 'rd'){
	                blitProperty(arr[i].r);
	            }else{
	
	            }
	        }
	    }
	
	    function blitText(data, fontManager){
	
	    }
	
	    function blitValue(val){
	        if(typeof(val) === 'number'){
	            val /= blitter;
	        } else {
	            var i = val.length-1;
	            while(i>=0){
	                val[i] /= blitter;
	                i-=1;
	            }
	        }
	        return val;
	    }
	
	    function blitProperty(data){
	        if(!data.k.length){
	            data.k = blitValue(data.k);
	        }else if(typeof(data.k[0]) === 'number'){
	            data.k = blitValue(data.k);
	        } else {
	            var i, len = data.k.length;
	            for(i=0;i<len;i+=1){
	                if(data.k[i].s){
	                    data.k[i].s = blitValue(data.k[i].s);
	                }
	                if(data.k[i].e){
	                    data.k[i].e = blitValue(data.k[i].e);
	                }
	            }
	        }
	    }
	
	    function blitLayers(layers,comps, fontManager){
	        var layerData;
	        var animArray, lastFrame;
	        var i, len = layers.length;
	        var j, jLen, k, kLen;
	        for(i=0;i<len;i+=1){
	            layerData = layers[i];
	            if(!('ks' in layerData)){
	                continue;
	            }
	            blitProperty(layerData.ks.a);
	            blitProperty(layerData.ks.p);
	            layerData.completed = true;
	            if(layerData.tt){
	                layers[i-1].td = layerData.tt;
	            }
	            animArray = [];
	            lastFrame = -1;
	            if(layerData.hasMask){
	                var maskProps = layerData.masksProperties;
	                jLen = maskProps.length;
	                for(j=0;j<jLen;j+=1){
	                    if(maskProps[j].pt.k.i){
	                        blitPaths(maskProps[j].pt.k);
	                    }else{
	                        kLen = maskProps[j].pt.k.length;
	                        for(k=0;k<kLen;k+=1){
	                            if(maskProps[j].pt.k[k].s){
	                                blitPaths(maskProps[j].pt.k[k].s[0]);
	                            }
	                            if(maskProps[j].pt.k[k].e){
	                                blitPaths(maskProps[j].pt.k[k].e[0]);
	                            }
	                        }
	                    }
	                }
	            }
	            if(layerData.ty===0){
	                layerData.w = Math.round(layerData.w/blitter);
	                layerData.h = Math.round(layerData.h/blitter);
	                blitLayers(layerData.layers,comps, fontManager);
	            }else if(layerData.ty === 4){
	                blitShapes(layerData.shapes);
	            }else if(layerData.ty == 5){
	                blitText(layerData, fontManager);
	            }else if(layerData.ty == 1){
	                layerData.sh /= blitter;
	                layerData.sw /= blitter;
	            } else {
	            }
	        }
	    }
	
	    function blitAnimation(animationData,comps, fontManager){
	        blitLayers(animationData.layers,comps, fontManager);
	    }*/
	
	    function completeData(animationData, fontManager){
	        if(animationData.__complete){
	            return;
	        }
	        checkColors(animationData);
	        checkText(animationData);
	        checkChars(animationData);
	        checkShapes(animationData);
	        completeLayers(animationData.layers, animationData.assets, fontManager);
	        animationData.__complete = true;
	        //blitAnimation(animationData, animationData.assets, fontManager);
	    }
	
	    function completeText(data, fontManager){
	        if(data.t.a.length === 0 && !('m' in data.t.p)){
	            data.singleShape = true;
	        }
	    }
	
	    var moduleOb = {};
	    moduleOb.completeData = completeData;
	
	    return moduleOb;
	}
	
	var dataManager = dataFunctionManager();
	var FontManager = (function(){
	
	    var maxWaitingTime = 5000;
	    var emptyChar = {
	        w: 0,
	        size:0,
	        shapes:[]
	    };
	    var combinedCharacters = [];
	    //Hindi characters
	    combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366
	    , 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379
	    , 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);
	
	    function setUpNode(font, family){
	        var parentNode = createTag('span');
	        parentNode.style.fontFamily    = family;
	        var node = createTag('span');
	        // Characters that vary significantly among different fonts
	        node.innerHTML = 'giItT1WQy@!-/#';
	        // Visible - so we can measure it - but not on the screen
	        parentNode.style.position      = 'absolute';
	        parentNode.style.left          = '-10000px';
	        parentNode.style.top           = '-10000px';
	        // Large font size makes even subtle changes obvious
	        parentNode.style.fontSize      = '300px';
	        // Reset any font properties
	        parentNode.style.fontVariant   = 'normal';
	        parentNode.style.fontStyle     = 'normal';
	        parentNode.style.fontWeight    = 'normal';
	        parentNode.style.letterSpacing = '0';
	        parentNode.appendChild(node);
	        document.body.appendChild(parentNode);
	
	        // Remember width with no applied web font
	        var width = node.offsetWidth;
	        node.style.fontFamily = font + ', '+family;
	        return {node:node, w:width, parent:parentNode};
	    }
	
	    function checkLoadedFonts() {
	        var i, len = this.fonts.length;
	        var node, w;
	        var loadedCount = len;
	        for(i=0;i<len; i+= 1){
	            if(this.fonts[i].loaded){
	                loadedCount -= 1;
	                continue;
	            }
	            if(this.fonts[i].fOrigin === 't' || this.fonts[i].origin === 2){
	                if(window.Typekit && window.Typekit.load && this.typekitLoaded === 0){
	                    this.typekitLoaded = 1;
	                    try{window.Typekit.load({
	                        async: true,
	                        active: function() {
	                            this.typekitLoaded = 2;
	                        }.bind(this)
	                    });}catch(e){}
	                }
	                if(this.typekitLoaded === 2) {
	                    this.fonts[i].loaded = true;
	                }
	            } else if(this.fonts[i].fOrigin === 'n' || this.fonts[i].origin === 0){
	                this.fonts[i].loaded = true;
	            } else{
	                node = this.fonts[i].monoCase.node;
	                w = this.fonts[i].monoCase.w;
	                if(node.offsetWidth !== w){
	                    loadedCount -= 1;
	                    this.fonts[i].loaded = true;
	                }else{
	                    node = this.fonts[i].sansCase.node;
	                    w = this.fonts[i].sansCase.w;
	                    if(node.offsetWidth !== w){
	                        loadedCount -= 1;
	                        this.fonts[i].loaded = true;
	                    }
	                }
	                if(this.fonts[i].loaded){
	                    this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);
	                    this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);
	                }
	            }
	        }
	
	        if(loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime){
	            setTimeout(checkLoadedFonts.bind(this),20);
	        }else{
	            setTimeout(function(){this.loaded = true;}.bind(this),0);
	
	        }
	    }
	
	    function createHelper(def, fontData){
	        var tHelper = createNS('text');
	        tHelper.style.fontSize = '100px';
	        //tHelper.style.fontFamily = fontData.fFamily;
	        tHelper.setAttribute('font-family', fontData.fFamily);
	        tHelper.setAttribute('font-style', fontData.fStyle);
	        tHelper.setAttribute('font-weight', fontData.fWeight);
	        tHelper.textContent = '1';
	        if(fontData.fClass){
	            tHelper.style.fontFamily = 'inherit';
	            tHelper.className = fontData.fClass;
	        } else {
	            tHelper.style.fontFamily = fontData.fFamily;
	        }
	        def.appendChild(tHelper);
	        var tCanvasHelper = createTag('canvas').getContext('2d');
	        tCanvasHelper.font = fontData.fWeight + ' ' + fontData.fStyle + ' 100px '+ fontData.fFamily;
	        //tCanvasHelper.font = ' 100px '+ fontData.fFamily;
	        return tHelper;
	    }
	
	    function addFonts(fontData, defs){
	        if(!fontData){
	            this.loaded = true;
	            return;
	        }
	        if(this.chars){
	            this.loaded = true;
	            this.fonts = fontData.list;
	            return;
	        }
	
	
	        var fontArr = fontData.list;
	        var i, len = fontArr.length;
	        for(i=0; i<len; i+= 1){
	            fontArr[i].loaded = false;
	            fontArr[i].monoCase = setUpNode(fontArr[i].fFamily,'monospace');
	            fontArr[i].sansCase = setUpNode(fontArr[i].fFamily,'sans-serif');
	            if(!fontArr[i].fPath) {
	                fontArr[i].loaded = true;
	            }else if(fontArr[i].fOrigin === 'p' || fontArr[i].origin === 3){
	                var s = createTag('style');
	                s.type = "text/css";
	                s.innerHTML = "@font-face {" + "font-family: "+fontArr[i].fFamily+"; font-style: normal; src: url('"+fontArr[i].fPath+"');}";
	                defs.appendChild(s);
	            } else if(fontArr[i].fOrigin === 'g' || fontArr[i].origin === 1){
	                //<link href='https://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet' type='text/css'>
	                var l = createTag('link');
	                l.type = "text/css";
	                l.rel = "stylesheet";
	                l.href = fontArr[i].fPath;
	                //defs.appendChild(l);
	                document.body.appendChild(l);
	            } else if(fontArr[i].fOrigin === 't' || fontArr[i].origin === 2){
	                //<link href='https://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet' type='text/css'>
	                var sc = createTag('script');
	                sc.setAttribute('src',fontArr[i].fPath);
	                defs.appendChild(sc);
	            }
	            fontArr[i].helper = createHelper(defs,fontArr[i]);
	            fontArr[i].cache = {};
	            this.fonts.push(fontArr[i]);
	        }
	        //On some cases the font even if it is loaded, it won't load correctly when measuring text on canvas.
	        //Adding this timeout seems to fix it
	       setTimeout(function() {
	            checkLoadedFonts.bind(this)();
	        }.bind(this), 100);
	    }
	
	    function addChars(chars){
	        if(!chars){
	            return;
	        }
	        if(!this.chars){
	            this.chars = [];
	        }
	        var i, len = chars.length;
	        var j, jLen = this.chars.length, found;
	        for(i=0;i<len;i+=1){
	            j = 0;
	            found = false;
	            while(j<jLen){
	                if(this.chars[j].style === chars[i].style && this.chars[j].fFamily === chars[i].fFamily && this.chars[j].ch === chars[i].ch){
	                    found = true;
	                }
	                j += 1;
	            }
	            if(!found){
	                this.chars.push(chars[i]);
	                jLen += 1;
	            }
	        }
	    }
	
	    function getCharData(char, style, font){
	        var i = 0, len = this.chars.length;
	        while( i < len) {
	            if(this.chars[i].ch === char && this.chars[i].style === style && this.chars[i].fFamily === font){
	                return this.chars[i];
	            }
	            i+= 1;
	        }
	        if(console && console.warn) {
	            console.warn('Missing character from exported characters list: ', char, style, font);
	        }
	        return emptyChar;
	    }
	
	    function measureText(char, fontName, size) {
	        var fontData = this.getFontByName(fontName);
	        var index = char.charCodeAt(0);
	        if(!fontData.cache[index + 1]) {
	            var tHelper = fontData.helper;
	            //Canvas version
	            //fontData.cache[index] = tHelper.measureText(char).width / 100;
	            //SVG version
	            //console.log(tHelper.getBBox().width)
	            /*tHelper.textContent = '|' + char + '|';
	            var doubleSize = tHelper.getComputedTextLength();
	            tHelper.textContent = '||';
	            var singleSize = tHelper.getComputedTextLength();
	            fontData.cache[index + 1] = (doubleSize - singleSize)/100;*/
	           
	            tHelper.textContent = char;
	            fontData.cache[index + 1] = (tHelper.getComputedTextLength())/100;
	        }
	        return fontData.cache[index + 1] * size;
	    }
	
	    function getFontByName(name){
	        var i = 0, len = this.fonts.length;
	        while(i<len){
	            if(this.fonts[i].fName === name) {
	                return this.fonts[i];
	            }
	            i += 1;
	        }
	        return this.fonts[0];
	    }
	
	    function getCombinedCharacterCodes() {
	        return combinedCharacters;
	    }
	
	    var Font = function(){
	        this.fonts = [];
	        this.chars = null;
	        this.typekitLoaded = 0;
	        this.loaded = false;
	        this.initTime = Date.now();
	    };
	    //TODO: for now I'm adding these methods to the Class and not the prototype. Think of a better way to implement it. 
	    Font.getCombinedCharacterCodes = getCombinedCharacterCodes;
	
	    Font.prototype.addChars = addChars;
	    Font.prototype.addFonts = addFonts;
	    Font.prototype.getCharData = getCharData;
	    Font.prototype.getFontByName = getFontByName;
	    Font.prototype.measureText = measureText;
	
	    return Font;
	
	}());
	var PropertyFactory = (function(){
	
	    var initFrame = initialDefaultFrame;
	
	    function interpolateValue(frameNum, caching){
	        var offsetTime = this.offsetTime;
	        var newValue;
	        if(this.propType === 'multidimensional') {
	            newValue = createTypedArray('float32', this.pv.length);
	        }
	        var iterationIndex = caching.lastIndex;
	        var i = iterationIndex;
	        var len = this.keyframes.length- 1,flag = true;
	        var keyData, nextKeyData;
	
	        while(flag){
	            keyData = this.keyframes[i];
	            nextKeyData = this.keyframes[i+1];
	            if(i == len-1 && frameNum >= nextKeyData.t - offsetTime){
	                if(keyData.h){
	                    keyData = nextKeyData;
	                }
	                iterationIndex = 0;
	                break;
	            }
	            if((nextKeyData.t - offsetTime) > frameNum){
	                iterationIndex = i;
	                break;
	            }
	            if(i < len - 1){
	                i += 1;
	            }else{
	                iterationIndex = 0;
	                flag = false;
	            }
	        }
	
	        var k, kLen,perc,jLen, j, fnc;
	        if(keyData.to){
	
	            if(!keyData.bezierData){
	                bez.buildBezierData(keyData);
	            }
	            var bezierData = keyData.bezierData;
	            if(frameNum >= nextKeyData.t-offsetTime || frameNum < keyData.t-offsetTime){
	                var ind = frameNum >= nextKeyData.t-offsetTime ? bezierData.points.length - 1 : 0;
	                kLen = bezierData.points[ind].point.length;
	                for(k = 0; k < kLen; k += 1){
	                    newValue[k] = bezierData.points[ind].point[k];
	                }
	                caching._lastBezierData = null;
	            }else{
	                if(keyData.__fnct){
	                    fnc = keyData.__fnct;
	                }else{
	                    fnc = BezierFactory.getBezierEasing(keyData.o.x,keyData.o.y,keyData.i.x,keyData.i.y,keyData.n).get;
	                    keyData.__fnct = fnc;
	                }
	                perc = fnc((frameNum-(keyData.t-offsetTime))/((nextKeyData.t-offsetTime)-(keyData.t-offsetTime)));
	                var distanceInLine = bezierData.segmentLength*perc;
	
	                var segmentPerc;
	                var addedLength =  (caching.lastFrame < frameNum && caching._lastBezierData === bezierData) ? caching._lastAddedLength : 0;
	                j =  (caching.lastFrame < frameNum && caching._lastBezierData === bezierData) ? caching._lastPoint : 0;
	                flag = true;
	                jLen = bezierData.points.length;
	                while(flag){
	                    addedLength +=bezierData.points[j].partialLength;
	                    if(distanceInLine === 0 || perc === 0 || j == bezierData.points.length - 1){
	                        kLen = bezierData.points[j].point.length;
	                        for(k=0;k<kLen;k+=1){
	                            newValue[k] = bezierData.points[j].point[k];
	                        }
	                        break;
	                    }else if(distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j+1].partialLength){
	                        segmentPerc = (distanceInLine-addedLength)/(bezierData.points[j+1].partialLength);
	                        kLen = bezierData.points[j].point.length;
	                        for(k=0;k<kLen;k+=1){
	                            newValue[k] = bezierData.points[j].point[k] + (bezierData.points[j+1].point[k] - bezierData.points[j].point[k])*segmentPerc;
	                        }
	                        break;
	                    }
	                    if(j < jLen - 1){
	                        j += 1;
	                    }else{
	                        flag = false;
	                    }
	                }
	                caching._lastPoint = j;
	                caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
	                caching._lastBezierData = bezierData;
	            }
	        }else{
	            var outX,outY,inX,inY, keyValue;
	            len = keyData.s.length;
	            if(this.sh && keyData.h !== 1) {
	                if(frameNum >= nextKeyData.t-offsetTime){
	                    newValue[0] = keyData.e[0];
	                    newValue[1] = keyData.e[1];
	                    newValue[2] = keyData.e[2];
	                }else if(frameNum <= keyData.t-offsetTime){
	                    newValue[0] = keyData.s[0];
	                    newValue[1] = keyData.s[1];
	                    newValue[2] = keyData.s[2];
	                }else{
	                    var quatStart = createQuaternion(keyData.s);
	                    var quatEnd = createQuaternion(keyData.e);
	                    var time = (frameNum-(keyData.t-offsetTime))/((nextKeyData.t-offsetTime)-(keyData.t-offsetTime));
	                    quaternionToEuler(newValue, slerp(quatStart, quatEnd, time));
	                }
	                
	            } else {
	                for(i=0;i<len;i+=1){
	                    if(keyData.h !== 1){
	                        if(frameNum >= nextKeyData.t-offsetTime){
	                            perc = 1;
	                        }else if(frameNum < keyData.t-offsetTime){
	                            perc = 0;
	                        }else{
	                            if(keyData.o.x.constructor === Array){
	                                if(!keyData.__fnct){
	                                    keyData.__fnct = [];
	                                }
	                                if (!keyData.__fnct[i]) {
	                                    outX = keyData.o.x[i] || keyData.o.x[0];
	                                    outY = keyData.o.y[i] || keyData.o.y[0];
	                                    inX = keyData.i.x[i] || keyData.i.x[0];
	                                    inY = keyData.i.y[i] || keyData.i.y[0];
	                                    fnc = BezierFactory.getBezierEasing(outX,outY,inX,inY).get;
	                                    keyData.__fnct[i] = fnc;
	                                } else {
	                                    fnc = keyData.__fnct[i];
	                                }
	                            } else {
	                                if (!keyData.__fnct) {
	                                    outX = keyData.o.x;
	                                    outY = keyData.o.y;
	                                    inX = keyData.i.x;
	                                    inY = keyData.i.y;
	                                    fnc = BezierFactory.getBezierEasing(outX,outY,inX,inY).get;
	                                    keyData.__fnct = fnc;
	                                } else{
	                                    fnc = keyData.__fnct;
	                                }
	                            }
	                            perc = fnc((frameNum-(keyData.t-offsetTime))/((nextKeyData.t-offsetTime)-(keyData.t-offsetTime)));
	                        }
	                    }
	
	                    keyValue = keyData.h === 1 ? keyData.s[i] : keyData.s[i]+(keyData.e[i]-keyData.s[i])*perc;
	
	                    if(len === 1){
	                        newValue = keyValue;
	                    }else{
	                        newValue[i] = keyValue;
	                    }
	                }
	            }
	        }
	        caching.lastIndex = iterationIndex;
	        return newValue;
	    }
	
	    //based on @Toji's https://github.com/toji/gl-matrix/
	    function slerp(a, b, t) {
	        var out = [];
	        var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = b[0], by = b[1], bz = b[2], bw = b[3]
	
	        var omega, cosom, sinom, scale0, scale1;
	
	        cosom = ax * bx + ay * by + az * bz + aw * bw;
	        if (cosom < 0.0) {
	            cosom = -cosom;
	            bx = -bx;
	            by = -by;
	            bz = -bz;
	            bw = -bw;
	        }
	        if ((1.0 - cosom) > 0.000001) {
	            omega = Math.acos(cosom);
	            sinom = Math.sin(omega);
	            scale0 = Math.sin((1.0 - t) * omega) / sinom;
	            scale1 = Math.sin(t * omega) / sinom;
	        } else {
	            scale0 = 1.0 - t;
	            scale1 = t;
	        }
	        out[0] = scale0 * ax + scale1 * bx;
	        out[1] = scale0 * ay + scale1 * by;
	        out[2] = scale0 * az + scale1 * bz;
	        out[3] = scale0 * aw + scale1 * bw;
	
	        return out;
	    }
	
	    function quaternionToEuler(out, quat) {
	        var qx = quat[0];
	        var qy = quat[1];
	        var qz = quat[2];
	        var qw = quat[3];
	        var heading = Math.atan2(2*qy*qw-2*qx*qz , 1 - 2*qy*qy - 2*qz*qz)
	        var attitude = Math.asin(2*qx*qy + 2*qz*qw) 
	        var bank = Math.atan2(2*qx*qw-2*qy*qz , 1 - 2*qx*qx - 2*qz*qz);
	        out[0] = heading/degToRads;
	        out[1] = attitude/degToRads;
	        out[2] = bank/degToRads;
	    }
	
	    function createQuaternion(values) {
	        var heading = values[0] * degToRads;
	        var attitude = values[1] * degToRads;
	        var bank = values[2] * degToRads;
	        var c1 = Math.cos(heading / 2);
	        var c2 = Math.cos(attitude / 2);
	        var c3 = Math.cos(bank / 2);
	        var s1 = Math.sin(heading / 2);
	        var s2 = Math.sin(attitude / 2);
	        var s3 = Math.sin(bank / 2);
	        var w = c1 * c2 * c3 - s1 * s2 * s3;
	        var x = s1 * s2 * c3 + c1 * c2 * s3;
	        var y = s1 * c2 * c3 + c1 * s2 * s3;
	        var z = c1 * s2 * c3 - s1 * c2 * s3;
	
	        return [x,y,z,w];
	    }
	
	    function getValueAtCurrentTime(){
	        var frameNum = this.comp.renderedFrame - this.offsetTime;
	        var initTime = this.keyframes[0].t - this.offsetTime;
	        var endTime = this.keyframes[this.keyframes.length- 1].t-this.offsetTime;
	        if(!(frameNum === this._caching.lastFrame || (this._caching.lastFrame !== initFrame && ((this._caching.lastFrame >= endTime && frameNum >= endTime) || (this._caching.lastFrame < initTime && frameNum < initTime))))){
	            this._caching.lastIndex = this._caching.lastFrame < frameNum ? this._caching.lastIndex : 0;
	            var renderResult = this.interpolateValue(frameNum, this._caching);
	            this.pv = renderResult;
	        }
	        this._caching.lastFrame = frameNum;
	        return this.pv;
	    }
	
	    function getNoValue(){
	        this._mdf = false;
	    }
	
	    function setVValue(val) {
	        var multipliedValue;
	        if(this.propType === 'unidimensional') {
	            multipliedValue = val * this.mult;
	            if(Math.abs(this.v - multipliedValue) > 0.00001) {
	                this.v = multipliedValue;
	                this._mdf = true;
	            }
	        } else {
	            var i = 0, len = this.v.length;
	            while (i < len) {
	                multipliedValue = val[i] * this.mult;
	                if (Math.abs(this.v[i] - multipliedValue) > 0.00001) {
	                    this.v[i] = multipliedValue;
	                    this._mdf = true;
	                }
	                i += 1;
	            }
	        }
	    }
	
	    function processEffectsSequence() {
	        if(this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
	            return;
	        }        
	        if(this.lock) {
	            this.setVValue(this.pv);
	            return;
	        }
	        this.lock = true;
	        this._mdf = this._isFirstFrame;
	        var multipliedValue;
	        var i, len = this.effectsSequence.length;
	        var finalValue = this.kf ? this.pv : this.data.k;
	        for(i = 0; i < len; i += 1) {
	            finalValue = this.effectsSequence[i](finalValue);
	        }
	        this.setVValue(finalValue);
	        this._isFirstFrame = false;
	        this.lock = false;
	        this.frameId = this.elem.globalData.frameId;
	    }
	
	    function addEffect(effectFunction) {
	        this.effectsSequence.push(effectFunction);
	        this.container.addDynamicProperty(this);
	    }
	
	    function ValueProperty(elem, data, mult, container){
	        this.propType = 'unidimensional';
	        this.mult = mult || 1;
	        this.data = data;
	        this.v = mult ? data.k * mult : data.k;
	        this.pv = data.k;
	        this._mdf = false;
	        this.elem = elem;
	        this.container = container;
	        this.comp = elem.comp;
	        this.k = false;
	        this.kf = false;
	        this.vel = 0;
	        this.effectsSequence = [];
	        this._isFirstFrame = true;
	        this.getValue = processEffectsSequence;
	        this.setVValue = setVValue;
	        this.addEffect = addEffect;
	    }
	
	    function MultiDimensionalProperty(elem, data, mult, container) {
	        this.propType = 'multidimensional';
	        this.mult = mult || 1;
	        this.data = data;
	        this._mdf = false;
	        this.elem = elem;
	        this.container = container;
	        this.comp = elem.comp;
	        this.k = false;
	        this.kf = false;
	        this.frameId = -1;
	        var i, len = data.k.length;
	        this.v = createTypedArray('float32', len);
	        this.pv = createTypedArray('float32', len);
	        var arr = createTypedArray('float32', len);
	        this.vel = createTypedArray('float32', len);
	        for (i = 0; i < len; i += 1) {
	            this.v[i] = data.k[i] * this.mult;
	            this.pv[i] = data.k[i];
	        }
	        this._isFirstFrame = true;
	        this.effectsSequence = [];
	        this.getValue = processEffectsSequence;
	        this.setVValue = setVValue;
	        this.addEffect = addEffect;
	    }
	
	    function KeyframedValueProperty(elem, data, mult, container) {
	        this.propType = 'unidimensional';
	        this.keyframes = data.k;
	        this.offsetTime = elem.data.st;
	        this.frameId = -1;
	        this._caching = {lastFrame: initFrame, lastIndex: 0, value: 0};
	        this.k = true;
	        this.kf = true;
	        this.data = data;
	        this.mult = mult || 1;
	        this.elem = elem;
	        this.container = container;
	        this.comp = elem.comp;
	        this.v = initFrame;
	        this.pv = initFrame;
	        this._isFirstFrame = true;
	        this.getValue = processEffectsSequence;
	        this.setVValue = setVValue;
	        this.interpolateValue = interpolateValue;
	        this.effectsSequence = [getValueAtCurrentTime.bind(this)];
	        this.addEffect = addEffect;
	    }
	
	    function KeyframedMultidimensionalProperty(elem, data, mult, container){
	        this.propType = 'multidimensional';
	        var i, len = data.k.length;
	        var s, e,to,ti;
	        for (i = 0; i < len - 1; i += 1) {
	            if (data.k[i].to && data.k[i].s && data.k[i].e) {
	                s = data.k[i].s;
	                e = data.k[i].e;
	                to = data.k[i].to;
	                ti = data.k[i].ti;
	                if((s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0],s[1],e[0],e[1],s[0] + to[0],s[1] + to[1]) && bez.pointOnLine2D(s[0],s[1],e[0],e[1],e[0] + ti[0],e[1] + ti[1])) || (s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],s[0] + to[0],s[1] + to[1],s[2] + to[2]) && bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],e[0] + ti[0],e[1] + ti[1],e[2] + ti[2]))){
	                    data.k[i].to = null;
	                    data.k[i].ti = null;
	                }
	                if(s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
	                    if(s.length === 2 || (s[2] === e[2] && to[2] === 0 && ti[2] === 0)) {
	                        data.k[i].to = null;
	                        data.k[i].ti = null;
	                    }
	                }
	            }
	        }
	        this.effectsSequence = [getValueAtCurrentTime.bind(this)];
	        this.keyframes = data.k;
	        this.offsetTime = elem.data.st;
	        this.k = true;
	        this.kf = true;
	        this._isFirstFrame = true;
	        this.mult = mult || 1;
	        this.elem = elem;
	        this.container = container;
	        this.comp = elem.comp;
	        this.getValue = processEffectsSequence;
	        this.setVValue = setVValue;
	        this.interpolateValue = interpolateValue;
	        this.frameId = -1;
	        var arrLen = data.k[0].s.length;
	        this.v = createTypedArray('float32', arrLen);
	        this.pv = createTypedArray('float32', arrLen);
	        for (i = 0; i < arrLen; i += 1) {
	            this.v[i] = initFrame;
	            this.pv[i] = initFrame;
	        }
	        this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray('float32', arrLen)};
	        this.addEffect = addEffect;
	    }
	
	    function getProp(elem,data,type, mult, container) {
	        var p;
	        if(data.a === 0){
	            if(type === 0) {
	                p = new ValueProperty(elem,data,mult, container);
	            } else {
	                p = new MultiDimensionalProperty(elem,data, mult, container);
	            }
	        } else if(data.a === 1){
	            if(type === 0) {
	                p = new KeyframedValueProperty(elem,data,mult, container);
	            } else {
	                p = new KeyframedMultidimensionalProperty(elem,data, mult, container);
	            }
	        } else if(!data.k.length){
	            p = new ValueProperty(elem,data, mult, container);
	        }else if(typeof(data.k[0]) === 'number'){
	            p = new MultiDimensionalProperty(elem,data, mult, container);
	        }else{
	            switch(type){
	                case 0:
	                    p = new KeyframedValueProperty(elem,data,mult, container);
	                    break;
	                case 1:
	                    p = new KeyframedMultidimensionalProperty(elem,data,mult, container);
	                    break;
	            }
	        }
	        if(p.effectsSequence.length){
	            container.addDynamicProperty(p);
	        }
	        return p;
	    }
	
	    var ob = {
	        getProp: getProp
	    };
	    return ob;
	}());
	var TransformPropertyFactory = (function() {
	
	    function searchDynamicProperties() {
	        var i, len = this.dynamicProperties.length;
	        for(i = 0; i < len; i += 1) {
	            this.dynamicProperties[i].getValue();
	            if (this.dynamicProperties[i]._mdf) {
	                this._mdf = true;
	            }
	        }
	    }
	
	    function applyToMatrix(mat) {
	        this.searchDynamicProperties();
	        if (this.a) {
	            mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
	        }
	        if (this.s) {
	            mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
	        }
	        if (this.sk) {
	            mat.skewFromAxis(-this.sk.v, this.sa.v);
	        }
	        if (this.r) {
	            mat.rotate(-this.r.v);
	        } else {
	            mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
	        }
	        if (this.data.p.s) {
	            if (this.data.p.z) {
	                mat.translate(this.px.v, this.py.v, -this.pz.v);
	            } else {
	                mat.translate(this.px.v, this.py.v, 0);
	            }
	        } else {
	            mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
	        }
	    }
	    function processKeys(forceRender){
	        if (this.elem.globalData.frameId === this.frameId) {
	            return;
	        }
	
	        this._mdf = false;
	        this.searchDynamicProperties();
	
	        if (this._mdf || forceRender) {
	            this.v.reset();
	            if (this.a) {
	                this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
	            }
	            if(this.s) {
	                this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
	            }
	            if (this.sk) {
	                this.v.skewFromAxis(-this.sk.v, this.sa.v);
	            }
	            if (this.r) {
	                this.v.rotate(-this.r.v);
	            } else {
	                this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
	            }
	            if (this.autoOriented && this.p.keyframes && this.p.getValueAtTime) {
	                var v1,v2;
	                if (this.p._caching.lastFrame+this.p.offsetTime <= this.p.keyframes[0].t) {
	                    v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / this.elem.globalData.frameRate,0);
	                    v2 = this.p.getValueAtTime(this.p.keyframes[0].t / this.elem.globalData.frameRate, 0);
	                } else if(this.p._caching.lastFrame+this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
	                    v1 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t / this.elem.globalData.frameRate), 0);
	                    v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.01) / this.elem.globalData.frameRate, 0);
	                } else {
	                    v1 = this.p.pv;
	                    v2 = this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime - 0.01) / this.elem.globalData.frameRate, this.p.offsetTime);
	                }
	                this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
	            }
	            if(this.data.p.s){
	                if(this.data.p.z) {
	                    this.v.translate(this.px.v, this.py.v, -this.pz.v);
	                } else {
	                    this.v.translate(this.px.v, this.py.v, 0);
	                }
	            }else{
	                this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2]);
	            }
	        }
	        this.frameId = this.elem.globalData.frameId;
	    }
	
	    function setInverted(){
	        this.inverted = true;
	        this.iv = new Matrix();
	        if(!this.k){
	            if(this.data.p.s){
	                this.iv.translate(this.px.v,this.py.v,-this.pz.v);
	            }else{
	                this.iv.translate(this.p.v[0],this.p.v[1],-this.p.v[2]);
	            }
	            if(this.r){
	                this.iv.rotate(-this.r.v);
	            }else{
	                this.iv.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
	            }
	            if(this.s){
	                this.iv.scale(this.s.v[0],this.s.v[1],1);
	            }
	            if(this.a){
	                this.iv.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]);
	            }
	        }
	    }
	
	    function autoOrient(){
	        //
	        //var prevP = this.getValueAtTime();
	    }
	
	    function TransformProperty(elem,data,container){
	        this.elem = elem;
	        this.frameId = -1;
	        this.propType = 'transform';
	        this.container = container || elem;
	        this.dynamicProperties = [];
	        this._mdf = false;
	        this.data = data;
	        this.v = new Matrix();
	        if(data.p.s){
	            this.px = PropertyFactory.getProp(elem,data.p.x,0,0,this);
	            this.py = PropertyFactory.getProp(elem,data.p.y,0,0,this);
	            if(data.p.z){
	                this.pz = PropertyFactory.getProp(elem,data.p.z,0,0,this);
	            }
	        }else{
	            this.p = PropertyFactory.getProp(elem,data.p,1,0,this);
	        }
	        if(data.r) {
	            this.r = PropertyFactory.getProp(elem, data.r, 0, degToRads, this);
	        } else if(data.rx) {
	            this.rx = PropertyFactory.getProp(elem, data.rx, 0, degToRads, this);
	            this.ry = PropertyFactory.getProp(elem, data.ry, 0, degToRads, this);
	            this.rz = PropertyFactory.getProp(elem, data.rz, 0, degToRads, this);
	            if(data.or.k[0].ti) {
	                var i, len = data.or.k.length;
	                for(i=0;i<len;i+=1) {
	                    data.or.k[i].to = data.or.k[i].ti = null;
	                }
	            }
	            this.or = PropertyFactory.getProp(elem, data.or, 1, degToRads, this);
	            //sh Indicates it needs to be capped between -180 and 180
	            this.or.sh = true;
	        }
	        if(data.sk){
	            this.sk = PropertyFactory.getProp(elem, data.sk, 0, degToRads, this);
	            this.sa = PropertyFactory.getProp(elem, data.sa, 0, degToRads, this);
	        }
	        if(data.a) {
	            this.a = PropertyFactory.getProp(elem,data.a,1,0,this);
	        }
	        if(data.s) {
	            this.s = PropertyFactory.getProp(elem,data.s,1,0.01,this);
	        }
	        // Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.
	        if(data.o){
	            this.o = PropertyFactory.getProp(elem,data.o,0,0.01,elem);
	        } else {
	            this.o = {_mdf:false,v:1};
	        }
	        if(!this.dynamicProperties.length){
	            this.getValue(true);
	        }
	    }
	
	    TransformProperty.prototype = {
	        applyToMatrix: applyToMatrix,
	        searchDynamicProperties: searchDynamicProperties,
	        getValue: processKeys,
	        setInverted: setInverted,
	        autoOrient: autoOrient,
	        addDynamicProperty: addDynamicProperty
	    }
	
	    function getTransformProperty(elem,data,container){
	        return new TransformProperty(elem,data,container);
	    }
	
	    return {
	        getTransformProperty: getTransformProperty
	    };
	
	}());
	function ShapePath(){
		this.c = false;
		this._length = 0;
		this._maxLength = 8;
		this.v = createSizedArray(this._maxLength);
		this.o = createSizedArray(this._maxLength);
		this.i = createSizedArray(this._maxLength);
	}
	
	ShapePath.prototype.setPathData = function(closed, len) {
		this.c = closed;
		this.setLength(len);
		var i = 0;
		while(i < len){
			this.v[i] = point_pool.newElement();
			this.o[i] = point_pool.newElement();
			this.i[i] = point_pool.newElement();
			i += 1;
		}
	};
	
	ShapePath.prototype.setLength = function(len) {
		while(this._maxLength < len) {
			this.doubleArrayLength();
		}
		this._length = len;
	};
	
	ShapePath.prototype.doubleArrayLength = function() {
		this.v = this.v.concat(createSizedArray(this._maxLength));
		this.i = this.i.concat(createSizedArray(this._maxLength));
		this.o = this.o.concat(createSizedArray(this._maxLength));
		this._maxLength *= 2;
	};
	
	ShapePath.prototype.setXYAt = function(x, y, type, pos, replace) {
		var arr;
		this._length = Math.max(this._length, pos + 1);
		if(this._length >= this._maxLength) {
			this.doubleArrayLength();
		}
		switch(type){
			case 'v':
				arr = this.v;
				break;
			case 'i':
				arr = this.i;
				break;
			case 'o':
				arr = this.o;
				break;
		}
		if(!arr[pos] || (arr[pos] && !replace)){
			arr[pos] = point_pool.newElement();
		}
		arr[pos][0] = x;
		arr[pos][1] = y;
	};
	
	ShapePath.prototype.setTripleAt = function(vX,vY,oX,oY,iX,iY,pos, replace) {
		this.setXYAt(vX,vY,'v',pos, replace);
		this.setXYAt(oX,oY,'o',pos, replace);
		this.setXYAt(iX,iY,'i',pos, replace);
	};
	
	ShapePath.prototype.reverse = function() {
		var newPath = new ShapePath();
		newPath.setPathData(this.c, this._length);
		var vertices = this.v, outPoints = this.o, inPoints = this.i;
		var init = 0;
		if (this.c) {
			newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
	        init = 1;
	    }
	    var cnt = this._length - 1;
	    var len = this._length;
	
	    var i;
	    for (i = init; i < len; i += 1) {
	    	newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i, false);
	        cnt -= 1;
	    }
	    return newPath;
	};
	var ShapePropertyFactory = (function(){
	
	    var initFrame = -999999;
	
	    function interpolateShape(frameNum, previousValue, caching) {
	        var iterationIndex = caching.lastIndex;
	        var keyPropS,keyPropE,isHold, j, k, jLen, kLen, perc, vertexValue;
	        if(frameNum < this.keyframes[0].t-this.offsetTime){
	            keyPropS = this.keyframes[0].s[0];
	            isHold = true;
	            iterationIndex = 0;
	        }else if(frameNum >= this.keyframes[this.keyframes.length - 1].t-this.offsetTime){
	            if(this.keyframes[this.keyframes.length - 2].h === 1){
	                keyPropS = this.keyframes[this.keyframes.length - 1].s[0];
	            }else{
	                keyPropS = this.keyframes[this.keyframes.length - 2].e[0];
	            }
	            isHold = true;
	        }else{
	            var i = iterationIndex;
	            var len = this.keyframes.length- 1,flag = true,keyData,nextKeyData;
	            while(flag){
	                keyData = this.keyframes[i];
	                nextKeyData = this.keyframes[i+1];
	                if((nextKeyData.t - this.offsetTime) > frameNum){
	                    break;
	                }
	                if(i < len - 1){
	                    i += 1;
	                }else{
	                    flag = false;
	                }
	            }
	            isHold = keyData.h === 1;
	            iterationIndex = i;
	            if(!isHold){
	                if(frameNum >= nextKeyData.t-this.offsetTime){
	                    perc = 1;
	                }else if(frameNum < keyData.t-this.offsetTime){
	                    perc = 0;
	                }else{
	                    var fnc;
	                    if(keyData.__fnct){
	                        fnc = keyData.__fnct;
	                    }else{
	                        fnc = BezierFactory.getBezierEasing(keyData.o.x,keyData.o.y,keyData.i.x,keyData.i.y).get;
	                        keyData.__fnct = fnc;
	                    }
	                    perc = fnc((frameNum-(keyData.t-this.offsetTime))/((nextKeyData.t-this.offsetTime)-(keyData.t-this.offsetTime)));
	                }
	                keyPropE = keyData.e[0];
	            }
	            keyPropS = keyData.s[0];
	        }
	        jLen = previousValue._length;
	        kLen = keyPropS.i[0].length;
	        caching.lastIndex = iterationIndex;
	
	        for(j=0;j<jLen;j+=1){
	            for(k=0;k<kLen;k+=1){
	                vertexValue = isHold ? keyPropS.i[j][k] :  keyPropS.i[j][k]+(keyPropE.i[j][k]-keyPropS.i[j][k])*perc;
	                previousValue.i[j][k] = vertexValue;
	                vertexValue = isHold ? keyPropS.o[j][k] :  keyPropS.o[j][k]+(keyPropE.o[j][k]-keyPropS.o[j][k])*perc;
	                previousValue.o[j][k] = vertexValue;
	                vertexValue = isHold ? keyPropS.v[j][k] :  keyPropS.v[j][k]+(keyPropE.v[j][k]-keyPropS.v[j][k])*perc;
	                previousValue.v[j][k] = vertexValue;
	            }
	        }
	    }
	
	    function interpolateShapeCurrentTime(){
	        var frameNum = this.comp.renderedFrame - this.offsetTime;
	        var initTime = this.keyframes[0].t - this.offsetTime;
	        var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
	        var lastFrame = this._caching.lastFrame;
	        if(!(lastFrame !== initFrame && ((lastFrame < initTime && frameNum < initTime) || (lastFrame > endTime && frameNum > endTime)))){
	            ////
	            this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
	            this.interpolateShape(frameNum, this.pv, this._caching);
	            ////
	        }
	        this._caching.lastFrame = frameNum;
	        return this.pv;
	    }
	
	    function getShapeValue(){
	        return this.v;
	    }
	
	    function resetShape(){
	        this.paths = this.localShapeCollection;
	    }
	
	    function shapesEqual(shape1, shape2) {
	        if(shape1._length !== shape2._length || shape1.c !== shape2.c){
	            return false;
	        }
	        var i, len = shape1._length;
	        for(i = 0; i < len; i += 1) {
	            if(shape1.v[i][0] !== shape2.v[i][0] || shape1.v[i][1] !== shape2.v[i][1] || shape1.o[i][0] !== shape2.o[i][0] || shape1.o[i][1] !== shape2.o[i][1] || shape1.i[i][0] !== shape2.i[i][0] || shape1.i[i][1] !== shape2.i[i][1]){
	                return false;
	            }
	        }
	        return true;
	    }
	
	    function processEffectsSequence() {
	        if(this.lock || this.elem.globalData.frameId === this.frameId) {
	            return;
	        }
	        this.lock = true;
	        this.frameId = this.elem.globalData.frameId;
	        this._mdf = false;
	        var finalValue = this.kf ? this.pv : this.data.k;
	        var i, len = this.effectsSequence.length;
	        for(i = 0; i < len; i += 1) {
	            finalValue = this.effectsSequence[i](finalValue);
	        }
	        if(!shapesEqual(this.v, finalValue)) {
	            this.v = shape_pool.clone(finalValue);
	            this.localShapeCollection.releaseShapes();
	            this.localShapeCollection.addShape(this.v);
	            this._mdf = true;
	            this.paths = this.localShapeCollection;
	        }
	        this.lock = false;
	    };
	
	    function ShapeProperty(elem, data, type){
	        this.propType = 'shape';
	        this.comp = elem.comp;
	        this.container = elem;
	        this.elem = elem;
	        this.data = data;
	        this.k = false;
	        this.kf = false;
	        this._mdf = false;
	        var pathData = type === 3 ? data.pt.k : data.ks.k;
	        this.v = shape_pool.clone(pathData);
	        this.pv = shape_pool.clone(this.v);
	        this.localShapeCollection = shapeCollection_pool.newShapeCollection();
	        this.paths = this.localShapeCollection;
	        this.paths.addShape(this.v);
	        this.reset = resetShape;
	        this.effectsSequence = [getShapeValue.bind(this)];
	    }
	
	    function addEffect(effectFunction) {
	        this.effectsSequence.push(effectFunction);
	        this.container.addDynamicProperty(this);
	    }
	
	    ShapeProperty.prototype.interpolateShape = interpolateShape;
	    ShapeProperty.prototype.getValue = processEffectsSequence;
	    ShapeProperty.prototype.getValue = processEffectsSequence;
	    ShapeProperty.prototype.addEffect = addEffect;
	
	    function KeyframedShapeProperty(elem,data,type){
	        this.propType = 'shape';
	        this.comp = elem.comp;
	        this.elem = elem;
	        this.container = elem;
	        this.offsetTime = elem.data.st;
	        this.keyframes = type === 3 ? data.pt.k : data.ks.k;
	        this.k = true;
	        this.kf = true;
	        var i, len = this.keyframes[0].s[0].i.length;
	        var jLen = this.keyframes[0].s[0].i[0].length;
	        this.v = shape_pool.newElement();
	        this.v.setPathData(this.keyframes[0].s[0].c, len);
	        this.pv = shape_pool.clone(this.v);
	        this.localShapeCollection = shapeCollection_pool.newShapeCollection();
	        this.paths = this.localShapeCollection;
	        this.paths.addShape(this.v);
	        this.lastFrame = initFrame;
	        this.reset = resetShape;
	        this._caching = {lastFrame: initFrame, lastIndex: 0};
	        this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
	    }
	    KeyframedShapeProperty.prototype.getValue = processEffectsSequence;
	    KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
	    KeyframedShapeProperty.prototype.addEffect = addEffect;
	
	    var EllShapeProperty = (function(){
	
	        var cPoint = roundCorner;
	
	        function EllShapeProperty(elem,data) {
	            /*this.v = {
	                v: createSizedArray(4),
	                i: createSizedArray(4),
	                o: createSizedArray(4),
	                c: true
	            };*/
	            this.v = shape_pool.newElement();
	            this.v.setPathData(true, 4);
	            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
	            this.paths = this.localShapeCollection;
	            this.localShapeCollection.addShape(this.v);
	            this.d = data.d;
	            this.dynamicProperties = [];
	            this.elem = elem;
	            this.container = elem;
	            this.comp = elem.comp;
	            this.frameId = -1;
	            this._mdf = false;
	            this.p = PropertyFactory.getProp(elem,data.p,1,0,this);
	            this.s = PropertyFactory.getProp(elem,data.s,1,0,this);
	            if(this.dynamicProperties.length){
	                this.k = true;
	            }else{
	                this.convertEllToPath();
	            }
	        };
	
	        EllShapeProperty.prototype = {
	            reset: resetShape,
	            getValue: function (frameNum){
	                var i, len = this.dynamicProperties.length;
	                if(this.elem.globalData.frameId === this.frameId){
	                    return;
	                }
	                this._mdf = false;
	                this.frameId = this.elem.globalData.frameId;
	
	                for(i=0;i<len;i+=1){
	                    this.dynamicProperties[i].getValue(frameNum);
	                    if(this.dynamicProperties[i]._mdf){
	                        this._mdf = true;
	                    }
	                }
	                if(this._mdf){
	                    this.convertEllToPath();
	                }
	            },
	            addDynamicProperty: addDynamicProperty,
	            convertEllToPath: function() {
	                var p0 = this.p.v[0], p1 = this.p.v[1], s0 = this.s.v[0]/2, s1 = this.s.v[1]/2;
	                var _cw = this.d !== 3;
	                var _v = this.v;
	                _v.v[0][0] = p0;
	                _v.v[0][1] = p1 - s1;
	                _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
	                _v.v[1][1] = p1;
	                _v.v[2][0] = p0;
	                _v.v[2][1] = p1 + s1;
	                _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
	                _v.v[3][1] = p1;
	                _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
	                _v.i[0][1] = p1 - s1;
	                _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
	                _v.i[1][1] = p1 - s1 * cPoint;
	                _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
	                _v.i[2][1] = p1 + s1;
	                _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
	                _v.i[3][1] = p1 + s1 * cPoint;
	                _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
	                _v.o[0][1] = p1 - s1;
	                _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
	                _v.o[1][1] = p1 + s1 * cPoint;
	                _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
	                _v.o[2][1] = p1 + s1;
	                _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
	                _v.o[3][1] = p1 - s1 * cPoint;
	            }
	        }
	
	        return EllShapeProperty;
	    }());
	
	    var StarShapeProperty = (function() {
	
	        function StarShapeProperty(elem,data) {
	            /*this.v = {
	                v: [],
	                i: [],
	                o: [],
	                c: true
	            };*/
	            this.v = shape_pool.newElement();
	            this.v.setPathData(true, 0);
	            this.elem = elem;
	            this.container = elem;
	            this.comp = elem.comp;
	            this.data = data;
	            this.frameId = -1;
	            this.d = data.d;
	            this.dynamicProperties = [];
	            this._mdf = false;
	            if(data.sy === 1){
	                this.ir = PropertyFactory.getProp(elem,data.ir,0,0,this);
	                this.is = PropertyFactory.getProp(elem,data.is,0,0.01,this);
	                this.convertToPath = this.convertStarToPath;
	            } else {
	                this.convertToPath = this.convertPolygonToPath;
	            }
	            this.pt = PropertyFactory.getProp(elem,data.pt,0,0,this);
	            this.p = PropertyFactory.getProp(elem,data.p,1,0,this);
	            this.r = PropertyFactory.getProp(elem,data.r,0,degToRads,this);
	            this.or = PropertyFactory.getProp(elem,data.or,0,0,this);
	            this.os = PropertyFactory.getProp(elem,data.os,0,0.01,this);
	            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
	            this.localShapeCollection.addShape(this.v);
	            this.paths = this.localShapeCollection;
	            if(this.dynamicProperties.length){
	                this.k = true;
	            }else{
	                this.convertToPath();
	            }
	        };
	
	        StarShapeProperty.prototype = {
	            addDynamicProperty: addDynamicProperty,
	            reset: resetShape,
	            getValue: function() {
	                if(this.elem.globalData.frameId === this.frameId){
	                    return;
	                }
	                this._mdf = false;
	                this.frameId = this.elem.globalData.frameId;
	                var i, len = this.dynamicProperties.length;
	
	                for(i=0;i<len;i+=1){
	                    this.dynamicProperties[i].getValue();
	                    if(this.dynamicProperties[i]._mdf){
	                        this._mdf = true;
	                    }
	                }
	                if(this._mdf){
	                    this.convertToPath();
	                }
	            },
	            convertStarToPath: function() {
	                var numPts = Math.floor(this.pt.v)*2;
	                var angle = Math.PI*2/numPts;
	                /*this.v.v.length = numPts;
	                this.v.i.length = numPts;
	                this.v.o.length = numPts;*/
	                var longFlag = true;
	                var longRad = this.or.v;
	                var shortRad = this.ir.v;
	                var longRound = this.os.v;
	                var shortRound = this.is.v;
	                var longPerimSegment = 2*Math.PI*longRad/(numPts*2);
	                var shortPerimSegment = 2*Math.PI*shortRad/(numPts*2);
	                var i, rad,roundness,perimSegment, currentAng = -Math.PI/ 2;
	                currentAng += this.r.v;
	                var dir = this.data.d === 3 ? -1 : 1;
	                this.v._length = 0;
	                for(i=0;i<numPts;i+=1){
	                    rad = longFlag ? longRad : shortRad;
	                    roundness = longFlag ? longRound : shortRound;
	                    perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
	                    var x = rad * Math.cos(currentAng);
	                    var y = rad * Math.sin(currentAng);
	                    var ox = x === 0 && y === 0 ? 0 : y/Math.sqrt(x*x + y*y);
	                    var oy = x === 0 && y === 0 ? 0 : -x/Math.sqrt(x*x + y*y);
	                    x +=  + this.p.v[0];
	                    y +=  + this.p.v[1];
	                    this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir, i, true);
	
	                    /*this.v.v[i] = [x,y];
	                    this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
	                    this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
	                    this.v._length = numPts;*/
	                    longFlag = !longFlag;
	                    currentAng += angle*dir;
	                }
	            },
	            convertPolygonToPath: function() {
	                var numPts = Math.floor(this.pt.v);
	                var angle = Math.PI*2/numPts;
	                var rad = this.or.v;
	                var roundness = this.os.v;
	                var perimSegment = 2*Math.PI*rad/(numPts*4);
	                var i, currentAng = -Math.PI/ 2;
	                var dir = this.data.d === 3 ? -1 : 1;
	                currentAng += this.r.v;
	                this.v._length = 0;
	                for(i=0;i<numPts;i+=1){
	                    var x = rad * Math.cos(currentAng);
	                    var y = rad * Math.sin(currentAng);
	                    var ox = x === 0 && y === 0 ? 0 : y/Math.sqrt(x*x + y*y);
	                    var oy = x === 0 && y === 0 ? 0 : -x/Math.sqrt(x*x + y*y);
	                    x +=  + this.p.v[0];
	                    y +=  + this.p.v[1];
	                    this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir, i, true);
	                    currentAng += angle*dir;
	                }
	                this.paths.length = 0;
	                this.paths[0] = this.v;
	            }
	
	        }
	
	        return StarShapeProperty;
	    }());
	
	    var RectShapeProperty = (function() {
	
	         function RectShapeProperty(elem,data) {
	            this.v = shape_pool.newElement();
	            this.v.c = true;
	            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
	            this.localShapeCollection.addShape(this.v);
	            this.paths = this.localShapeCollection;
	            this.elem = elem;
	            this.container = elem;
	            this.comp = elem.comp;
	            this.frameId = -1;
	            this.d = data.d;
	            this.dynamicProperties = [];
	            this._mdf = false;
	            this.p = PropertyFactory.getProp(elem,data.p,1,0,this);
	            this.s = PropertyFactory.getProp(elem,data.s,1,0,this);
	            this.r = PropertyFactory.getProp(elem,data.r,0,0,this);
	            if(this.dynamicProperties.length){
	                this.k = true;
	            }else{
	                this.convertRectToPath();
	            }
	        };
	
	        RectShapeProperty.prototype = {
	            convertRectToPath: function (){
	                var p0 = this.p.v[0], p1 = this.p.v[1], v0 = this.s.v[0]/2, v1 = this.s.v[1]/2;
	                var round = bm_min(v0,v1,this.r.v);
	                var cPoint = round*(1-roundCorner);
	                this.v._length = 0;
	
	                if(this.d === 2 || this.d === 1) {
	                    this.v.setTripleAt(p0+v0, p1-v1+round,p0+v0, p1-v1+round,p0+v0,p1-v1+cPoint,0, true);
	                    this.v.setTripleAt(p0+v0, p1+v1-round,p0+v0, p1+v1-cPoint,p0+v0, p1+v1-round,1, true);
	                    if(round!== 0){
	                        this.v.setTripleAt(p0+v0-round, p1+v1,p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,2, true);
	                        this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,p0-v0+round,p1+v1,3, true);
	                        this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,4, true);
	                        this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,p0-v0,p1-v1+round,5, true);
	                        this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,6, true);
	                        this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,p0+v0-round,p1-v1,7, true);
	                    } else {
	                        this.v.setTripleAt(p0-v0,p1+v1,p0-v0+cPoint,p1+v1,p0-v0,p1+v1,2);
	                        this.v.setTripleAt(p0-v0,p1-v1,p0-v0,p1-v1+cPoint,p0-v0,p1-v1,3);
	                    }
	                }else{
	                    this.v.setTripleAt(p0+v0,p1-v1+round,p0+v0,p1-v1+cPoint,p0+v0,p1-v1+round,0, true);
	                    if(round!== 0){
	                        this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,1, true);
	                        this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,p0-v0+round,p1-v1,2, true);
	                        this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,3, true);
	                        this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,p0-v0,p1+v1-round,4, true);
	                        this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,5, true);
	                        this.v.setTripleAt(p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,p0+v0-round,p1+v1,6, true);
	                        this.v.setTripleAt(p0+v0,p1+v1-round,p0+v0,p1+v1-round,p0+v0,p1+v1-cPoint,7, true);
	                    } else {
	                        this.v.setTripleAt(p0-v0,p1-v1,p0-v0+cPoint,p1-v1,p0-v0,p1-v1,1, true);
	                        this.v.setTripleAt(p0-v0,p1+v1,p0-v0,p1+v1-cPoint,p0-v0,p1+v1,2, true);
	                        this.v.setTripleAt(p0+v0,p1+v1,p0+v0-cPoint,p1+v1,p0+v0,p1+v1,3, true);
	
	                    }
	                }
	            },
	            getValue: function(frameNum){
	                if(this.elem.globalData.frameId === this.frameId){
	                    return;
	                }
	                this._mdf = false;
	                this.frameId = this.elem.globalData.frameId;
	                var i, len = this.dynamicProperties.length;
	
	                for(i=0;i<len;i+=1){
	                    this.dynamicProperties[i].getValue(frameNum);
	                    if(this.dynamicProperties[i]._mdf){
	                        this._mdf = true;
	                    }
	                }
	                if(this._mdf){
	                    this.convertRectToPath();
	                }
	
	            },
	            addDynamicProperty: addDynamicProperty,
	            reset: resetShape
	        }
	
	        return RectShapeProperty;
	    }());
	
	    function getShapeProp(elem,data,type){
	        var prop;
	        if(type === 3 || type === 4){
	            var dataProp = type === 3 ? data.pt : data.ks;
	            var keys = dataProp.k;
	            if(dataProp.a === 1 || keys.length){
	                prop = new KeyframedShapeProperty(elem, data, type);
	            }else{
	                prop = new ShapeProperty(elem, data, type);
	            }
	        }else if(type === 5){
	            prop = new RectShapeProperty(elem, data);
	        }else if(type === 6){
	            prop = new EllShapeProperty(elem, data);
	        }else if(type === 7){
	            prop = new StarShapeProperty(elem, data);
	        }
	        if(prop.k){
	            elem.addDynamicProperty(prop);
	        }
	        return prop;
	    }
	
	    function getConstructorFunction() {
	        return ShapeProperty;
	    }
	
	    function getKeyframedConstructorFunction() {
	        return KeyframedShapeProperty;
	    }
	
	    var ob = {};
	    ob.getShapeProp = getShapeProp;
	    ob.getConstructorFunction = getConstructorFunction;
	    ob.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
	    return ob;
	}());
	var ShapeModifiers = (function(){
	    var ob = {};
	    var modifiers = {};
	    ob.registerModifier = registerModifier;
	    ob.getModifier = getModifier;
	
	    function registerModifier(nm,factory){
	        if(!modifiers[nm]){
	            modifiers[nm] = factory;
	        }
	    }
	
	    function getModifier(nm,elem, data){
	        return new modifiers[nm](elem, data);
	    }
	
	    return ob;
	}());
	
	function ShapeModifier(){}
	ShapeModifier.prototype.initModifierProperties = function(){};
	ShapeModifier.prototype.addShapeToModifier = function(){};
	ShapeModifier.prototype.addShape = function(data){
	    if(!this.closed){
	        var shapeData = {shape:data.sh, data: data, localShapeCollection:shapeCollection_pool.newShapeCollection()};
	        this.shapes.push(shapeData);
	        this.addShapeToModifier(shapeData);
	    }
	};
	ShapeModifier.prototype.init = function(elem,data){
	    this.dynamicProperties = [];
	    this.shapes = [];
	    this.elem = elem;
	    this.container = elem;
	    this.initModifierProperties(elem,data);
	    this.frameId = initialDefaultFrame;
	    this._mdf = false;
	    this.closed = false;
	    this.k = false;
	    if(this.dynamicProperties.length){
	        this.k = true;
	    }else{
	        this.getValue(true);
	    }
	};
	ShapeModifier.prototype.processKeys = function(){
	    if(this.elem.globalData.frameId === this.frameId){
	        return;
	    }
	    this._mdf = false;
	    var i, len = this.dynamicProperties.length;
	
	    for(i=0;i<len;i+=1){
	        this.dynamicProperties[i].getValue();
	        if(this.dynamicProperties[i]._mdf){
	            this._mdf = true;
	        }
	    }
	    this.frameId = this.elem.globalData.frameId;
	};
	
	ShapeModifier.prototype.addDynamicProperty = addDynamicProperty;
	function TrimModifier(){
	}
	extendPrototype([ShapeModifier], TrimModifier);
	TrimModifier.prototype.initModifierProperties = function(elem, data) {
	    this.s = PropertyFactory.getProp(elem, data.s, 0, 0.01, this);
	    this.e = PropertyFactory.getProp(elem, data.e, 0, 0.01, this);
	    this.o = PropertyFactory.getProp(elem, data.o, 0, 0, this);
	    this.sValue = 0;
	    this.eValue = 0;
	    this.getValue = this.processKeys;
	    this.m = data.m;
	};
	
	TrimModifier.prototype.addShapeToModifier = function(shapeData){
	    shapeData.pathsData = [];
	};
	
	TrimModifier.prototype.calculateShapeEdges = function(s, e, shapeLength, addedLength, totalModifierLength) {
	    var segments = [];
	    if (e <= 1) {
	        segments.push({
	            s: s,
	            e: e
	        });
	    } else if (s >= 1) {
	        segments.push({
	            s: s - 1,
	            e: e - 1
	        });
	    } else {
	        segments.push({
	            s: s,
	            e: 1
	        });
	        segments.push({
	            s: 0,
	            e: e - 1
	        });
	    }
	    var shapeSegments = [];
	    var i, len = segments.length, segmentOb;
	    for (i = 0; i < len; i += 1) {
	        segmentOb = segments[i];
	        if (segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength) {
	            
	        } else {
	            var shapeS, shapeE;
	            if (segmentOb.s * totalModifierLength <= addedLength) {
	                shapeS = 0;
	            } else {
	                shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
	            }
	            if(segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
	                shapeE = 1;
	            } else {
	                shapeE = ((segmentOb.e * totalModifierLength - addedLength) / shapeLength);
	            }
	            shapeSegments.push([shapeS, shapeE]);
	        }
	    }
	    if (!shapeSegments.length) {
	        shapeSegments.push([0, 0]);
	    }
	    return shapeSegments;
	};
	
	TrimModifier.prototype.releasePathsData = function(pathsData) {
	    var i, len = pathsData.length;
	    for (i = 0; i < len; i += 1) {
	        segments_length_pool.release(pathsData[i]);
	    }
	    pathsData.length = 0;
	    return pathsData;
	};
	
	TrimModifier.prototype.processShapes = function(_isFirstFrame) {
	    var s, e;
	    if (this._mdf || _isFirstFrame) {
	        var o = (this.o.v % 360) / 360;
	        if (o < 0) {
	            o += 1;
	        }
	        s = this.s.v + o;
	        e = this.e.v + o;
	        if (s === e) {
	
	        }
	        if (s > e) {
	            var _s = s;
	            s = e;
	            e = _s;
	        }
	        this.sValue = s;
	        this.eValue = e;
	    } else {
	        s = this.sValue;
	        e = this.eValue;
	    }
	    var shapePaths;
	    var i, len = this.shapes.length, j, jLen;
	    var pathsData, pathData, totalShapeLength, totalModifierLength = 0;
	
	    if (e === s) {
	        for (i = 0; i < len; i += 1) {
	            this.shapes[i].localShapeCollection.releaseShapes();
	            this.shapes[i].shape._mdf = true;
	            this.shapes[i].shape.paths = this.shapes[i].localShapeCollection;
	        }
	    } else if (!((e === 1 && s === 0) || (e===0 && s === 1))){
	        var segments = [], shapeData, localShapeCollection;
	        for (i = 0; i < len; i += 1) {
	            shapeData = this.shapes[i];
	            // if shape hasn't changed and trim properties haven't changed, cached previous path can be used
	            if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
	                shapeData.shape.paths = shapeData.localShapeCollection;
	            } else {
	                shapePaths = shapeData.shape.paths;
	                jLen = shapePaths._length;
	                totalShapeLength = 0;
	                if (!shapeData.shape._mdf && shapeData.pathsData.length) {
	                    totalShapeLength = shapeData.totalShapeLength;
	                } else {
	                    pathsData = this.releasePathsData(shapeData.pathsData);
	                    for (j = 0; j < jLen; j += 1) {
	                        pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
	                        pathsData.push(pathData);
	                        totalShapeLength += pathData.totalLength;
	                    }
	                    shapeData.totalShapeLength = totalShapeLength;
	                    shapeData.pathsData = pathsData;
	                }
	
	                totalModifierLength += totalShapeLength;
	                shapeData.shape._mdf = true;
	            }
	        }
	        var shapeS = s, shapeE = e, addedLength = 0, edges;
	        for (i = len - 1; i >= 0; i -= 1) {
	            shapeData = this.shapes[i];
	            if (shapeData.shape._mdf) {
	                localShapeCollection = shapeData.localShapeCollection;
	                localShapeCollection.releaseShapes();
	                //if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group
	                if (this.m === 2 && len > 1) {
	                    edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);
	                    addedLength += shapeData.totalShapeLength;
	                } else {
	                    edges = [[shapeS, shapeE]];
	                }
	                jLen = edges.length;
	                for (j = 0; j < jLen; j += 1) {
	                    shapeS = edges[j][0];
	                    shapeE = edges[j][1];
	                    segments.length = 0;
	                    if (shapeE <= 1) {
	                        segments.push({
	                            s:shapeData.totalShapeLength * shapeS,
	                            e:shapeData.totalShapeLength * shapeE
	                        });
	                    } else if (shapeS >= 1) {
	                        segments.push({
	                            s:shapeData.totalShapeLength * (shapeS - 1),
	                            e:shapeData.totalShapeLength * (shapeE - 1)
	                        });
	                    } else {
	                        segments.push({
	                            s:shapeData.totalShapeLength * shapeS,
	                            e:shapeData.totalShapeLength
	                        });
	                        segments.push({
	                            s:0,
	                            e:shapeData.totalShapeLength * (shapeE - 1)
	                        });
	                    }
	                    var newShapesData = this.addShapes(shapeData,segments[0]);
	                    if (segments[0].s !== segments[0].e) {
	                        if (segments.length > 1) {
	                            if (shapeData.shape.v.c) {
	                                var lastShape = newShapesData.pop();
	                                this.addPaths(newShapesData, localShapeCollection);
	                                newShapesData = this.addShapes(shapeData, segments[1], lastShape);
	                            } else {
	                                this.addPaths(newShapesData, localShapeCollection);
	                                newShapesData = this.addShapes(shapeData, segments[1]);
	                            }
	                        } 
	                        this.addPaths(newShapesData, localShapeCollection);
	                    }
	                    
	                }
	                shapeData.shape.paths = localShapeCollection;
	            }
	        }
	    } else if (this._mdf) {
	        for (i = 0; i < len; i += 1) {
	            this.shapes[i].shape._mdf = true;
	        }
	    }
	};
	
	TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {
	    var i, len = newPaths.length;
	    for (i = 0; i < len; i += 1) {
	        localShapeCollection.addShape(newPaths[i]);
	    }
	};
	
	TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
	    shapePath.setXYAt(pt2[0], pt2[1], 'o', pos);
	    shapePath.setXYAt(pt3[0], pt3[1], 'i', pos + 1);
	    if(newShape){
	        shapePath.setXYAt(pt1[0], pt1[1], 'v', pos);
	    }
	    shapePath.setXYAt(pt4[0], pt4[1], 'v', pos + 1);
	};
	
	TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {
	    shapePath.setXYAt(points[1], points[5], 'o', pos);
	    shapePath.setXYAt(points[2], points[6], 'i', pos + 1);
	    if(newShape){
	        shapePath.setXYAt(points[0], points[4], 'v', pos);
	    }
	    shapePath.setXYAt(points[3], points[7], 'v', pos + 1);
	};
	
	TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {
	    var pathsData = shapeData.pathsData;
	    var shapePaths = shapeData.shape.paths.shapes;
	    var i, len = shapeData.shape.paths._length, j, jLen;
	    var addedLength = 0;
	    var currentLengthData,segmentCount;
	    var lengths;
	    var segment;
	    var shapes = [];
	    var initPos;
	    var newShape = true;
	    if (!shapePath) {
	        shapePath = shape_pool.newElement();
	        segmentCount = 0;
	        initPos = 0;
	    } else {
	        segmentCount = shapePath._length;
	        initPos = shapePath._length;
	    }
	    shapes.push(shapePath);
	    for (i = 0; i < len; i += 1) {
	        lengths = pathsData[i].lengths;
	        shapePath.c = shapePaths[i].c;
	        jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;
	        for (j = 1; j < jLen; j +=1) {
	            currentLengthData = lengths[j-1];
	            if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
	                addedLength += currentLengthData.addedLength;
	                shapePath.c = false;
	            } else if(addedLength > shapeSegment.e) {
	                shapePath.c = false;
	                break;
	            } else {
	                if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
	                    this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[j], shapePaths[i].v[j], shapePath, segmentCount, newShape);
	                    newShape = false;
	                } else {
	                    segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[j], shapePaths[i].o[j - 1], shapePaths[i].i[j], (shapeSegment.s - addedLength)/currentLengthData.addedLength,(shapeSegment.e - addedLength)/currentLengthData.addedLength, lengths[j-1]);
	                    this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
	                    // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
	                    newShape = false;
	                    shapePath.c = false;
	                }
	                addedLength += currentLengthData.addedLength;
	                segmentCount += 1;
	            }
	        }
	        if (shapePaths[i].c) {
	            currentLengthData = lengths[j - 1];
	            if (addedLength <= shapeSegment.e) {
	                var segmentLength = lengths[j - 1].addedLength;
	                if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
	                    this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[0], shapePaths[i].v[0], shapePath, segmentCount, newShape);
	                    newShape = false;
	                } else {
	                    segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[0], shapePaths[i].o[j - 1], shapePaths[i].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
	                    this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
	                    // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
	                    newShape = false;
	                    shapePath.c = false;
	                }
	            } else {
	                shapePath.c = false;
	            }
	            addedLength += currentLengthData.addedLength;
	            segmentCount += 1;
	        }
	        if (shapePath._length) {
	            shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], 'i', initPos);
	            shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1],'o', shapePath._length - 1);
	        }
	        if (addedLength > shapeSegment.e) {
	            break;
	        }
	        if (i < len - 1) {
	            shapePath = shape_pool.newElement();
	            newShape = true;
	            shapes.push(shapePath);
	            segmentCount = 0;
	        }
	    }
	    return shapes;
	};
	
	
	ShapeModifiers.registerModifier('tm', TrimModifier);
	function RoundCornersModifier(){}
	extendPrototype([ShapeModifier],RoundCornersModifier);
	RoundCornersModifier.prototype.initModifierProperties = function(elem,data){
	    this.getValue = this.processKeys;
	    this.rd = PropertyFactory.getProp(elem,data.r,0,null,this);
	};
	
	RoundCornersModifier.prototype.processPath = function(path, round){
	    var cloned_path = shape_pool.newElement();
	    cloned_path.c = path.c;
	    var i, len = path._length;
	    var currentV,currentI,currentO,closerV, newV,newO,newI,distance,newPosPerc,index = 0;
	    var vX,vY,oX,oY,iX,iY;
	    for(i=0;i<len;i+=1){
	        currentV = path.v[i];
	        currentO = path.o[i];
	        currentI = path.i[i];
	        if(currentV[0]===currentO[0] && currentV[1]===currentO[1] && currentV[0]===currentI[0] && currentV[1]===currentI[1]){
	            if((i===0 || i === len - 1) && !path.c){
	                cloned_path.setTripleAt(currentV[0],currentV[1],currentO[0],currentO[1],currentI[0],currentI[1],index);
	                /*cloned_path.v[index] = currentV;
	                cloned_path.o[index] = currentO;
	                cloned_path.i[index] = currentI;*/
	                index += 1;
	            } else {
	                if(i===0){
	                    closerV = path.v[len-1];
	                } else {
	                    closerV = path.v[i-1];
	                }
	                distance = Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));
	                newPosPerc = distance ? Math.min(distance/2,round)/distance : 0;
	                vX = iX = currentV[0]+(closerV[0]-currentV[0])*newPosPerc;
	                vY = iY = currentV[1]-(currentV[1]-closerV[1])*newPosPerc;
	                oX = vX-(vX-currentV[0])*roundCorner;
	                oY = vY-(vY-currentV[1])*roundCorner;
	                cloned_path.setTripleAt(vX,vY,oX,oY,iX,iY,index);
	                index += 1;
	
	                if(i === len - 1){
	                    closerV = path.v[0];
	                } else {
	                    closerV = path.v[i+1];
	                }
	                distance = Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));
	                newPosPerc = distance ? Math.min(distance/2,round)/distance : 0;
	                vX = oX = currentV[0]+(closerV[0]-currentV[0])*newPosPerc;
	                vY = oY = currentV[1]+(closerV[1]-currentV[1])*newPosPerc;
	                iX = vX-(vX-currentV[0])*roundCorner;
	                iY = vY-(vY-currentV[1])*roundCorner;
	                cloned_path.setTripleAt(vX,vY,oX,oY,iX,iY,index);
	                index += 1;
	            }
	        } else {
	            cloned_path.setTripleAt(path.v[i][0],path.v[i][1],path.o[i][0],path.o[i][1],path.i[i][0],path.i[i][1],index);
	            index += 1;
	        }
	    }
	    return cloned_path;
	};
	
	RoundCornersModifier.prototype.processShapes = function(_isFirstFrame){
	    var shapePaths;
	    var i, len = this.shapes.length;
	    var j, jLen;
	    var rd = this.rd.v;
	
	    if(rd !== 0){
	        var shapeData, newPaths, localShapeCollection;
	        for(i=0;i<len;i+=1){
	            shapeData = this.shapes[i];
	            newPaths = shapeData.shape.paths;
	            localShapeCollection = shapeData.localShapeCollection;
	            if(!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)){
	                localShapeCollection.releaseShapes();
	                shapeData.shape._mdf = true;
	                shapePaths = shapeData.shape.paths.shapes;
	                jLen = shapeData.shape.paths._length;
	                for(j=0;j<jLen;j+=1){
	                    localShapeCollection.addShape(this.processPath(shapePaths[j],rd));
	                }
	            }
	            shapeData.shape.paths = shapeData.localShapeCollection;
	        }
	
	    }
	    if(!this.dynamicProperties.length){
	        this._mdf = false;
	    }
	};
	
	ShapeModifiers.registerModifier('rd',RoundCornersModifier);
	function RepeaterModifier(){}
	extendPrototype([ShapeModifier], RepeaterModifier);
	
	RepeaterModifier.prototype.initModifierProperties = function(elem,data){
	    this.getValue = this.processKeys;
	    this.c = PropertyFactory.getProp(elem,data.c,0,null,this);
	    this.o = PropertyFactory.getProp(elem,data.o,0,null,this);
	    this.tr = TransformPropertyFactory.getTransformProperty(elem,data.tr,this);
	    this.data = data;
	    if(!this.dynamicProperties.length){
	        this.getValue(true);
	    }
	    this.pMatrix = new Matrix();
	    this.rMatrix = new Matrix();
	    this.sMatrix = new Matrix();
	    this.tMatrix = new Matrix();
	    this.matrix = new Matrix();
	};
	
	RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform, perc, inv){
	    var dir = inv ? -1 : 1;
	    var scaleX = transform.s.v[0] + (1 - transform.s.v[0]) * (1 - perc);
	    var scaleY = transform.s.v[1] + (1 - transform.s.v[1]) * (1 - perc);
	    pMatrix.translate(transform.p.v[0] * dir * perc, transform.p.v[1] * dir * perc, transform.p.v[2]);
	    rMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
	    rMatrix.rotate(-transform.r.v * dir * perc);
	    rMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
	    sMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
	    sMatrix.scale(inv ? 1/scaleX : scaleX, inv ? 1/scaleY : scaleY);
	    sMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
	};
	
	RepeaterModifier.prototype.init = function(elem, arr, pos, elemsData) {
	    this.elem = elem;
	    this.container = elem;
	    this.arr = arr;
	    this.pos = pos;
	    this.elemsData = elemsData;
	    this._currentCopies = 0;
	    this._elements = [];
	    this._groups = [];
	    this.dynamicProperties = [];
	    this.frameId = -1;
	    this.initModifierProperties(elem,arr[pos]);
	    var cont = 0;
	    while(pos>0){
	        pos -= 1;
	        //this._elements.unshift(arr.splice(pos,1)[0]);
	        this._elements.unshift(arr[pos]);
	        cont += 1;
	    }
	    if(this.dynamicProperties.length){
	        this.k = true;
	    }else{
	        this.getValue(true);
	    }
	};
	
	RepeaterModifier.prototype.resetElements = function(elements){
	    var i, len = elements.length;
	    for(i = 0; i < len; i += 1) {
	        elements[i]._processed = false;
	        if(elements[i].ty === 'gr'){
	            this.resetElements(elements[i].it);
	        }
	    }
	};
	
	RepeaterModifier.prototype.cloneElements = function(elements){
	    var i, len = elements.length;
	    var newElements = JSON.parse(JSON.stringify(elements));
	    this.resetElements(newElements);
	    return newElements;
	};
	
	RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {
	    var i, len = elements.length;
	    for(i = 0; i < len ; i += 1) {
	        elements[i]._render = renderFlag;
	        if(elements[i].ty === 'gr') {
	            this.changeGroupRender(elements[i].it, renderFlag);
	        }
	    }
	};
	
	RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {
	    var items, itemsTransform, i, dir, cont;
	    if(this._mdf || _isFirstFrame){
	        var copies = Math.ceil(this.c.v);
	        if(this._groups.length < copies){
	            while(this._groups.length < copies){
	                var group = {
	                    it:this.cloneElements(this._elements),
	                    ty:'gr'
	                };
	                group.it.push({"a":{"a":0,"ix":1,"k":[0,0]},"nm":"Transform","o":{"a":0,"ix":7,"k":100},"p":{"a":0,"ix":2,"k":[0,0]},"r":{"a":0,"ix":6,"k":0},"s":{"a":0,"ix":3,"k":[100,100]},"sa":{"a":0,"ix":5,"k":0},"sk":{"a":0,"ix":4,"k":0},"ty":"tr"});
	                
	                this.arr.splice(0,0,group);
	                this._groups.splice(0,0,group);
	                this._currentCopies += 1;
	            }
	            this.elem.reloadShapes();
	        }
	        cont = 0;
	        var renderFlag;
	        for(i = 0; i  <= this._groups.length - 1; i += 1){
	            renderFlag = cont < copies;
	            this._groups[i]._render = renderFlag;
	            this.changeGroupRender(this._groups[i].it, renderFlag);
	            cont += 1;
	        }
	        
	        this._currentCopies = copies;
	        ////
	
	        var offset = this.o.v;
	        var offsetModulo = offset%1;
	        var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
	        var k;
	        var tMat = this.tr.v.props;
	        var pProps = this.pMatrix.props;
	        var rProps = this.rMatrix.props;
	        var sProps = this.sMatrix.props;
	        this.pMatrix.reset();
	        this.rMatrix.reset();
	        this.sMatrix.reset();
	        this.tMatrix.reset();
	        this.matrix.reset();
	        var iteration = 0;
	
	        if(offset > 0) {
	            while(iteration<roundOffset){
	                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
	                iteration += 1;
	            }
	            if(offsetModulo){
	                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
	                iteration += offsetModulo;
	            }
	        } else if(offset < 0) {
	            while(iteration>roundOffset){
	                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
	                iteration -= 1;
	            }
	            if(offsetModulo){
	                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, - offsetModulo, true);
	                iteration -= offsetModulo;
	            }
	        }
	        i = this.data.m === 1 ? 0 : this._currentCopies - 1;
	        dir = this.data.m === 1 ? 1 : -1;
	        cont = this._currentCopies;
	        var j, jLen;
	        while(cont){
	            items = this.elemsData[i].it;
	            itemsTransform = items[items.length - 1].transform.mProps.v.props;
	            jLen = itemsTransform.length;
	            items[items.length - 1].transform.mProps._mdf = true;
	            items[items.length - 1].transform.op._mdf = true;
	            if(iteration !== 0){
	                if((i !== 0 && dir === 1) || (i !== this._currentCopies - 1 && dir === -1)){
	                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
	                }
	                this.matrix.transform(rProps[0],rProps[1],rProps[2],rProps[3],rProps[4],rProps[5],rProps[6],rProps[7],rProps[8],rProps[9],rProps[10],rProps[11],rProps[12],rProps[13],rProps[14],rProps[15]);
	                this.matrix.transform(sProps[0],sProps[1],sProps[2],sProps[3],sProps[4],sProps[5],sProps[6],sProps[7],sProps[8],sProps[9],sProps[10],sProps[11],sProps[12],sProps[13],sProps[14],sProps[15]);
	                this.matrix.transform(pProps[0],pProps[1],pProps[2],pProps[3],pProps[4],pProps[5],pProps[6],pProps[7],pProps[8],pProps[9],pProps[10],pProps[11],pProps[12],pProps[13],pProps[14],pProps[15]);
	                
	                for(j=0;j<jLen;j+=1) {
	                    itemsTransform[j] = this.matrix.props[j];
	                }
	                this.matrix.reset();
	            } else {
	                this.matrix.reset();
	                for(j=0;j<jLen;j+=1) {
	                    itemsTransform[j] = this.matrix.props[j];
	                }
	            }
	            iteration += 1;
	            cont -= 1;
	            i += dir;
	        }
	    } else {
	        cont = this._currentCopies;
	        i = 0;
	        dir = 1;
	        while(cont){
	            items = this.elemsData[i].it;
	            itemsTransform = items[items.length - 1].transform.mProps.v.props;
	            items[items.length - 1].transform.mProps._mdf = false;
	            items[items.length - 1].transform.op._mdf = false;
	            cont -= 1;
	            i += dir;
	        }
	    }
	};
	
	RepeaterModifier.prototype.addShape = function(){};
	
	ShapeModifiers.registerModifier('rp',RepeaterModifier);
	function ShapeCollection(){
		this._length = 0;
		this._maxLength = 4;
		this.shapes = createSizedArray(this._maxLength);
	}
	
	ShapeCollection.prototype.addShape = function(shapeData){
		if(this._length === this._maxLength){
			this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
			this._maxLength *= 2;
		}
		this.shapes[this._length] = shapeData;
		this._length += 1;
	};
	
	ShapeCollection.prototype.releaseShapes = function(){
		var i;
		for(i = 0; i < this._length; i += 1) {
			shape_pool.release(this.shapes[i]);
		}
		this._length = 0;
	};
	function DashProperty(elem, data, renderer) {
	    this.elem = elem;
	    this.container = elem;
	    this.frameId = -1;
	    this.dataProps = createSizedArray(data.length);
	    this.renderer = renderer;
	    this._mdf = false;
	    this.k = false;
	    this.dynamicProperties = [];
	    this.dashStr = '';
	    this.dashArray = createTypedArray('float32',  data.length ? data.length - 1 : 0);
	    this.dashoffset = createTypedArray('float32',  1);
	    var i, len = data.length || 0, prop;
	    for(i = 0; i < len; i += 1) {
	        prop = PropertyFactory.getProp(elem,data[i].v,0, 0, this);
	        this.k = prop.k ? true : this.k;
	        this.dataProps[i] = {n:data[i].n,p:prop};
	    }
	    if(!this.k){
	        this.getValue(true);
	    }
	}
	
	DashProperty.prototype.addDynamicProperty = addDynamicProperty;
	
	DashProperty.prototype.getValue = function(forceRender) {
	    if(this.elem.globalData.frameId === this.frameId && !forceRender){
	        return;
	    }
	    var i = 0, len = this.dataProps.length;
	    this._mdf = forceRender;
	    this.frameId = this.elem.globalData.frameId;
	    while(i<len){
	        this.dataProps[i].p.getValue();
	        if(this.dataProps[i].p._mdf){
	            this._mdf = true;
	        }
	        i+=1;
	    }
	    if (this._mdf) {
	        if(this.renderer === 'svg') {
	            this.dashStr = '';
	        }
	        for(i=0;i<len;i+=1){
	            if(this.dataProps[i].n != 'o'){
	                if(this.renderer === 'svg') {
	                    this.dashStr += ' ' + this.dataProps[i].p.v;
	                }else{
	                    this.dashArray[i] = this.dataProps[i].p.v;
	                }
	            }else{
	                this.dashoffset[0] = this.dataProps[i].p.v;
	            }
	        }
	    }
	};
	function GradientProperty(elem,data){
	    this.container = elem;
	    this.prop = PropertyFactory.getProp(elem,data.k,1,null,this);
	    this.data = data;
	    this.k = this.prop.k;
	    this.c = createTypedArray('uint8c', data.p*4);
	    var cLength = data.k.k[0].s ? (data.k.k[0].s.length - data.p*4) : data.k.k.length - data.p*4;
	    this.o = createTypedArray('float32', cLength);
	    this._cmdf = false;
	    this._omdf = false;
	    this._collapsable = this.checkCollapsable();
	    this._hasOpacity = cLength;
	    this._mdf = false;
	    this.getValue(true);
	}
	
	GradientProperty.prototype.addDynamicProperty = function(prop) {
	    this.container.addDynamicProperty(this);
	}
	
	GradientProperty.prototype.comparePoints = function(values, points) {
	    var i = 0, len = this.o.length/2, diff;
	    while(i < len) {
	        diff = Math.abs(values[i*4] - values[points*4 + i*2]);
	        if(diff > 0.01){
	            return false;
	        }
	        i += 1;
	    }
	    return true;
	};
	
	GradientProperty.prototype.checkCollapsable = function() {
	    if (this.o.length/2 !== this.c.length/4) {
	        return false;
	    }
	    if (this.data.k.k[0].s) {
	        var i = 0, len = this.data.k.k.length;
	        while (i < len) {
	            if (!this.comparePoints(this.data.k.k[i].s, this.data.p)) {
	                return false;
	            }
	            i += 1;
	        }
	    } else if(!this.comparePoints(this.data.k.k, this.data.p)) {
	        return false;
	    }
	    return true;
	};
	
	GradientProperty.prototype.getValue = function(forceRender){
	    this.prop.getValue();
	    this._mdf = false;
	    this._cmdf = false;
	    this._omdf = false;
	    if(this.prop._mdf || forceRender){
	        var i, len = this.data.p*4;
	        var mult, val;
	        for(i=0;i<len;i+=1){
	            mult = i%4 === 0 ? 100 : 255;
	            val = Math.round(this.prop.v[i]*mult);
	            if(this.c[i] !== val){
	                this.c[i] = val;
	                this._cmdf = !forceRender;
	            }
	        }
	        if(this.o.length){
	            len = this.prop.v.length;
	            for(i=this.data.p*4;i<len;i+=1){
	                mult = i%2 === 0 ? 100 : 1;
	                val = i%2 === 0 ?  Math.round(this.prop.v[i]*100):this.prop.v[i];
	                if(this.o[i-this.data.p*4] !== val){
	                    this.o[i-this.data.p*4] = val;
	                    this._omdf = !forceRender;
	                }
	            }
	        }
	        this._mdf = !forceRender;
	    }
	};
	var ImagePreloader = (function(){
	
	    function imageLoaded(){
	        this.loadedAssets += 1;
	        if(this.loadedAssets === this.totalImages){
	            if(this.imagesLoadedCb) {
	                this.imagesLoadedCb(null);
	            }
	        }
	    }
	
	    function getAssetsPath(assetData){
	        var path = '';
	        if(this.assetsPath){
	            var imagePath = assetData.p;
	            if(imagePath.indexOf('images/') !== -1){
	                imagePath = imagePath.split('/')[1];
	            }
	            path = this.assetsPath + imagePath;
	        } else {
	            path = this.path;
	            path += assetData.u ? assetData.u : '';
	            path += assetData.p;
	        }
	        return path;
	    }
	
	    function loadImage(path){
	        var img = createTag('img');
	        img.addEventListener('load', imageLoaded.bind(this), false);
	        img.addEventListener('error', imageLoaded.bind(this), false);
	        img.src = path;
	    }
	    function loadAssets(assets, cb){
	        this.imagesLoadedCb = cb;
	        this.totalAssets = assets.length;
	        var i;
	        for(i=0;i<this.totalAssets;i+=1){
	            if(!assets[i].layers){
	                loadImage.bind(this)(getAssetsPath.bind(this)(assets[i]));
	                this.totalImages += 1;
	            }
	        }
	    }
	
	    function setPath(path){
	        this.path = path || '';
	    }
	
	    function setAssetsPath(path){
	        this.assetsPath = path || '';
	    }
	
	    function destroy() {
	        this.imagesLoadedCb = null;
	    }
	
	    return function ImagePreloader(){
	        this.loadAssets = loadAssets;
	        this.setAssetsPath = setAssetsPath;
	        this.setPath = setPath;
	        this.destroy = destroy;
	        this.assetsPath = '';
	        this.path = '';
	        this.totalAssets = 0;
	        this.totalImages = 0;
	        this.loadedAssets = 0;
	        this.imagesLoadedCb = null;
	    };
	}());
	var featureSupport = (function(){
		var ob = {
			maskType: true
		};
		if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
		   ob.maskType = false;
		}
		return ob;
	}());
	var filtersFactory = (function(){
		var ob = {};
		ob.createFilter = createFilter;
		ob.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;
	
		function createFilter(filId){
	        	var fil = createNS('filter');
	        	fil.setAttribute('id',filId);
	                fil.setAttribute('filterUnits','objectBoundingBox');
	                fil.setAttribute('x','0%');
	                fil.setAttribute('y','0%');
	                fil.setAttribute('width','100%');
	                fil.setAttribute('height','100%');
	                return fil;
		}
	
		function createAlphaToLuminanceFilter(){
	                var feColorMatrix = createNS('feColorMatrix');
	                feColorMatrix.setAttribute('type','matrix');
	                feColorMatrix.setAttribute('color-interpolation-filters','sRGB');
	                feColorMatrix.setAttribute('values','0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');
	                return feColorMatrix;
		}
	
		return ob;
	}());
	function TextAnimatorProperty(textData, renderType, elem){
	    this._mdf = false;
	    this._isFirstFrame = true;
		this._hasMaskedPath = false;
		this._frameId = -1;
		this.dynamicProperties = [];
		this._textData = textData;
		this._renderType = renderType;
	    this._elem = elem;
		this.container = elem;
		this._animatorsData = createSizedArray(this._textData.a.length);
		this._pathData = {};
		this._moreOptions = {
			alignment: {}
		};
		this.renderedLetters = [];
	    this.lettersChangedFlag = false;
	
	}
	
	TextAnimatorProperty.prototype.addDynamicProperty = addDynamicProperty;
	
	TextAnimatorProperty.prototype.searchProperties = function(){
	    var i, len = this._textData.a.length, animatorProps;
	    var getProp = PropertyFactory.getProp;
	    for(i=0;i<len;i+=1){
	        animatorProps = this._textData.a[i];
	        this._animatorsData[i] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
	    }
	    if(this._textData.p && 'm' in this._textData.p){
	        this._pathData = {
	            f: getProp(this._elem,this._textData.p.f,0,0,this),
	            l: getProp(this._elem,this._textData.p.l,0,0,this),
	            r: this._textData.p.r,
	            m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
	        };
	        this._hasMaskedPath = true;
	    } else {
	        this._hasMaskedPath = false;
	    }
	    this._moreOptions.alignment = getProp(this._elem,this._textData.m.a,1,0,this);
	};
	
	TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag){
	    this.lettersChangedFlag = lettersChangedFlag;
	    if(!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
	        return;
	    }
	    this._isFirstFrame = false;
	    var alignment = this._moreOptions.alignment.v;
	    var animators = this._animatorsData;
	    var textData = this._textData;
	    var matrixHelper = this.mHelper;
	    var renderType = this._renderType;
	    var renderedLettersCount = this.renderedLetters.length;
	    var data = this.data;
	    var xPos,yPos;
	    var i, len;
	    var letters = documentData.l, pathInfo, currentLength, currentPoint, segmentLength, flag, pointInd, segmentInd, prevPoint, points, segments, partialLength, totalLength, perc, tanAngle, mask;
	    if(this._hasMaskedPath) {
	        mask = this._pathData.m;
	        if(!this._pathData.n || this._pathData._mdf){
	            var paths = mask.v;
	            if(this._pathData.r){
	                paths = paths.reverse();
	            }
	            // TODO: release bezier data cached from previous pathInfo: this._pathData.pi
	            pathInfo = {
	                tLength: 0,
	                segments: []
	            };
	            len = paths._length - 1;
	            var pathData;
	            totalLength = 0;
	            for (i = 0; i < len; i += 1) {
	                pathData = {
	                    s: paths.v[i],
	                    e: paths.v[i + 1],
	                    to: [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]],
	                    ti: [paths.i[i + 1][0] - paths.v[i + 1][0], paths.i[i + 1][1] - paths.v[i + 1][1]]
	                };
	                bez.buildBezierData(pathData);
	                pathInfo.tLength += pathData.bezierData.segmentLength;
	                pathInfo.segments.push(pathData);
	                totalLength += pathData.bezierData.segmentLength;
	            }
	            i = len;
	            if (mask.v.c) {
	                pathData = {
	                    s: paths.v[i],
	                    e: paths.v[0],
	                    to: [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]],
	                    ti: [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]
	                };
	                bez.buildBezierData(pathData);
	                pathInfo.tLength += pathData.bezierData.segmentLength;
	                pathInfo.segments.push(pathData);
	                totalLength += pathData.bezierData.segmentLength;
	            }
	            this._pathData.pi = pathInfo;
	        }
	        pathInfo = this._pathData.pi;
	
	        currentLength = this._pathData.f.v;
	        segmentInd = 0;
	        pointInd = 1;
	        segmentLength = 0;
	        flag = true;
	        segments = pathInfo.segments;
	        if (currentLength < 0 && mask.v.c) {
	            if (pathInfo.tLength < Math.abs(currentLength)) {
	                currentLength = -Math.abs(currentLength) % pathInfo.tLength;
	            }
	            segmentInd = segments.length - 1;
	            points = segments[segmentInd].bezierData.points;
	            pointInd = points.length - 1;
	            while (currentLength < 0) {
	                currentLength += points[pointInd].partialLength;
	                pointInd -= 1;
	                if (pointInd < 0) {
	                    segmentInd -= 1;
	                    points = segments[segmentInd].bezierData.points;
	                    pointInd = points.length - 1;
	                }
	            }
	
	        }
	        points = segments[segmentInd].bezierData.points;
	        prevPoint = points[pointInd - 1];
	        currentPoint = points[pointInd];
	        partialLength = currentPoint.partialLength;
	    }
	
	
	    len = letters.length;
	    xPos = 0;
	    yPos = 0;
	    var yOff = documentData.finalSize * 1.2 * 0.714;
	    var firstLine = true;
	    var animatorProps, animatorSelector;
	    var j, jLen;
	    var letterValue;
	
	    jLen = animators.length;
	    var lastLetter;
	
	    var mult, ind = -1, offf, xPathPos, yPathPos;
	    var initPathPos = currentLength,initSegmentInd = segmentInd, initPointInd = pointInd, currentLine = -1;
	    var elemOpacity;
	    var sc,sw,fc,k;
	    var lineLength = 0;
	    var letterSw, letterSc, letterFc, letterM = '', letterP = this.defaultPropsArray, letterO;
	
	    //
	    if(documentData.j === 2 || documentData.j === 1) {
	        var animatorJustifyOffset = 0;
	        var animatorFirstCharOffset = 0;
	        var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
	        var lastIndex = 0;
	        var isNewLine = true;
	
	        for (i = 0; i < len; i += 1) {
	            if (letters[i].n) {
	                if(animatorJustifyOffset) {
	                    animatorJustifyOffset += animatorFirstCharOffset;
	                }
	                while (lastIndex < i) {
	                    letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
	                    lastIndex += 1;
	                }
	                animatorJustifyOffset = 0;
	                isNewLine = true;
	            } else {
	                for (j = 0; j < jLen; j += 1) {
	                    animatorProps = animators[j].a;
	                    if (animatorProps.t.propType) {
	                        if (isNewLine && documentData.j === 2) {
	                            animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
	                        }
	                        animatorSelector = animators[j].s;
	                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
	                        if (mult.length) {
	                            animatorJustifyOffset += animatorProps.t.v*mult[0] * justifyOffsetMult;
	                        } else {
	                            animatorJustifyOffset += animatorProps.t.v*mult * justifyOffsetMult;
	                        }
	                    }
	                }
	                isNewLine = false;
	            }
	        }
	        if(animatorJustifyOffset) {
	            animatorJustifyOffset += animatorFirstCharOffset;
	        }
	        while(lastIndex < i) {
	            letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
	            lastIndex += 1;
	        }
	    }
	    //
	
	    for( i = 0; i < len; i += 1) {
	
	        matrixHelper.reset();
	        elemOpacity = 1;
	        if(letters[i].n) {
	            xPos = 0;
	            yPos += documentData.yOffset;
	            yPos += firstLine ? 1 : 0;
	            currentLength = initPathPos ;
	            firstLine = false;
	            lineLength = 0;
	            if(this._hasMaskedPath) {
	                segmentInd = initSegmentInd;
	                pointInd = initPointInd;
	                points = segments[segmentInd].bezierData.points;
	                prevPoint = points[pointInd - 1];
	                currentPoint = points[pointInd];
	                partialLength = currentPoint.partialLength;
	                segmentLength = 0;
	            }
	            letterO = letterSw = letterFc = letterM = '';
	            letterP = this.defaultPropsArray;
	        }else{
	            if(this._hasMaskedPath) {
	                if(currentLine !== letters[i].line){
	                    switch(documentData.j){
	                        case 1:
	                            currentLength += totalLength - documentData.lineWidths[letters[i].line];
	                            break;
	                        case 2:
	                            currentLength += (totalLength - documentData.lineWidths[letters[i].line])/2;
	                            break;
	                    }
	                    currentLine = letters[i].line;
	                }
	                if (ind !== letters[i].ind) {
	                    if (letters[ind]) {
	                        currentLength += letters[ind].extra;
	                    }
	                    currentLength += letters[i].an / 2;
	                    ind = letters[i].ind;
	                }
	                currentLength += alignment[0] * letters[i].an / 200;
	                var animatorOffset = 0;
	                for (j = 0; j < jLen; j += 1) {
	                    animatorProps = animators[j].a;
	                    if (animatorProps.p.propType) {
	                        animatorSelector = animators[j].s;
	                        mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                        if(mult.length){
	                            animatorOffset += animatorProps.p.v[0] * mult[0];
	                        } else{
	                            animatorOffset += animatorProps.p.v[0] * mult;
	                        }
	
	                    }
	                    if (animatorProps.a.propType) {
	                        animatorSelector = animators[j].s;
	                        mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                        if(mult.length){
	                            animatorOffset += animatorProps.a.v[0] * mult[0];
	                        } else{
	                            animatorOffset += animatorProps.a.v[0] * mult;
	                        }
	
	                    }
	                }
	                flag = true;
	                while (flag) {
	                    if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
	                        perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
	                        xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
	                        yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
	                        matrixHelper.translate(-alignment[0]*letters[i].an/200, -(alignment[1] * yOff / 100));
	                        flag = false;
	                    } else if (points) {
	                        segmentLength += currentPoint.partialLength;
	                        pointInd += 1;
	                        if (pointInd >= points.length) {
	                            pointInd = 0;
	                            segmentInd += 1;
	                            if (!segments[segmentInd]) {
	                                if (mask.v.c) {
	                                    pointInd = 0;
	                                    segmentInd = 0;
	                                    points = segments[segmentInd].bezierData.points;
	                                } else {
	                                    segmentLength -= currentPoint.partialLength;
	                                    points = null;
	                                }
	                            } else {
	                                points = segments[segmentInd].bezierData.points;
	                            }
	                        }
	                        if (points) {
	                            prevPoint = currentPoint;
	                            currentPoint = points[pointInd];
	                            partialLength = currentPoint.partialLength;
	                        }
	                    }
	                }
	                offf = letters[i].an / 2 - letters[i].add;
	                matrixHelper.translate(-offf, 0, 0);
	            } else {
	                offf = letters[i].an/2 - letters[i].add;
	                matrixHelper.translate(-offf,0,0);
	
	                // Grouping alignment
	                matrixHelper.translate(-alignment[0]*letters[i].an/200, -alignment[1]*yOff/100, 0);
	            }
	
	            lineLength += letters[i].l/2;
	            for(j=0;j<jLen;j+=1){
	                animatorProps = animators[j].a;
	                if (animatorProps.t.propType) {
	                    animatorSelector = animators[j].s;
	                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                    //This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"
	                    if(xPos !== 0 || documentData.j !== 0) {
	                        if(this._hasMaskedPath) {
	                            if(mult.length) {
	                                currentLength += animatorProps.t.v*mult[0];
	                            } else {
	                                currentLength += animatorProps.t.v*mult;
	                            }
	                        }else{
	                            if(mult.length) {
	                                xPos += animatorProps.t.v*mult[0];
	                            } else {
	                                xPos += animatorProps.t.v*mult;
	                            }
	                        }
	                    }
	                }
	            }
	            lineLength += letters[i].l/2;
	            if(documentData.strokeWidthAnim) {
	                sw = documentData.sw || 0;
	            }
	            if(documentData.strokeColorAnim) {
	                if(documentData.sc){
	                    sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
	                }else{
	                    sc = [0,0,0];
	                }
	            }
	            if(documentData.fillColorAnim && documentData.fc) {
	                fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
	            }
	            for(j=0;j<jLen;j+=1){
	                animatorProps = animators[j].a;
	                if (animatorProps.a.propType) {
	                    animatorSelector = animators[j].s;
	                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	
	                    if(mult.length){
	                        matrixHelper.translate(-animatorProps.a.v[0]*mult[0], -animatorProps.a.v[1]*mult[1], animatorProps.a.v[2]*mult[2]);
	                    } else {
	                        matrixHelper.translate(-animatorProps.a.v[0]*mult, -animatorProps.a.v[1]*mult, animatorProps.a.v[2]*mult);
	                    }
	                }
	            }
	            for(j=0;j<jLen;j+=1){
	                animatorProps = animators[j].a;
	                if (animatorProps.s.propType) {
	                    animatorSelector = animators[j].s;
	                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                    if(mult.length){
	                        matrixHelper.scale(1+((animatorProps.s.v[0]-1)*mult[0]),1+((animatorProps.s.v[1]-1)*mult[1]),1);
	                    } else {
	                        matrixHelper.scale(1+((animatorProps.s.v[0]-1)*mult),1+((animatorProps.s.v[1]-1)*mult),1);
	                    }
	                }
	            }
	            for(j=0;j<jLen;j+=1) {
	                animatorProps = animators[j].a;
	                animatorSelector = animators[j].s;
	                mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                if (animatorProps.sk.propType) {
	                    if(mult.length) {
	                        matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
	                    } else {
	                        matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
	                    }
	                }
	                if (animatorProps.r.propType) {
	                    if(mult.length) {
	                        matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
	                    } else {
	                        matrixHelper.rotateZ(-animatorProps.r.v * mult);
	                    }
	                }
	                if (animatorProps.ry.propType) {
	
	                    if(mult.length) {
	                        matrixHelper.rotateY(animatorProps.ry.v*mult[1]);
	                    }else{
	                        matrixHelper.rotateY(animatorProps.ry.v*mult);
	                    }
	                }
	                if (animatorProps.rx.propType) {
	                    if(mult.length) {
	                        matrixHelper.rotateX(animatorProps.rx.v*mult[0]);
	                    } else {
	                        matrixHelper.rotateX(animatorProps.rx.v*mult);
	                    }
	                }
	                if (animatorProps.o.propType) {
	                    if(mult.length) {
	                        elemOpacity += ((animatorProps.o.v)*mult[0] - elemOpacity)*mult[0];
	                    } else {
	                        elemOpacity += ((animatorProps.o.v)*mult - elemOpacity)*mult;
	                    }
	                }
	                if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
	                    if(mult.length) {
	                        sw += animatorProps.sw.v*mult[0];
	                    } else {
	                        sw += animatorProps.sw.v*mult;
	                    }
	                }
	                if (documentData.strokeColorAnim && animatorProps.sc.propType) {
	                    for(k=0;k<3;k+=1){
	                        if(mult.length) {
	                            sc[k] = sc[k] + (animatorProps.sc.v[k] - sc[k])*mult[0];
	                        } else {
	                            sc[k] = sc[k] + (animatorProps.sc.v[k] - sc[k])*mult;
	                        }
	                    }
	                }
	                if (documentData.fillColorAnim && documentData.fc) {
	                    if(animatorProps.fc.propType){
	                        for(k=0;k<3;k+=1){
	                            if(mult.length) {
	                                fc[k] = fc[k] + (animatorProps.fc.v[k] - fc[k])*mult[0];
	                            } else {
	                                fc[k] = fc[k] + (animatorProps.fc.v[k] - fc[k])*mult;
	                            }
	                        }
	                    }
	                    if(animatorProps.fh.propType){
	                        if(mult.length) {
	                            fc = addHueToRGB(fc,animatorProps.fh.v*mult[0]);
	                        } else {
	                            fc = addHueToRGB(fc,animatorProps.fh.v*mult);
	                        }
	                    }
	                    if(animatorProps.fs.propType){
	                        if(mult.length) {
	                            fc = addSaturationToRGB(fc,animatorProps.fs.v*mult[0]);
	                        } else {
	                            fc = addSaturationToRGB(fc,animatorProps.fs.v*mult);
	                        }
	                    }
	                    if(animatorProps.fb.propType){
	                        if(mult.length) {
	                            fc = addBrightnessToRGB(fc,animatorProps.fb.v*mult[0]);
	                        } else {
	                            fc = addBrightnessToRGB(fc,animatorProps.fb.v*mult);
	                        }
	                    }
	                }
	            }
	
	            for(j=0;j<jLen;j+=1){
	                animatorProps = animators[j].a;
	
	                if (animatorProps.p.propType) {
	                    animatorSelector = animators[j].s;
	                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                    if(this._hasMaskedPath) {
	                        if(mult.length) {
	                            matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
	                        } else {
	                            matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
	                        }
	                    }else{
	                        if(mult.length) {
	                            matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
	                        } else {
	                            matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
	                        
	                        }
	                    }
	                }
	            }
	            if(documentData.strokeWidthAnim){
	                letterSw = sw < 0 ? 0 : sw;
	            }
	            if(documentData.strokeColorAnim){
	                letterSc = 'rgb('+Math.round(sc[0]*255)+','+Math.round(sc[1]*255)+','+Math.round(sc[2]*255)+')';
	            }
	            if(documentData.fillColorAnim && documentData.fc){
	                letterFc = 'rgb('+Math.round(fc[0]*255)+','+Math.round(fc[1]*255)+','+Math.round(fc[2]*255)+')';
	            }
	
	            if(this._hasMaskedPath) {
	                matrixHelper.translate(0,-documentData.ls);
	
	                matrixHelper.translate(0, alignment[1]*yOff/100 + yPos,0);
	                if (textData.p.p) {
	                    tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
	                    var rot = Math.atan(tanAngle) * 180 / Math.PI;
	                    if (currentPoint.point[0] < prevPoint.point[0]) {
	                        rot += 180;
	                    }
	                    matrixHelper.rotate(-rot * Math.PI / 180);
	                }
	                matrixHelper.translate(xPathPos, yPathPos, 0);
	                currentLength -= alignment[0]*letters[i].an/200;
	                if(letters[i+1] && ind !== letters[i+1].ind){
	                    currentLength += letters[i].an / 2;
	                    currentLength += documentData.tr/1000*documentData.finalSize;
	                }
	            }else{
	
	                matrixHelper.translate(xPos,yPos,0);
	
	                if(documentData.ps){
	                    //matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
	                    matrixHelper.translate(documentData.ps[0],documentData.ps[1] + documentData.ascent,0);
	                }
	                switch(documentData.j){
	                    case 1:
	                        matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]),0,0);
	                        break;
	                    case 2:
	                        matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line])/2,0,0);
	                        break;
	                }
	                matrixHelper.translate(0,-documentData.ls);
	                matrixHelper.translate(offf,0,0);
	                matrixHelper.translate(alignment[0]*letters[i].an/200,alignment[1]*yOff/100,0);
	                xPos += letters[i].l + documentData.tr/1000*documentData.finalSize;
	            }
	            if(renderType === 'html'){
	                letterM = matrixHelper.toCSS();
	            }else if(renderType === 'svg'){
	                letterM = matrixHelper.to2dCSS();
	            }else{
	                letterP = [matrixHelper.props[0],matrixHelper.props[1],matrixHelper.props[2],matrixHelper.props[3],matrixHelper.props[4],matrixHelper.props[5],matrixHelper.props[6],matrixHelper.props[7],matrixHelper.props[8],matrixHelper.props[9],matrixHelper.props[10],matrixHelper.props[11],matrixHelper.props[12],matrixHelper.props[13],matrixHelper.props[14],matrixHelper.props[15]];
	            }
	            letterO = elemOpacity;
	        }
	
	        if(renderedLettersCount <= i) {
	            letterValue = new LetterProps(letterO,letterSw,letterSc,letterFc,letterM,letterP);
	            this.renderedLetters.push(letterValue);
	            renderedLettersCount += 1;
	            this.lettersChangedFlag = true;
	        } else {
	            letterValue = this.renderedLetters[i];
	            this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
	        }
	    }
	};
	
	TextAnimatorProperty.prototype.getValue = function(){
		if(this._elem.globalData.frameId === this._frameId){
	        return;
	    }
	    this._frameId = this._elem.globalData.frameId;
		var i, len = this.dynamicProperties.length;
	    this._mdf = false;
		for(i = 0; i < len; i += 1) {
			this.dynamicProperties[i].getValue();
	        this._mdf = this.dynamicProperties[i]._mdf || this._mdf;
		}
	};
	
	TextAnimatorProperty.prototype.mHelper = new Matrix();
	TextAnimatorProperty.prototype.defaultPropsArray = [];
	function TextAnimatorDataProperty(elem, animatorProps, container) {
		var defaultData = {propType:false};
		var getProp = PropertyFactory.getProp;
		var textAnimator_animatables = animatorProps.a;
		this.a = {
			r: textAnimator_animatables.r ? getProp(elem, textAnimator_animatables.r, 0, degToRads, container) : defaultData,
			rx: textAnimator_animatables.rx ? getProp(elem, textAnimator_animatables.rx, 0, degToRads, container) : defaultData,
			ry: textAnimator_animatables.ry ? getProp(elem, textAnimator_animatables.ry, 0, degToRads, container) : defaultData,
			sk: textAnimator_animatables.sk ? getProp(elem, textAnimator_animatables.sk, 0, degToRads, container) : defaultData,
			sa: textAnimator_animatables.sa ? getProp(elem, textAnimator_animatables.sa, 0, degToRads, container) : defaultData,
			s: textAnimator_animatables.s ? getProp(elem, textAnimator_animatables.s, 1, 0.01, container) : defaultData,
			a: textAnimator_animatables.a ? getProp(elem, textAnimator_animatables.a, 1, 0, container) : defaultData,
			o: textAnimator_animatables.o ? getProp(elem, textAnimator_animatables.o, 0, 0.01, container) : defaultData,
			p: textAnimator_animatables.p ? getProp(elem,textAnimator_animatables.p, 1, 0, container) : defaultData,
			sw: textAnimator_animatables.sw ? getProp(elem, textAnimator_animatables.sw, 0, 0, container) : defaultData,
			sc: textAnimator_animatables.sc ? getProp(elem, textAnimator_animatables.sc, 1, 0, container) : defaultData,
			fc: textAnimator_animatables.fc ? getProp(elem, textAnimator_animatables.fc, 1, 0, container) : defaultData,
			fh: textAnimator_animatables.fh ? getProp(elem, textAnimator_animatables.fh, 0, 0, container) : defaultData,
			fs: textAnimator_animatables.fs ? getProp(elem, textAnimator_animatables.fs, 0, 0.01, container) : defaultData,
			fb: textAnimator_animatables.fb ? getProp(elem, textAnimator_animatables.fb, 0, 0.01, container) : defaultData,
			t: textAnimator_animatables.t ? getProp(elem, textAnimator_animatables.t, 0, 0, container) : defaultData
		};
	
		this.s = TextSelectorProp.getTextSelectorProp(elem,animatorProps.s, container);
	    this.s.t = animatorProps.s.t;
	}
	function LetterProps(o, sw, sc, fc, m, p){
	    this.o = o;
	    this.sw = sw;
	    this.sc = sc;
	    this.fc = fc;
	    this.m = m;
	    this.p = p;
	    this._mdf = {
	    	o: true,
	    	sw: !!sw,
	    	sc: !!sc,
	    	fc: !!fc,
	    	m: true,
	    	p: true
	    };
	}
	
	LetterProps.prototype.update = function(o, sw, sc, fc, m, p) {
		this._mdf.o = false;
		this._mdf.sw = false;
		this._mdf.sc = false;
		this._mdf.fc = false;
		this._mdf.m = false;
		this._mdf.p = false;
		var updated = false;
	
		if(this.o !== o) {
			this.o = o;
			this._mdf.o = true;
			updated = true;
		}
		if(this.sw !== sw) {
			this.sw = sw;
			this._mdf.sw = true;
			updated = true;
		}
		if(this.sc !== sc) {
			this.sc = sc;
			this._mdf.sc = true;
			updated = true;
		}
		if(this.fc !== fc) {
			this.fc = fc;
			this._mdf.fc = true;
			updated = true;
		}
		if(this.m !== m) {
			this.m = m;
			this._mdf.m = true;
			updated = true;
		}
		if(p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {
			this.p = p;
			this._mdf.p = true;
			updated = true;
		}
		return updated;
	};
	function TextProperty(elem, data){
		this._frameId = initialDefaultFrame;
		this.pv = '';
		this.v = '';
		this.kf = false;
		this._isFirstFrame = true;
		this._mdf = false;
		this.data = data;
		this.elem = elem;
	    this.comp = this.elem.comp;
		this.keysIndex = -1;
	    this.canResize = false;
	    this.minimumFontSize = 1;
	    this.effectsSequence = [];
		this.currentData = {
			ascent: 0,
	        boxWidth: this.defaultBoxWidth,
	        f: '',
	        fStyle: '',
	        fWeight: '',
	        fc: '',
	        j: '',
	        justifyOffset: '',
	        l: [],
	        lh: 0,
	        lineWidths: [],
	        ls: '',
	        of: '',
	        s: '',
	        sc: '',
	        sw: 0,
	        t: 0,
	        tr: 0,
	        sz:0,
	        ps:null,
	        fillColorAnim: false,
	        strokeColorAnim: false,
	        strokeWidthAnim: false,
	        yOffset: 0,
	        finalSize:0,
	        finalText:[],
	        finalLineHeight: 0,
	        __test: true
	
		};
	    this.copyFromDocumentData(this.data.d.k[0].s);
	    
	    if(!this.searchProperty()) {
	        this.completeTextData(this.currentData);
	        this.keysIndex = 0;
	    }
	}
	
	TextProperty.prototype.defaultBoxWidth = [0,0];
	
	TextProperty.prototype.copyFromDocumentData = function(data) {
	    for(var s in data) {
	        this.currentData[s] = data[s];
	    }
	}
	
	TextProperty.prototype.setCurrentData = function(data, currentTextValue){
	        if(this.currentData !== data) {
	            if(!data.__complete) {
	                this.completeTextData(data);
	            }
	            this.copyFromDocumentData(data);
	            this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
	            this.currentData.fillColorAnim = data.fillColorAnim || this.currentData.fillColorAnim;
	            this.currentData.strokeColorAnim = data.strokeColorAnim || this.currentData.strokeColorAnim;
	            this.currentData.strokeWidthAnim = data.strokeWidthAnim || this.currentData.strokeWidthAnim;
	            this._mdf = true;
	        } else if(currentTextValue !== this.currentData.t) {
	            this._mdf = true;
	            this.completeTextData(data);
	        }
			/*var currentData = this.currentData;
	        currentData.ascent = data.ascent;
	        currentData.boxWidth = data.boxWidth ? data.boxWidth : currentData.boxWidth;
	        currentData.f = data.f;
	        currentData.fStyle = data.fStyle;
	        currentData.fWeight = data.fWeight;
	        currentData.fc = data.fc;
	        currentData.j = data.j;
	        currentData.justifyOffset = data.justifyOffset;
	        currentData.l = data.l;
	        currentData.lh = data.lh;
	        currentData.lineWidths = data.lineWidths;
	        currentData.ls = data.ls;
	        currentData.of = data.of;
	        currentData.s = data.s;
	        currentData.sc = data.sc;
	        currentData.sw = data.sw;
	        currentData.sz = data.sz;
	        currentData.ps = data.ps;
	        currentData.t = data.t;
	        currentData.tr = data.tr;
	        currentData.fillColorAnim = data.fillColorAnim || currentData.fillColorAnim;
	        currentData.strokeColorAnim = data.strokeColorAnim || currentData.strokeColorAnim;
	        currentData.strokeWidthAnim = data.strokeWidthAnim || currentData.strokeWidthAnim;
	        currentData.yOffset = data.yOffset;
	        currentData.finalSize = data.finalSize;
	        currentData.finalLineHeight = data.finalLineHeight;
	        currentData.finalText = data.finalText;*/
	};
	
	TextProperty.prototype.searchProperty = function() {
	    return this.searchKeyframes();
	};
	
	TextProperty.prototype.searchKeyframes = function() {
	    this.kf = this.data.d.k.length > 1;
	    if(this.kf) {
	        this.addEffect(this.getKeyframeValue.bind(this));
	    }
	    return this.kf;
	}
	
	TextProperty.prototype.addEffect = function(effectFunction) {
		this.effectsSequence.push(effectFunction);
	    this.elem.addDynamicProperty(this);
	};
	
	TextProperty.prototype.getValue = function(_finalValue) {
	    if((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
	        return;
	    }
	    var currentTextValue = this.currentData.t;        
	    if(this.lock) {
	        this.setCurrentData(this.currentData, currentTextValue);
	        return;
	    }
	    this.lock = true;
	    this._mdf = false;
	    var multipliedValue;
	    var i, len = this.effectsSequence.length;
	    var finalValue = _finalValue || this.currentData;
	    for(i = 0; i < len; i += 1) {
	        finalValue = this.effectsSequence[i](finalValue);
	    }
	    this.setCurrentData(finalValue, currentTextValue);
	    this.pv = this.v = this.currentData;
	    this.lock = false;
	    this.frameId = this.elem.globalData.frameId;
	}
	
	TextProperty.prototype.getKeyframeValue = function(currentValue) {
	    var textKeys = this.data.d.k, textDocumentData;
	    var frameNum = this.elem.comp.renderedFrame;
	    var i = 0, len = textKeys.length;
	    while(i <= len - 1) {
	        textDocumentData = textKeys[i].s;
	        if(i === len - 1 || textKeys[i+1].t > frameNum){
	            break;
	        }
	        i += 1;
	    }
	    if(this.keysIndex !== i) {
	        currentValue = textDocumentData;
	        this.keysIndex = i;
	    }
	    return currentValue;
	};
	
	TextProperty.prototype.buildFinalText = function(text) {
	    var combinedCharacters = FontManager.getCombinedCharacterCodes();
	    var charactersArray = [];
	    var i = 0, len = text.length;
	    while (i < len) {
	        if (combinedCharacters.indexOf(text.charCodeAt(i)) !== -1) {
	            charactersArray[charactersArray.length - 1] += text.charAt(i);
	        } else {
	            charactersArray.push(text.charAt(i));
	        }
	        i += 1;
	    }
	    return charactersArray;
	}
	
	TextProperty.prototype.completeTextData = function(documentData) {
	    documentData.__complete = true;
	    var fontManager = this.elem.globalData.fontManager;
	    var data = this.data;
	    var letters = [];
	    var i, len;
	    var newLineFlag, index = 0, val;
	    var anchorGrouping = data.m.g;
	    var currentSize = 0, currentPos = 0, currentLine = 0, lineWidths = [];
	    var lineWidth = 0;
	    var maxLineWidth = 0;
	    var j, jLen;
	    var fontData = fontManager.getFontByName(documentData.f);
	    var charData, cLength = 0;
	    var styles = fontData.fStyle ? fontData.fStyle.split(' ') : [];
	
	    var fWeight = 'normal', fStyle = 'normal';
	    len = styles.length;
	    var styleName;
	    for(i=0;i<len;i+=1){
	        styleName = styles[i].toLowerCase();
	        switch(styleName) {
	            case 'italic':
	            fStyle = 'italic';
	            break;
	            case 'bold':
	            fWeight = '700';
	            break;
	            case 'black':
	            fWeight = '900';
	            break;
	            case 'medium':
	            fWeight = '500';
	            break;
	            case 'regular':
	            case 'normal':
	            fWeight = '400';
	            break;
	            case 'light':
	            case 'thin':
	            fWeight = '200';
	            break;
	        }
	    }
	    documentData.fWeight = fontData.fWeight || fWeight;
	    documentData.fStyle = fStyle;
	    len = documentData.t.length;
	    documentData.finalSize = documentData.s;
	    documentData.finalText = this.buildFinalText(documentData.t);
	    documentData.finalLineHeight = documentData.lh;
	    var trackingOffset = documentData.tr/1000*documentData.finalSize;
	    if(documentData.sz){
	        var flag = true;
	        var boxWidth = documentData.sz[0];
	        var boxHeight = documentData.sz[1];
	        var currentHeight, finalText;
	        while(flag) {
	            finalText = this.buildFinalText(documentData.t);
	            currentHeight = 0;
	            lineWidth = 0;
	            len = finalText.length;
	            trackingOffset = documentData.tr/1000*documentData.finalSize;
	            var lastSpaceIndex = -1;
	            for(i=0;i<len;i+=1){
	                newLineFlag = false;
	                if(finalText[i] === ' '){
	                    lastSpaceIndex = i;
	                }else if(finalText[i].charCodeAt(0) === 13){
	                    lineWidth = 0;
	                    newLineFlag = true;
	                    currentHeight += documentData.finalLineHeight || documentData.finalSize*1.2;
	                }
	                if(fontManager.chars){
	                    charData = fontManager.getCharData(finalText[i], fontData.fStyle, fontData.fFamily);
	                    cLength = newLineFlag ? 0 : charData.w*documentData.finalSize/100;
	                }else{
	                    //tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
	                    cLength = fontManager.measureText(finalText[i], documentData.f, documentData.finalSize);
	                }
	                if(lineWidth + cLength > boxWidth && finalText[i] !== ' '){
	                    if(lastSpaceIndex === -1){
	                        len += 1;
	                    } else {
	                        i = lastSpaceIndex;
	                    }
	                    currentHeight += documentData.finalLineHeight || documentData.finalSize*1.2;
	                    finalText.splice(i, lastSpaceIndex === i ? 1 : 0,"\r");
	                    //finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);
	                    lastSpaceIndex = -1;
	                    lineWidth = 0;
	                }else {
	                    lineWidth += cLength;
	                    lineWidth += trackingOffset;
	                }
	            }
	            currentHeight += fontData.ascent*documentData.finalSize/100;
	            if(this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
	                documentData.finalSize -= 1;
	                documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
	            } else {
	                documentData.finalText = finalText;
	                len = documentData.finalText.length;
	                flag = false;
	            }
	        }
	
	    }
	    lineWidth = - trackingOffset;
	    cLength = 0;
	    var uncollapsedSpaces = 0;
	    var currentChar;
	    for (i = 0;i < len ;i += 1) {
	        newLineFlag = false;
	        currentChar = documentData.finalText[i];
	        if(currentChar === ' '){
	            val = '\u00A0';
	        }else if(currentChar.charCodeAt(0) === 13){
	            uncollapsedSpaces = 0;
	            lineWidths.push(lineWidth);
	            maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
	            lineWidth = - 2 * trackingOffset;
	            val = '';
	            newLineFlag = true;
	            currentLine += 1;
	        }else{
	            val = documentData.finalText[i];
	        }
	        if(fontManager.chars){
	            charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
	            cLength = newLineFlag ? 0 : charData.w*documentData.finalSize/100;
	        }else{
	            //var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
	            //tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
	            cLength = fontManager.measureText(val, documentData.f, documentData.finalSize);
	        }
	
	        //
	        if(currentChar === ' '){
	            uncollapsedSpaces += cLength + trackingOffset;
	        } else {
	            lineWidth += cLength + trackingOffset + uncollapsedSpaces;
	            uncollapsedSpaces = 0;
	        }
	        letters.push({l:cLength,an:cLength,add:currentSize,n:newLineFlag, anIndexes:[], val: val, line: currentLine, animatorJustifyOffset: 0});
	        if(anchorGrouping == 2){
	            currentSize += cLength;
	            if(val === '' || val === '\u00A0' || i === len - 1){
	                if(val === '' || val === '\u00A0'){
	                    currentSize -= cLength;
	                }
	                while(currentPos<=i){
	                    letters[currentPos].an = currentSize;
	                    letters[currentPos].ind = index;
	                    letters[currentPos].extra = cLength;
	                    currentPos += 1;
	                }
	                index += 1;
	                currentSize = 0;
	            }
	        }else if(anchorGrouping == 3){
	            currentSize += cLength;
	            if(val === '' || i === len - 1){
	                if(val === ''){
	                    currentSize -= cLength;
	                }
	                while(currentPos<=i){
	                    letters[currentPos].an = currentSize;
	                    letters[currentPos].ind = index;
	                    letters[currentPos].extra = cLength;
	                    currentPos += 1;
	                }
	                currentSize = 0;
	                index += 1;
	            }
	        }else{
	            letters[index].ind = index;
	            letters[index].extra = 0;
	            index += 1;
	        }
	    }
	    documentData.l = letters;
	    maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
	    lineWidths.push(lineWidth);
	    if(documentData.sz){
	        documentData.boxWidth = documentData.sz[0];
	        documentData.justifyOffset = 0;
	    }else{
	        documentData.boxWidth = maxLineWidth;
	        switch(documentData.j){
	            case 1:
	                documentData.justifyOffset = - documentData.boxWidth;
	                break;
	            case 2:
	                documentData.justifyOffset = - documentData.boxWidth/2;
	                break;
	            default:
	                documentData.justifyOffset = 0;
	        }
	    }
	    documentData.lineWidths = lineWidths;
	
	    var animators = data.a, animatorData, letterData;
	    jLen = animators.length;
	    var based, ind, indexes = [];
	    for(j=0;j<jLen;j+=1){
	        animatorData = animators[j];
	        if(animatorData.a.sc){
	            documentData.strokeColorAnim = true;
	        }
	        if(animatorData.a.sw){
	            documentData.strokeWidthAnim = true;
	        }
	        if(animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb){
	            documentData.fillColorAnim = true;
	        }
	        ind = 0;
	        based = animatorData.s.b;
	        for(i=0;i<len;i+=1){
	            letterData = letters[i];
	            letterData.anIndexes[j] = ind;
	            if((based == 1 && letterData.val !== '') || (based == 2 && letterData.val !== '' && letterData.val !== '\u00A0') || (based == 3 && (letterData.n || letterData.val == '\u00A0' || i == len - 1)) || (based == 4 && (letterData.n || i == len - 1))){
	                if(animatorData.s.rn === 1){
	                    indexes.push(ind);
	                }
	                ind += 1;
	            }
	        }
	        data.a[j].s.totalChars = ind;
	        var currentInd = -1, newInd;
	        if(animatorData.s.rn === 1){
	            for(i = 0; i < len; i += 1){
	                letterData = letters[i];
	                if(currentInd != letterData.anIndexes[j]){
	                    currentInd = letterData.anIndexes[j];
	                    newInd = indexes.splice(Math.floor(Math.random()*indexes.length),1)[0];
	                }
	                letterData.anIndexes[j] = newInd;
	            }
	        }
	    }
	    documentData.yOffset = documentData.finalLineHeight || documentData.finalSize*1.2;
	    documentData.ls = documentData.ls || 0;
	    documentData.ascent = fontData.ascent*documentData.finalSize/100;
	};
	
	TextProperty.prototype.updateDocumentData = function(newData, index) {
		index = index === undefined 
	    ? this.keysIndex === -1 
	        ? 0 
	        : this.keysIndex 
	    : index;
	    var dData = this.data.d.k[index].s;
	    for(var s in newData) {
	        dData[s] = newData[s];
	    }
	    this.recalculate(index);
	};
	
	TextProperty.prototype.recalculate = function(index) {
	    var dData = this.data.d.k[index].s;
	    dData.__complete = false;
	    this.keysIndex = this.kf ? -1 : 0;
	    this._isFirstFrame = true;
	    this.getValue(dData);
	}
	
	TextProperty.prototype.canResizeFont = function(_canResize) {
	    this.canResize = _canResize;
	    this.recalculate(this.keysIndex);
	};
	
	TextProperty.prototype.setMinimumFontSize = function(_fontValue) {
	    this.minimumFontSize = Math.floor(_fontValue) || 1;
	    this.recalculate(this.keysIndex);
	};
	
	var TextSelectorProp = (function(){
	    var max = Math.max;
	    var min = Math.min;
	    var floor = Math.floor;
	
	    function TextSelectorProp(elem,data){
	        this._mdf = false;
	        this._currentTextLength = -1;
	        this.k = false;
	        this.data = data;
	        this.dynamicProperties = [];
	        this.elem = elem;
	        this.container = elem;
	        this.comp = elem.comp;
	        this.finalS = 0;
	        this.finalE = 0;
	        this.s = PropertyFactory.getProp(elem,data.s || {k:0},0,0,this);
	        if('e' in data){
	            this.e = PropertyFactory.getProp(elem,data.e,0,0,this);
	        }else{
	            this.e = {v:100};
	        }
	        this.o = PropertyFactory.getProp(elem,data.o || {k:0},0,0,this);
	        this.xe = PropertyFactory.getProp(elem,data.xe || {k:0},0,0,this);
	        this.ne = PropertyFactory.getProp(elem,data.ne || {k:0},0,0,this);
	        this.a = PropertyFactory.getProp(elem,data.a,0,0.01,this);
	        if(!this.dynamicProperties.length){
	            this.getValue();
	        }
	    }
	
	    TextSelectorProp.prototype = {
	        addDynamicProperty: addDynamicProperty,
	        getMult: function(ind) {
	            if(this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
	                this.getValue();
	            }
	            //var easer = bez.getEasingCurve(this.ne.v/100,0,1-this.xe.v/100,1);
	            var easer = BezierFactory.getBezierEasing(this.ne.v/100,0,1-this.xe.v/100,1).get;
	            var mult = 0;
	            var s = this.finalS;
	            var e = this.finalE;
	            var type = this.data.sh;
	            if(type == 2){
	                if(e === s){
	                    mult = ind >= e ? 1 : 0;
	                }else{
	                    mult = max(0,min(0.5/(e-s) + (ind-s)/(e-s),1));
	                }
	                mult = easer(mult);
	            }else if(type == 3){
	                if(e === s){
	                    mult = ind >= e ? 0 : 1;
	                }else{
	                    mult = 1 - max(0,min(0.5/(e-s) + (ind-s)/(e-s),1));
	                }
	
	                mult = easer(mult);
	            }else if(type == 4){
	                if(e === s){
	                    mult = 0;
	                }else{
	                    mult = max(0,min(0.5/(e-s) + (ind-s)/(e-s),1));
	                    if(mult<0.5){
	                        mult *= 2;
	                    }else{
	                        mult = 1 - 2*(mult-0.5);
	                    }
	                }
	                mult = easer(mult);
	            }else if(type == 5){
	                if(e === s){
	                    mult = 0;
	                }else{
	                    var tot = e - s;
	                    /*ind += 0.5;
	                    mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind;*/
	                    ind = min(max(0,ind+0.5-s),e-s);
	                    var x = -tot/2+ind;
	                    var a = tot/2;
	                    mult = Math.sqrt(1 - (x*x)/(a*a));
	                }
	                mult = easer(mult);
	            }else if(type == 6){
	                if(e === s){
	                    mult = 0;
	                }else{
	                    ind = min(max(0,ind+0.5-s),e-s);
	                    mult = (1+(Math.cos((Math.PI+Math.PI*2*(ind)/(e-s)))))/2;
	                    /*
	                     ind = Math.min(Math.max(s,ind),e-1);
	                     mult = (1+(Math.cos((Math.PI+Math.PI*2*(ind-s)/(e-1-s)))))/2;
	                     mult = Math.max(mult,(1/(e-1-s))/(e-1-s));*/
	                }
	                mult = easer(mult);
	            }else {
	                if(ind >= floor(s)){
	                    if(ind-s < 0){
	                        mult = 1 - (s - ind);
	                    }else{
	                        mult = max(0,min(e-ind,1));
	                    }
	                }
	                mult = easer(mult);
	            }
	            return mult*this.a.v;
	        },
	        getValue: function(newCharsFlag) {
	            this._mdf = newCharsFlag || false;
	            if(this.dynamicProperties.length){
	                var i, len = this.dynamicProperties.length;
	                for(i=0;i<len;i+=1){
	                    this.dynamicProperties[i].getValue();
	                    if(this.dynamicProperties[i]._mdf){
	                        this._mdf = true;
	                    }
	                }
	            }
	            this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
	            if(newCharsFlag && this.data.r === 2) {
	                this.e.v = this._currentTextLength;
	            }
	            var divisor = this.data.r === 2 ? 1 : 100 / this._currentTextLength;
	            var o = this.o.v/divisor;
	            var s = this.s.v/divisor + o;
	            var e = (this.e.v/divisor) + o;
	            if(s>e){
	                var _s = s;
	                s = e;
	                e = _s;
	            }
	            this.finalS = s;
	            this.finalE = e;
	        }
	    }
	
	    function getTextSelectorProp(elem, data,arr) {
	        return new TextSelectorProp(elem, data, arr);
	    }
	
	    return {
	        getTextSelectorProp: getTextSelectorProp
	    };
	}());
	
	    
	var pool_factory = (function() {
		return function(initialLength, _create, _release, _clone) {
	
			var _length = 0;
			var _maxLength = initialLength;
			var pool = createSizedArray(_maxLength);
	
			var ob = {
				newElement: newElement,
				release: release
			};
	
			function newElement(){
				var element;
				if(_length){
					_length -= 1;
					element = pool[_length];
				} else {
					element = _create();
				}
				return element;
			}
	
			function release(element) {
				if(_length === _maxLength) {
					pool = pooling.double(pool);
					_maxLength = _maxLength*2;
				}
				if (_release) {
					_release(element);
				}
				pool[_length] = element;
				_length += 1;
			}
	
			function clone() {
				var clonedElement = newElement();
				return _clone(clonedElement);
			}
	
			return ob;
		};
	}());
	
	var pooling = (function(){
	
		function double(arr){
			return arr.concat(createSizedArray(arr.length));
		}
	
		return {
			double: double
		};
	}());
	var point_pool = (function(){
	
		function create() {
			return createTypedArray('float32', 2);
		}
		return pool_factory(8, create);
	}());
	var shape_pool = (function(){
	
		function create() {
			return new ShapePath();
		}
	
		function release(shapePath) {
			var len = shapePath._length, i;
			for(i = 0; i < len; i += 1) {
				point_pool.release(shapePath.v[i]);
				point_pool.release(shapePath.i[i]);
				point_pool.release(shapePath.o[i]);
				shapePath.v[i] = null;
				shapePath.i[i] = null;
				shapePath.o[i] = null;
			}
			shapePath._length = 0;
			shapePath.c = false;
		}
	
		function clone(shape) {
			var cloned = factory.newElement();
			var i, len = shape._length === undefined ? shape.v.length : shape._length;
			cloned.setLength(len);
			cloned.c = shape.c;
			var pt;
			
			for(i = 0; i < len; i += 1) {
				cloned.setTripleAt(shape.v[i][0],shape.v[i][1],shape.o[i][0],shape.o[i][1],shape.i[i][0],shape.i[i][1], i);
			}
			return cloned;
		}
	
		var factory = pool_factory(4, create, release);
		factory.clone = clone;
	
		return factory;
	}());
	var shapeCollection_pool = (function(){
		var ob = {
			newShapeCollection: newShapeCollection,
			release: release
		};
	
		var _length = 0;
		var _maxLength = 4;
		var pool = createSizedArray(_maxLength);
	
		function newShapeCollection(){
			var shapeCollection;
			if(_length){
				_length -= 1;
				shapeCollection = pool[_length];
			} else {
				shapeCollection = new ShapeCollection();
			}
			return shapeCollection;
		}
	
		function release(shapeCollection) {
			var i, len = shapeCollection._length;
			for(i = 0; i < len; i += 1) {
				shape_pool.release(shapeCollection.shapes[i]);
			}
			shapeCollection._length = 0;
	
			if(_length === _maxLength) {
				pool = pooling.double(pool);
				_maxLength = _maxLength*2;
			}
			pool[_length] = shapeCollection;
			_length += 1;
		}
	
		return ob;
	}());
	var segments_length_pool = (function(){
	
		function create() {
			return {
				lengths: [],
				totalLength: 0
			};
		}
	
		function release(element) {
			var i, len = element.lengths.length;
			for(i=0;i<len;i+=1) {
				bezier_length_pool.release(element.lengths[i]);
			}
			element.lengths.length = 0;
		}
	
		return pool_factory(8, create, release);
	}());
	var bezier_length_pool = (function(){
	
		function create() {
			return {
	            addedLength: 0,
	            percents: createTypedArray('float32', defaultCurveSegments),
	            lengths: createTypedArray('float32', defaultCurveSegments),
	        };
		}
		return pool_factory(8, create);
	}());
	function BaseRenderer(){}
	BaseRenderer.prototype.checkLayers = function(num){
	    var i, len = this.layers.length, data;
	    this.completeLayers = true;
	    for (i = len - 1; i >= 0; i--) {
	        if (!this.elements[i]) {
	            data = this.layers[i];
	            if(data.ip - data.st <= (num - this.layers[i].st) && data.op - data.st > (num - this.layers[i].st))
	            {
	                this.buildItem(i);
	            }
	        }
	        this.completeLayers = this.elements[i] ? this.completeLayers:false;
	    }
	    this.checkPendingElements();
	};
	
	BaseRenderer.prototype.createItem = function(layer){
	    switch(layer.ty){
	        case 2:
	            return this.createImage(layer);
	        case 0:
	            return this.createComp(layer);
	        case 1:
	            return this.createSolid(layer);
	        case 3:
	            return this.createNull(layer);
	        case 4:
	            return this.createShape(layer);
	        case 5:
	            return this.createText(layer);
	        case 13:
	            return this.createCamera(layer);
	    }
	    return this.createNull(layer);
	};
	
	BaseRenderer.prototype.createCamera = function(){
	    throw new Error('You\'re using a 3d camera. Try the html renderer.');
	};
	
	BaseRenderer.prototype.buildAllItems = function(){
	    var i, len = this.layers.length;
	    for(i=0;i<len;i+=1){
	        this.buildItem(i);
	    }
	    this.checkPendingElements();
	};
	
	BaseRenderer.prototype.includeLayers = function(newLayers){
	    this.completeLayers = false;
	    var i, len = newLayers.length;
	    var j, jLen = this.layers.length;
	    for(i=0;i<len;i+=1){
	        j = 0;
	        while(j<jLen){
	            if(this.layers[j].id == newLayers[i].id){
	                this.layers[j] = newLayers[i];
	                break;
	            }
	            j += 1;
	        }
	    }
	};
	
	BaseRenderer.prototype.setProjectInterface = function(pInterface){
	    this.globalData.projectInterface = pInterface;
	};
	
	BaseRenderer.prototype.initItems = function(){
	    if(!this.globalData.progressiveLoad){
	        this.buildAllItems();
	    }
	};
	BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {
	    var elements = this.elements;
	    var layers = this.layers;
	    var i=0, len = layers.length;
	    while (i < len) {
	        if (layers[i].ind == parentName) {
	            if (!elements[i] || elements[i] === true) {
	                this.buildItem(i);
	                this.addPendingElement(element);
	            } else {
	                hierarchy.push(elements[i]);
	                elements[i].setAsParent();
	                if(layers[i].parent !== undefined) {
	                    this.buildElementParenting(element, layers[i].parent, hierarchy);
	                } else {
	                    element.setHierarchy(hierarchy);
	                }
	            }
	        }
	        i += 1;
	    }
	};
	
	BaseRenderer.prototype.addPendingElement = function(element){
	    this.pendingElements.push(element);
	};
	
	BaseRenderer.prototype.searchExtraCompositions = function(assets){
	    var i, len = assets.length;
	    for(i=0;i<len;i+=1){
	        if(assets[i].xt){
	            var comp = this.createComp(assets[i]);
	            comp.initExpressions();
	            this.globalData.projectInterface.registerComposition(comp);
	        }
	    }
	};
	
	function SVGRenderer(animationItem, config){
	    this.animationItem = animationItem;
	    this.layers = null;
	    this.renderedFrame = -1;
	    this.svgElement = createNS('svg');
	    var maskElement = createNS('g');
	    this.svgElement.appendChild(maskElement);
	    this.layerElement = maskElement;
	    var defs = createNS( 'defs');
	    this.svgElement.appendChild(defs);
	    this.renderConfig = {
	        preserveAspectRatio: (config && config.preserveAspectRatio) || 'xMidYMid meet',
	        progressiveLoad: (config && config.progressiveLoad) || false,
	        hideOnTransparent: (config && config.hideOnTransparent === false) ? false : true,
	        viewBoxOnly: (config && config.viewBoxOnly) || false,
	        viewBoxSize: (config && config.viewBoxSize) || false,
	        className: (config && config.className) || ''
	    };
	    this.globalData = {
	        _mdf: false,
	        frameNum: -1,
	        defs: defs,
	        frameId: 0,
	        compSize: {w:0,h:0},
	        renderConfig: this.renderConfig,
	        fontManager: new FontManager()
	    };
	    this.elements = [];
	    this.pendingElements = [];
	    this.destroyed = false;
	
	}
	
	extendPrototype([BaseRenderer],SVGRenderer);
	
	SVGRenderer.prototype.createNull = function (data) {
	    return new NullElement(data,this.globalData,this);
	};
	
	SVGRenderer.prototype.createShape = function (data) {
	    return new SVGShapeElement(data,this.globalData,this);
	};
	
	SVGRenderer.prototype.createText = function (data) {
	    return new SVGTextElement(data,this.globalData,this);
	
	};
	
	SVGRenderer.prototype.createImage = function (data) {
	    return new IImageElement(data,this.globalData,this);
	};
	
	SVGRenderer.prototype.createComp = function (data) {
	    return new SVGCompElement(data,this.globalData,this);
	
	};
	
	SVGRenderer.prototype.createSolid = function (data) {
	    return new ISolidElement(data,this.globalData,this);
	};
	
	SVGRenderer.prototype.configAnimation = function(animData){
	    this.svgElement.setAttribute('xmlns','http://www.w3.org/2000/svg');
	    if(this.renderConfig.viewBoxSize) {
	        this.svgElement.setAttribute('viewBox',this.renderConfig.viewBoxSize);
	    } else {
	        this.svgElement.setAttribute('viewBox','0 0 '+animData.w+' '+animData.h);
	    }
	
	    if(!this.renderConfig.viewBoxOnly) {
	        this.svgElement.setAttribute('width',animData.w);
	        this.svgElement.setAttribute('height',animData.h);
	        this.svgElement.style.width = '100%';
	        this.svgElement.style.height = '100%';
	    }
	    if(this.renderConfig.className) {
	        this.svgElement.setAttribute('class', this.renderConfig.className);
	    }
	    this.svgElement.setAttribute('preserveAspectRatio',this.renderConfig.preserveAspectRatio);
	    //this.layerElement.style.transform = 'translate3d(0,0,0)';
	    //this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";
	    this.animationItem.wrapper.appendChild(this.svgElement);
	    //Mask animation
	    var defs = this.globalData.defs;
	
	    this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
	    this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
	    this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
	    this.globalData.nm = animData.nm;
	    this.globalData.compSize.w = animData.w;
	    this.globalData.compSize.h = animData.h;
	    this.globalData.frameRate = animData.fr;
	    this.data = animData;
	
	    var maskElement = createNS( 'clipPath');
	    var rect = createNS('rect');
	    rect.setAttribute('width',animData.w);
	    rect.setAttribute('height',animData.h);
	    rect.setAttribute('x',0);
	    rect.setAttribute('y',0);
	    var maskId = 'animationMask_'+randomString(10);
	    maskElement.setAttribute('id', maskId);
	    maskElement.appendChild(rect);
	    this.layerElement.setAttribute("clip-path", "url(" + locationHref + "#"+maskId+")");
	
	    defs.appendChild(maskElement);
	    this.layers = animData.layers;
	    this.globalData.fontManager.addChars(animData.chars);
	    this.globalData.fontManager.addFonts(animData.fonts,defs);
	    this.elements = createSizedArray(animData.layers.length);
	};
	
	
	SVGRenderer.prototype.destroy = function () {
	    this.animationItem.wrapper.innerHTML = '';
	    this.layerElement = null;
	    this.globalData.defs = null;
	    var i, len = this.layers ? this.layers.length : 0;
	    for (i = 0; i < len; i++) {
	        if(this.elements[i]){
	            this.elements[i].destroy();
	        }
	    }
	    this.elements.length = 0;
	    this.destroyed = true;
	    this.animationItem = null;
	};
	
	SVGRenderer.prototype.updateContainerSize = function () {
	};
	
	SVGRenderer.prototype.buildItem  = function(pos){
	    var elements = this.elements;
	    if(elements[pos] || this.layers[pos].ty == 99){
	        return;
	    }
	    elements[pos] = true;
	    var element = this.createItem(this.layers[pos]);
	
	    elements[pos] = element;
	    if(expressionsPlugin){
	        if(this.layers[pos].ty === 0){
	            this.globalData.projectInterface.registerComposition(element);
	        }
	        element.initExpressions();
	    }
	    this.appendElementInPos(element,pos);
	    if(this.layers[pos].tt){
	        if(!this.elements[pos - 1] || this.elements[pos - 1] === true){
	            this.buildItem(pos - 1);
	            this.addPendingElement(element);
	        } else {
	            element.setMatte(elements[pos - 1].layerId);
	        }
	    }
	};
	
	SVGRenderer.prototype.checkPendingElements  = function(){
	    while(this.pendingElements.length){
	        var element = this.pendingElements.pop();
	        element.checkParenting();
	        if(element.data.tt){
	            var i = 0, len = this.elements.length;
	            while(i<len){
	                if(this.elements[i] === element){
	                    element.setMatte(this.elements[i - 1].layerId);
	                    break;
	                }
	                i += 1;
	            }
	        }
	    }
	};
	
	SVGRenderer.prototype.renderFrame = function(num){
	    if(this.renderedFrame === num || this.destroyed){
	        return;
	    }
	    if(num === null){
	        num = this.renderedFrame;
	    }else{
	        this.renderedFrame = num;
	    }
	    // console.log('-------');
	    // console.log('FRAME ',num);
	    this.globalData.frameNum = num;
	    this.globalData.frameId += 1;
	    this.globalData.projectInterface.currentFrame = num;
	    this.globalData._mdf = false;
	    var i, len = this.layers.length;
	    if(!this.completeLayers){
	        this.checkLayers(num);
	    }
	    for (i = len - 1; i >= 0; i--) {
	        if(this.completeLayers || this.elements[i]){
	            this.elements[i].prepareFrame(num - this.layers[i].st);
	        }
	    }
	    if(this.globalData._mdf) {
	        for (i = 0; i < len; i += 1) {
	            if(this.completeLayers || this.elements[i]){
	                this.elements[i].renderFrame();
	            }
	        }
	    }
	};
	
	SVGRenderer.prototype.appendElementInPos = function(element, pos){
	    var newElement = element.getBaseElement();
	    if(!newElement){
	        return;
	    }
	    var i = 0;
	    var nextElement;
	    while(i<pos){
	        if(this.elements[i] && this.elements[i]!== true && this.elements[i].getBaseElement()){
	            nextElement = this.elements[i].getBaseElement();
	        }
	        i += 1;
	    }
	    if(nextElement){
	        this.layerElement.insertBefore(newElement, nextElement);
	    } else {
	        this.layerElement.appendChild(newElement);
	    }
	};
	
	SVGRenderer.prototype.hide = function(){
	    this.layerElement.style.display = 'none';
	};
	
	SVGRenderer.prototype.show = function(){
	    this.layerElement.style.display = 'block';
	};
	
	function MaskElement(data,element,globalData) {
	    this.data = data;
	    this.element = element;
	    this.globalData = globalData;
	    this.storedData = [];
	    this.masksProperties = this.data.masksProperties || [];
	    this.maskElement = null;
	    this._isFirstFrame = true;
	    var defs = this.globalData.defs;
	    var i, len = this.masksProperties ? this.masksProperties.length : 0;
	    this.viewData = createSizedArray(len);
	    this.solidPath = '';
	
	
	    var path, properties = this.masksProperties;
	    var count = 0;
	    var currentMasks = [];
	    var j, jLen;
	    var layerId = randomString(10);
	    var rect, expansor, feMorph,x;
	    var maskType = 'clipPath', maskRef = 'clip-path';
	    for (i = 0; i < len; i++) {
	
	        if((properties[i].mode !== 'a' && properties[i].mode !== 'n')|| properties[i].inv || properties[i].o.k !== 100){
	            maskType = 'mask';
	            maskRef = 'mask';
	        }
	
	        if((properties[i].mode == 's' || properties[i].mode == 'i') && count === 0){
	            rect = createNS( 'rect');
	            rect.setAttribute('fill', '#ffffff');
	            rect.setAttribute('width', this.element.comp.data.w);
	            rect.setAttribute('height', this.element.comp.data.h);
	            currentMasks.push(rect);
	        } else {
	            rect = null;
	        }
	
	        path = createNS( 'path');
	        if(properties[i].mode == 'n') {
	            // TODO move this to a factory or to a constructor
	            this.viewData[i] = {
	                op: PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),
	                prop: ShapePropertyFactory.getShapeProp(this.element,properties[i],3),
	                elem: path
	            };
	            defs.appendChild(path);
	            continue;
	        }
	        count += 1;
	
	        path.setAttribute('fill', properties[i].mode === 's' ? '#000000':'#ffffff');
	        path.setAttribute('clip-rule','nonzero');
	        var filterID;
	
	        if (properties[i].x.k !== 0) {
	            maskType = 'mask';
	            maskRef = 'mask';
	            x = PropertyFactory.getProp(this.element,properties[i].x,0,null,this.element);
	            filterID = 'fi_'+randomString(10);
	            expansor = createNS('filter');
	            expansor.setAttribute('id',filterID);
	            feMorph = createNS('feMorphology');
	            feMorph.setAttribute('operator','dilate');
	            feMorph.setAttribute('in','SourceGraphic');
	            feMorph.setAttribute('radius','0');
	            expansor.appendChild(feMorph);
	            defs.appendChild(expansor);
	            path.setAttribute('stroke', properties[i].mode === 's' ? '#000000':'#ffffff');
	        } else {
	            feMorph = null;
	            x = null;
	        }
	
	        // TODO move this to a factory or to a constructor
	        this.storedData[i] = {
	             elem: path,
	             x: x,
	             expan: feMorph,
	            lastPath: '',
	            lastOperator:'',
	            filterId:filterID,
	            lastRadius:0
	        };
	        if(properties[i].mode == 'i'){
	            jLen = currentMasks.length;
	            var g = createNS('g');
	            for(j=0;j<jLen;j+=1){
	                g.appendChild(currentMasks[j]);
	            }
	            var mask = createNS('mask');
	            mask.setAttribute('mask-type','alpha');
	            mask.setAttribute('id',layerId+'_'+count);
	            mask.appendChild(path);
	            defs.appendChild(mask);
	            g.setAttribute('mask','url(' + locationHref + '#'+layerId+'_'+count+')');
	
	            currentMasks.length = 0;
	            currentMasks.push(g);
	        }else{
	            currentMasks.push(path);
	        }
	        if(properties[i].inv && !this.solidPath){
	            this.solidPath = this.createLayerSolidPath();
	        }
	        // TODO move this to a factory or to a constructor
	        this.viewData[i] = {
	            elem: path,
	            lastPath: '',
	            op: PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),
	            prop:ShapePropertyFactory.getShapeProp(this.element,properties[i],3),
	            invRect: rect
	        };
	        if(!this.viewData[i].prop.k){
	            this.drawPath(properties[i],this.viewData[i].prop.v,this.viewData[i]);
	        }
	    }
	
	    this.maskElement = createNS( maskType);
	
	    len = currentMasks.length;
	    for(i=0;i<len;i+=1){
	        this.maskElement.appendChild(currentMasks[i]);
	    }
	
	    if(count > 0){
	        this.maskElement.setAttribute('id', layerId);
	        this.element.maskedElement.setAttribute(maskRef, "url(" + locationHref + "#" + layerId + ")");
	        defs.appendChild(this.maskElement);
	    }
	
	}
	
	MaskElement.prototype.getMaskProperty = function(pos){
	    return this.viewData[pos].prop;
	};
	
	MaskElement.prototype.renderFrame = function (finalMat) {
	    var i, len = this.masksProperties.length;
	    for (i = 0; i < len; i++) {
	        if(this.viewData[i].prop._mdf || this._isFirstFrame){
	            this.drawPath(this.masksProperties[i],this.viewData[i].prop.v,this.viewData[i]);
	        }
	        if(this.viewData[i].op._mdf || this._isFirstFrame){
	            this.viewData[i].elem.setAttribute('fill-opacity',this.viewData[i].op.v);
	        }
	        if(this.masksProperties[i].mode !== 'n'){
	            if(this.viewData[i].invRect && (this.element.finalTransform.mProp._mdf || this._isFirstFrame)){
	                this.viewData[i].invRect.setAttribute('x', -finalMat.props[12]);
	                this.viewData[i].invRect.setAttribute('y', -finalMat.props[13]);
	            }
	            if(this.storedData[i].x && (this.storedData[i].x._mdf || this._isFirstFrame)){
	                var feMorph = this.storedData[i].expan;
	                if(this.storedData[i].x.v < 0){
	                    if(this.storedData[i].lastOperator !== 'erode'){
	                        this.storedData[i].lastOperator = 'erode';
	                        this.storedData[i].elem.setAttribute('filter','url(' + locationHref + '#'+this.storedData[i].filterId+')');
	                    }
	                    feMorph.setAttribute('radius',-this.storedData[i].x.v);
	                }else{
	                    if(this.storedData[i].lastOperator !== 'dilate'){
	                        this.storedData[i].lastOperator = 'dilate';
	                        this.storedData[i].elem.setAttribute('filter',null);
	                    }
	                    this.storedData[i].elem.setAttribute('stroke-width', this.storedData[i].x.v*2);
	
	                }
	            }
	        }
	    }
	    this._isFirstFrame = false;
	};
	
	MaskElement.prototype.getMaskelement = function () {
	    return this.maskElement;
	};
	
	MaskElement.prototype.createLayerSolidPath = function(){
	    var path = 'M0,0 ';
	    path += ' h' + this.globalData.compSize.w ;
	    path += ' v' + this.globalData.compSize.h ;
	    path += ' h-' + this.globalData.compSize.w ;
	    path += ' v-' + this.globalData.compSize.h + ' ';
	    return path;
	};
	
	MaskElement.prototype.drawPath = function(pathData,pathNodes,viewData){
	    var pathString = " M"+pathNodes.v[0][0]+','+pathNodes.v[0][1];
	    var i, len;
	    len = pathNodes._length;
	    for(i=1;i<len;i+=1){
	        //pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
	        pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
	    }
	        //pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
	    if(pathNodes.c && len > 1){
	        pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
	    }
	    //pathNodes.__renderedString = pathString;
	
	
	    if(viewData.lastPath !== pathString){
	        var pathShapeValue = '';
	        if(viewData.elem){
	            if(pathNodes.c){
	                pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
	            }
	            viewData.elem.setAttribute('d',pathShapeValue);
	        }
	        viewData.lastPath = pathString;
	    }
	};
	
	MaskElement.prototype.destroy = function(){
	    this.element = null;
	    this.globalData = null;
	    this.maskElement = null;
	    this.data = null;
	    this.masksProperties = null;
	};
	/**
	 * @file 
	 * Handles AE's layer parenting property.
	 *
	 */
	
	function HierarchyElement(){}
	
	HierarchyElement.prototype = {
		/**
	     * @function 
	     * Initializes hierarchy properties
	     *
	     */
		initHierarchy: function() {
			//element's parent list
		    this.hierarchy = [];
		    //if element is parent of another layer _isParent will be true
		    this._isParent = false;
		    this.checkParenting();
		},
		/**
	     * @function 
	     * Sets layer's hierarchy.
	     * @param {array} hierarch
	     * layer's parent list
	     *
	     */ 
		setHierarchy: function(hierarchy){
		    this.hierarchy = hierarchy;
		},
		/**
	     * @function 
	     * Sets layer as parent.
	     *
	     */ 
		setAsParent: function() {
		    this._isParent = true;
		},
		/**
	     * @function 
	     * Searches layer's parenting chain
	     *
	     */ 
		checkParenting: function(){
		    if (this.data.parent !== undefined){
		        this.comp.buildElementParenting(this, this.data.parent, []);
		    }
		}
	};
	/**
	 * @file 
	 * Handles element's layer frame update.
	 * Checks layer in point and out point
	 *
	 */
	
	function FrameElement(){}
	
	FrameElement.prototype = {
	    /**
	     * @function 
	     * Initializes frame related properties.
	     *
	     */
	    initFrame: function(){
	        //set to true when inpoint is rendered
	        this._isFirstFrame = false;
	        //list of animated properties
	        this.dynamicProperties = [];
	        // If layer has been modified in current tick this will be true
	        this._mdf = false;
	    },
	    /**
	     * @function 
	     * Calculates all dynamic values
	     *
	     * @param {number} num
	     * current frame number in Layer's time
	     * @param {boolean} isVisible
	     * if layers is currently in range
	     * 
	     */
	    prepareProperties: function(num, isVisible) {
	        var i, len = this.dynamicProperties.length;
	        for (i = 0;i < len; i += 1) {
	            if (isVisible || (this._isParent && this.dynamicProperties[i].propType === 'transform')) {
	                this.dynamicProperties[i].getValue();
	                if (this.dynamicProperties[i]._mdf) {
	                    this.globalData._mdf = true;
	                    this._mdf = true;
	                }
	            }
	        }
	    },
	    addDynamicProperty: function(prop) {
	        if(this.dynamicProperties.indexOf(prop) === -1) {
	            this.dynamicProperties.push(prop);
	        }
	    }
	};
	function TransformElement(){}
	
	TransformElement.prototype = {
	    initTransform: function() {
	        this.finalTransform = {
	            mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {o:0},
	            _matMdf: false,
	            _opMdf: false,
	            mat: new Matrix()
	        };
	        if (this.data.ao) {
	            this.finalTransform.mProp.autoOriented = true;
	        }
	
	        //TODO: check TYPE 11: Guided elements
	        if (this.data.ty !== 11) {
	            //this.createElements();
	        }
	    },
	    renderTransform: function() {
	
	        this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
	        this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;
	
	        if (this.hierarchy) {
	            var mat;
	            var finalMat = this.finalTransform.mat;
	            var i = 0, len = this.hierarchy.length;
	            //Checking if any of the transformation matrices in the hierarchy chain has changed.
	            if (!this.finalTransform._matMdf) {
	                while (i < len) {
	                    if (this.hierarchy[i].finalTransform.mProp._mdf) {
	                        this.finalTransform._matMdf = true;
	                        break;
	                    }
	                    i += 1;
	                }
	            }
	            
	            if (this.finalTransform._matMdf) {
	                mat = this.finalTransform.mProp.v.props;
	                finalMat.cloneFromProps(mat);
	                for (i = 0; i < len; i += 1) {
	                    mat = this.hierarchy[i].finalTransform.mProp.v.props;
	                    finalMat.transform(mat[0], mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9], mat[10], mat[11], mat[12], mat[13], mat[14], mat[15]);
	                }
	            }
	        }
	    },
	    globalToLocal: function(pt) {
	        var transforms = [];
	        transforms.push(this.finalTransform);
	        var flag = true;
	        var comp = this.comp;
	        while (flag) {
	            if (comp.finalTransform) {
	                if (comp.data.hasMask) {
	                    transforms.splice(0, 0, comp.finalTransform);
	                }
	                comp = comp.comp;
	            } else {
	                flag = false;
	            }
	        }
	        var i, len = transforms.length,ptNew;
	        for (i = 0; i < len; i += 1) {
	            ptNew = transforms[i].mat.applyToPointArray(0, 0, 0);
	            //ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);
	            pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
	        }
	        return pt;
	    },
	    mHelper: new Matrix()
	};
	function RenderableElement(){
	
	}
	
	RenderableElement.prototype = {
	    initRenderable: function() {
	        //layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
	        this.isInRange = false;
	        //layer's display state
	        this.hidden = false;
	        // If layer's transparency equals 0, it can be hidden
	        this.isTransparent = false;
	    },
	    prepareRenderableFrame: function(num) {
	        this.checkLayerLimits(num);
	    },
	    checkTransparency: function(){
	        if(this.finalTransform.mProp.o.v <= 0) {
	            if(!this.isTransparent && this.globalData.renderConfig.hideOnTransparent){
	                this.isTransparent = true;
	                this.hide();
	            }
	        } else if(this.isTransparent) {
	            this.isTransparent = false;
	            this.show();
	        }
	    },
	    /**
	     * @function 
	     * Initializes frame related properties.
	     *
	     * @param {number} num
	     * current frame number in Layer's time
	     * 
	     */
	    checkLayerLimits: function(num) {
	        if(this.data.ip - this.data.st <= num && this.data.op - this.data.st > num)
	        {
	            if(this.isInRange !== true){
	                this.globalData._mdf = true;
	                this._mdf = true;
	                this.isInRange = true;
	                this.show();
	            }
	        } else {
	            if(this.isInRange !== false){
	                this.globalData._mdf = true;
	                this.isInRange = false;
	                this.hide();
	            }
	        }
	    },
	    renderRenderable: function() {
	        this.maskManager.renderFrame(this.finalTransform.mat);
	        this.renderableEffectsManager.renderFrame(this._isFirstFrame);
	    },
	    sourceRectAtTime: function(){
	        return {
	            top:0,
	            left:0,
	            width:100,
	            height:100
	        };
	    },
	    getLayerSize: function(){
	        if(this.data.ty === 5){
	            return {w:this.data.textData.width,h:this.data.textData.height};
	        }else{
	            return {w:this.data.width,h:this.data.height};
	        }
	    }
	};
	function RenderableDOMElement() {}
	
	(function(){
	    var _prototype = {
	        initElement: function(data,globalData,comp) {
	            this.initFrame();
	            this.initBaseData(data, globalData, comp);
	            this.initTransform(data, globalData, comp);
	            this.initHierarchy();
	            this.initRenderable();
	            this.initRendererElement();
	            this.createContainerElements();
	            this.addMasks();
	            this.createContent();
	            this.hide();
	        },
	        hide: function(){
	            if (!this.hidden && (!this.isInRange || this.isTransparent)) {
	                var elem = this.baseElement || this.layerElement;
	                elem.style.display = 'none';
	                this.hidden = true;
	            }
	        },
	        show: function(){
	            if (this.isInRange && !this.isTransparent){
	                if (!this.data.hd) {
	                    var elem = this.baseElement || this.layerElement;
	                    elem.style.display = 'block';
	                }
	                this.hidden = false;
	                this._isFirstFrame = true;
	                this.maskManager._isFirstFrame = true;
	            }
	        },
	        renderFrame: function() {
	            //If it is exported as hidden (data.hd === true) no need to render
	            //If it is not visible no need to render
	            if (this.data.hd || this.hidden) {
	                return;
	            }
	            this.renderTransform();
	            this.renderRenderable();
	            this.renderElement();
	            this.renderInnerContent();
	            if (this._isFirstFrame) {
	                this._isFirstFrame = false;
	            }
	        },
	        renderInnerContent: function() {},
	        prepareFrame: function(num) {
	            this._mdf = false;
	            this.prepareRenderableFrame(num);
	            this.prepareProperties(num, this.isInRange);
	            this.checkTransparency();
	        },
	        destroy: function(){
	            this.innerElem =  null;
	            this.destroyBaseElement();
	        }
	    };
	    extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
	}());
	function ProcessedElement(element, position) {
		this.elem = element;
		this.pos = position;
	}
	function SVGStyleData(data, level) {
		this.data = data;
		this.type = data.ty;
		this.d = '';
		this.lvl = level;
		this._mdf = false;
		this.closed = false;
		this.pElem = createNS('path');
		this.msElem = null;
	}
	
	SVGStyleData.prototype.reset = function() {
		this.d = '';
		this._mdf = false;
	};
	function SVGShapeData(transformers, level, shape) {
	    this.caches = [];
	    this.styles = [];
	    this.transformers = transformers;
	    this.lStr = '';
	    this.sh = shape;
	    this.lvl = level;
	}
	function SVGTransformData(mProps, op) {
		this.transform = {
			mProps: mProps,
			op: op
		};
		this.elements = [];
	}
	function SVGStrokeStyleData(elem, data, styleOb){
		this.o = PropertyFactory.getProp(elem,data.o,0,0.01,elem);
		this.w = PropertyFactory.getProp(elem,data.w,0,null,elem);
		this.d = new DashProperty(elem,data.d||{},'svg',elem);
		this.c = PropertyFactory.getProp(elem,data.c,1,255,elem);
		this.style = styleOb;
	}
	function SVGFillStyleData(elem, data, styleOb){
		this.o = PropertyFactory.getProp(elem,data.o,0,0.01,elem);
		this.c = PropertyFactory.getProp(elem,data.c,1,255,elem);
		this.style = styleOb;
	}
	function SVGGradientFillStyleData(elem, data, styleOb){
	    this.initGradientData(elem, data, styleOb);
	}
	
	SVGGradientFillStyleData.prototype.initGradientData = function(elem, data, styleOb){
	    this.o = PropertyFactory.getProp(elem,data.o,0,0.01,elem);
	    this.s = PropertyFactory.getProp(elem,data.s,1,null,elem);
	    this.e = PropertyFactory.getProp(elem,data.e,1,null,elem);
	    this.h = PropertyFactory.getProp(elem,data.h||{k:0},0,0.01,elem);
	    this.a = PropertyFactory.getProp(elem,data.a||{k:0},0,degToRads,elem);
	    this.g = new GradientProperty(elem,data.g,elem);
	    this.style = styleOb;
	    this.stops = [];
	    this.setGradientData(styleOb.pElem, data);
	    this.setGradientOpacity(data, styleOb);
	
	};
	
	SVGGradientFillStyleData.prototype.setGradientData = function(pathElement,data){
	
	    var gradientId = 'gr_'+randomString(10);
	    var gfill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
	    gfill.setAttribute('id',gradientId);
	    gfill.setAttribute('spreadMethod','pad');
	    gfill.setAttribute('gradientUnits','userSpaceOnUse');
	    var stops = [];
	    var stop, j, jLen;
	    jLen = data.g.p*4;
	    for(j=0;j<jLen;j+=4){
	        stop = createNS('stop');
	        gfill.appendChild(stop);
	        stops.push(stop);
	    }
	    pathElement.setAttribute( data.ty === 'gf' ? 'fill':'stroke','url(#'+gradientId+')');
	    
	    this.gf = gfill;
	    this.cst = stops;
	};
	
	SVGGradientFillStyleData.prototype.setGradientOpacity = function(data, styleOb){
	    if(this.g._hasOpacity && !this.g._collapsable){
	        var stop, j, jLen;
	        var mask = createNS("mask");
	        var maskElement = createNS( 'path');
	        mask.appendChild(maskElement);
	        var opacityId = 'op_'+randomString(10);
	        var maskId = 'mk_'+randomString(10);
	        mask.setAttribute('id',maskId);
	        var opFill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
	        opFill.setAttribute('id',opacityId);
	        opFill.setAttribute('spreadMethod','pad');
	        opFill.setAttribute('gradientUnits','userSpaceOnUse');
	        jLen = data.g.k.k[0].s ? data.g.k.k[0].s.length : data.g.k.k.length;
	        var stops = this.stops;
	        for(j=data.g.p*4;j<jLen;j+=2){
	            stop = createNS('stop');
	            stop.setAttribute('stop-color','rgb(255,255,255)');
	            opFill.appendChild(stop);
	            stops.push(stop);
	        }
	        maskElement.setAttribute( data.ty === 'gf' ? 'fill':'stroke','url(#'+opacityId+')');
	        this.of = opFill;
	        this.ms = mask;
	        this.ost = stops;
	        this.maskId = maskId;
	        styleOb.msElem = maskElement;
	    }
	};
	function SVGGradientStrokeStyleData(elem, data, styleOb){
		this.w = PropertyFactory.getProp(elem,data.w,0,null,elem);
		this.d = new DashProperty(elem,data.d||{},'svg',elem);
	    this.initGradientData(elem, data, styleOb);
	}
	
	SVGGradientStrokeStyleData.prototype.initGradientData = SVGGradientFillStyleData.prototype.initGradientData;
	SVGGradientStrokeStyleData.prototype.setGradientData = SVGGradientFillStyleData.prototype.setGradientData;
	SVGGradientStrokeStyleData.prototype.setGradientOpacity = SVGGradientFillStyleData.prototype.setGradientOpacity;
	function ShapeGroupData() {
		this.it = [];
	    this.prevViewData = [];
	    this.gr = createNS('g');
	}
	function BaseElement(){
	}
	BaseElement.prototype.checkMasks = function(){
	    if(!this.data.hasMask){
	        return false;
	    }
	    var i = 0, len = this.data.masksProperties.length;
	    while(i<len) {
	        if((this.data.masksProperties[i].mode !== 'n' && this.data.masksProperties[i].cl !== false)) {
	            return true;
	        }
	        i += 1;
	    }
	    return false;
	};
	
	BaseElement.prototype.initExpressions = function(){
	    this.layerInterface = LayerExpressionInterface(this);
	    if(this.data.hasMask && this.maskManager) {
	        this.layerInterface.registerMaskInterface(this.maskManager);
	    }
	    var effectsInterface = EffectsExpressionInterface.createEffectsInterface(this,this.layerInterface);
	    this.layerInterface.registerEffectsInterface(effectsInterface);
	
	    if(this.data.ty === 0 || this.data.xt){
	        this.compInterface = CompExpressionInterface(this);
	    } else if(this.data.ty === 4){
	        this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData,this.itemsData,this.layerInterface);
	        this.layerInterface.content = this.layerInterface.shapeInterface;
	    } else if(this.data.ty === 5){
	        this.layerInterface.textInterface = TextExpressionInterface(this);
	        this.layerInterface.text = this.layerInterface.textInterface;
	    }
	};
	
	BaseElement.prototype.blendModeEnums = {
	    1:'multiply',
	    2:'screen',
	    3:'overlay',
	    4:'darken',
	    5:'lighten',
	    6:'color-dodge',
	    7:'color-burn',
	    8:'hard-light',
	    9:'soft-light',
	    10:'difference',
	    11:'exclusion',
	    12:'hue',
	    13:'saturation',
	    14:'color',
	    15:'luminosity'
	};
	
	BaseElement.prototype.getBlendMode = function(){
	    return this.blendModeEnums[this.data.bm] || '';
	};
	
	BaseElement.prototype.setBlendMode = function(){
	    var blendModeValue = this.getBlendMode();
	    var elem = this.baseElement || this.layerElement;
	
	    elem.style['mix-blend-mode'] = blendModeValue;
	};
	
	BaseElement.prototype.initBaseData = function(data, globalData, comp){
	    this.globalData = globalData;
	    this.comp = comp;
	    this.data = data;
	    this.layerId = 'ly_'+randomString(10);
	    
	    //Stretch factor for old animations missing this property.
	    if(!this.data.sr){
	        this.data.sr = 1;
	    }
	    // effects manager
	    this.effectsManager = new EffectsManager(this.data,this,this.dynamicProperties);
	    
	};
	
	BaseElement.prototype.getType = function(){
	    return this.type;
	};
	
	function NullElement(data,globalData,comp){
	    this.initFrame();
		this.initBaseData(data, globalData, comp);
	    this.initFrame();
	    this.initTransform(data, globalData, comp);
	    this.initHierarchy();
	}
	
	NullElement.prototype.prepareFrame = function(num) {
	    this.prepareProperties(num, true);
	};
	
	NullElement.prototype.renderFrame = function() {
	};
	
	NullElement.prototype.getBaseElement = function() {
		return null;
	};
	
	NullElement.prototype.destroy = function() {
	};
	
	NullElement.prototype.sourceRectAtTime = function() {
	};
	
	NullElement.prototype.hide = function() {
	};
	
	extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement], NullElement);
	
	function SVGBaseElement(){
	}
	
	SVGBaseElement.prototype = {
	    initRendererElement: function() {
	        this.layerElement = createNS('g');
	    },
	    createContainerElements: function(){
	        this.matteElement = createNS('g');
	        this.transformedElement = this.layerElement;
	        this.maskedElement = this.layerElement;
	        this._sizeChanged = false;
	        var layerElementParent = null;
	        //If this layer acts as a mask for the following layer
	        var filId, fil, gg;
	        if (this.data.td) {
	            if (this.data.td == 3 || this.data.td == 1) {
	                var masker = createNS('mask');
	                masker.setAttribute('id', this.layerId);
	                masker.setAttribute('mask-type', this.data.td == 3 ? 'luminance' : 'alpha');
	                masker.appendChild(this.layerElement);
	                layerElementParent = masker;
	                this.globalData.defs.appendChild(masker);
	                // This is only for IE and Edge when mask if of type alpha
	                if (!featureSupport.maskType && this.data.td == 1) {
	                    masker.setAttribute('mask-type', 'luminance');
	                    filId = randomString(10);
	                    fil = filtersFactory.createFilter(filId);
	                    this.globalData.defs.appendChild(fil);
	                    fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
	                    gg = createNS('g');
	                    gg.appendChild(this.layerElement);
	                    layerElementParent = gg;
	                    masker.appendChild(gg);
	                    gg.setAttribute('filter','url(' + locationHref + '#' + filId + ')');
	                }
	            } else if(this.data.td == 2) {
	                var maskGroup = createNS('mask');
	                maskGroup.setAttribute('id', this.layerId);
	                maskGroup.setAttribute('mask-type','alpha');
	                var maskGrouper = createNS('g');
	                maskGroup.appendChild(maskGrouper);
	                filId = randomString(10);
	                fil = filtersFactory.createFilter(filId);
	                ////
	
	                var feColorMatrix = createNS('feColorMatrix');
	                feColorMatrix.setAttribute('type', 'matrix');
	                feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
	                feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 -1 1');
	                fil.appendChild(feColorMatrix);
	
	                ////
	                /*var feCTr = createNS('feComponentTransfer');
	                feCTr.setAttribute('in','SourceGraphic');
	                fil.appendChild(feCTr);
	                var feFunc = createNS('feFuncA');
	                feFunc.setAttribute('type','table');
	                feFunc.setAttribute('tableValues','1.0 0.0');
	                feCTr.appendChild(feFunc);*/
	                this.globalData.defs.appendChild(fil);
	                var alphaRect = createNS('rect');
	                alphaRect.setAttribute('width',  this.comp.data.w);
	                alphaRect.setAttribute('height', this.comp.data.h);
	                alphaRect.setAttribute('x','0');
	                alphaRect.setAttribute('y','0');
	                alphaRect.setAttribute('fill','#ffffff');
	                alphaRect.setAttribute('opacity','0');
	                maskGrouper.setAttribute('filter', 'url(' + locationHref + '#'+filId+')');
	                maskGrouper.appendChild(alphaRect);
	                maskGrouper.appendChild(this.layerElement);
	                layerElementParent = maskGrouper;
	                if (!featureSupport.maskType) {
	                    maskGroup.setAttribute('mask-type', 'luminance');
	                    fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
	                    gg = createNS('g');
	                    maskGrouper.appendChild(alphaRect);
	                    gg.appendChild(this.layerElement);
	                    layerElementParent = gg;
	                    maskGrouper.appendChild(gg);
	                }
	                this.globalData.defs.appendChild(maskGroup);
	            }
	        } else if (this.data.tt) {
	            this.matteElement.appendChild(this.layerElement);
	            layerElementParent = this.matteElement;
	            this.baseElement = this.matteElement;
	        } else {
	            this.baseElement = this.layerElement;
	        }
	        if (this.data.ln) {
	            this.layerElement.setAttribute('id', this.data.ln);
	        }
	        if (this.data.cl) {
	            this.layerElement.setAttribute('class', this.data.cl);
	        }
	        //Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped
	        if (this.data.ty === 0 && !this.data.hd) {
	            var cp = createNS( 'clipPath');
	            var pt = createNS('path');
	            pt.setAttribute('d','M0,0 L' + this.data.w + ',0' + ' L' + this.data.w + ',' + this.data.h + ' L0,' + this.data.h + 'z');
	            var clipId = 'cp_'+randomString(8);
	            cp.setAttribute('id',clipId);
	            cp.appendChild(pt);
	            this.globalData.defs.appendChild(cp);
	
	            if (this.checkMasks()) {
	                var cpGroup = createNS('g');
	                cpGroup.setAttribute('clip-path','url(' + locationHref + '#'+clipId + ')');
	                cpGroup.appendChild(this.layerElement);
	                this.transformedElement = cpGroup;
	                if (layerElementParent) {
	                    layerElementParent.appendChild(this.transformedElement);
	                } else {
	                    this.baseElement = this.transformedElement;
	                }
	            } else {
	                this.layerElement.setAttribute('clip-path','url(' + locationHref + '#'+clipId+')');
	            }
	            
	        }
	        if (this.data.bm !== 0) {
	            this.setBlendMode();
	        }
	        this.renderableEffectsManager = new SVGEffects(this);
	
	    },
	    renderElement: function() {
	        if (this.finalTransform._matMdf) {
	            this.transformedElement.setAttribute('transform', this.finalTransform.mat.to2dCSS());
	        }
	        if (this.finalTransform._opMdf) {
	            this.transformedElement.setAttribute('opacity', this.finalTransform.mProp.o.v);
	        }
	    },
	    destroyBaseElement: function() {
	        this.layerElement = null;
	        this.matteElement = null;
	        this.maskManager.destroy();
	    },
	    getBaseElement: function() {
	        if (this.data.hd) {
	            return null;
	        }
	        return this.baseElement;
	    },
	    addMasks: function() {
	        this.maskManager = new MaskElement(this.data, this, this.globalData);
	    },
	    setMatte: function(id) {
	        if (!this.matteElement) {
	            return;
	        }
	        this.matteElement.setAttribute("mask", "url(" + locationHref + "#" + id + ")");
	    }
	};
	function IShapeElement(){
	}
	
	IShapeElement.prototype = {
	    addShapeToModifiers: function(data) {
	        var i, len = this.shapeModifiers.length;
	        for(i=0;i<len;i+=1){
	            this.shapeModifiers[i].addShape(data);
	        }
	    },
	    renderModifiers: function() {
	        if(!this.shapeModifiers.length){
	            return;
	        }
	        var i, len = this.shapes.length;
	        for(i=0;i<len;i+=1){
	            this.shapes[i].reset();
	        }
	
	        len = this.shapeModifiers.length;
	        for(i=len-1;i>=0;i-=1){
	            this.shapeModifiers[i].processShapes(this._isFirstFrame);
	        }
	    },
	    lcEnum: {
	        '1': 'butt',
	        '2': 'round',
	        '3': 'square'
	    },
	    ljEnum: {
	        '1': 'miter',
	        '2': 'round',
	        '3': 'butt'
	    },
	    searchProcessedElement: function(elem){
	        var i = 0, len = this.processedElements.length;
	        while(i < len){
	            if(this.processedElements[i].elem === elem){
	                return this.processedElements[i].pos;
	            }
	            i += 1;
	        }
	        return 0;
	    },
	    addProcessedElement: function(elem, pos){
	        var i = this.processedElements.length, found = false;
	        while(i){
	            i -= 1;
	            if(this.processedElements[i].elem === elem){
	                this.processedElements[i].pos = pos;
	                found = true;
	                break;
	            }
	        }
	        if(!found){
	            this.processedElements.push(new ProcessedElement(elem, pos));
	        }
	    },
	    prepareFrame: function(num) {
	        this.prepareRenderableFrame(num);
	        this.prepareProperties(num, this.isInRange);
	    },
	    buildShapeString: function(pathNodes, length, closed, mat) {
	        var i, shapeString = '';
	        for(i = 1; i < length; i += 1) {
	            if (i === 1) {
	                shapeString += " M" + mat.applyToPointStringified(pathNodes.v[0][0], pathNodes.v[0][1]);
	            }
	            shapeString += " C" + mat.applyToPointStringified(pathNodes.o[i - 1][0], pathNodes.o[i - 1][1]) + " " + mat.applyToPointStringified(pathNodes.i[i][0], pathNodes.i[i][1]) + " " + mat.applyToPointStringified(pathNodes.v[i][0], pathNodes.v[i][1]);
	        }
	        if (length === 1) {
	            shapeString += " M" + mat.applyToPointStringified(pathNodes.v[0][0], pathNodes.v[0][1]);
	        }
	        if (closed && length) {
	            shapeString += " C" + mat.applyToPointStringified(pathNodes.o[i - 1][0], pathNodes.o[i - 1][1]) + " " + mat.applyToPointStringified(pathNodes.i[0][0], pathNodes.i[0][1]) + " " + mat.applyToPointStringified(pathNodes.v[0][0], pathNodes.v[0][1]);
	            shapeString += 'z';
	        }
	        return shapeString;
	    }
	};
	function ITextElement(){
	}
	
	ITextElement.prototype.initElement = function(data,globalData,comp){
	    this.lettersChangedFlag = true;
	    this.initFrame();
	    this.initBaseData(data, globalData, comp);
	    this.textProperty = new TextProperty(this, data.t, this.dynamicProperties);
	    this.textAnimator = new TextAnimatorProperty(data.t, this.renderType, this);
	    this.initTransform(data, globalData, comp);
	    this.initHierarchy();
	    this.initRenderable();
	    this.initRendererElement();
	    this.createContainerElements();
	    this.addMasks();
	    this.createContent();
	    this.hide();
	    this.textAnimator.searchProperties(this.dynamicProperties);
	};
	
	ITextElement.prototype.prepareFrame = function(num) {
	    this._mdf = false;
	    this.prepareRenderableFrame(num);
	    this.prepareProperties(num, this.isInRange);
	    if(this.textProperty._mdf || this.textProperty._isFirstFrame) {
	        this.buildNewText();
	        this.textProperty._isFirstFrame = false;
	        this.textProperty._mdf = false;
	    }
	};
	
	ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {
	    var j,jLen = shapes.length;
	    var k, kLen, pathNodes;
	    var shapeStr = '';
	    for(j=0;j<jLen;j+=1){
	        pathNodes = shapes[j].ks.k;
	        shapeStr += this.buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
	    }
	    return shapeStr;
	};
	
	ITextElement.prototype.updateDocumentData = function(newData, index) {
	    this.textProperty.updateDocumentData(newData, index);
	};
	
	ITextElement.prototype.canResizeFont = function(_canResize) {
	    this.textProperty.canResizeFont(_canResize);
	};
	
	ITextElement.prototype.setMinimumFontSize = function(_fontSize) {
	    this.textProperty.setMinimumFontSize(_fontSize);
	};
	
	ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {
	    if(documentData.ps){
	        matrixHelper.translate(documentData.ps[0],documentData.ps[1] + documentData.ascent,0);
	    }
	    matrixHelper.translate(0,-documentData.ls,0);
	    switch(documentData.j){
	        case 1:
	            matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]),0,0);
	            break;
	        case 2:
	            matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber] )/2,0,0);
	            break;
	    }
	    matrixHelper.translate(xPos, yPos, 0);
	};
	
	
	ITextElement.prototype.buildColor = function(colorData) {
	    return 'rgb(' + Math.round(colorData[0]*255) + ',' + Math.round(colorData[1]*255) + ',' + Math.round(colorData[2]*255) + ')';
	};
	
	ITextElement.prototype.buildShapeString = IShapeElement.prototype.buildShapeString;
	
	ITextElement.prototype.emptyProp = new LetterProps();
	
	ITextElement.prototype.destroy = function(){
	    
	};
	function ICompElement(){}
	
	extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);
	
	ICompElement.prototype.initElement = function(data,globalData,comp) {
	    this.initFrame();
	    this.initBaseData(data, globalData, comp);
	    this.initTransform(data, globalData, comp);
	    this.initRenderable();
	    this.initHierarchy();
	    this.initRendererElement();
	    this.createContainerElements();
	    this.addMasks();
	    if(this.data.xt || !globalData.progressiveLoad){
	        this.buildAllItems();
	    }
	    this.hide();
	};
	
	/*ICompElement.prototype.hide = function(){
	    if(!this.hidden){
	        this.hideElement();
	        var i,len = this.elements.length;
	        for( i = 0; i < len; i+=1 ){
	            if(this.elements[i]){
	                this.elements[i].hide();
	            }
	        }
	    }
	};*/
	
	ICompElement.prototype.prepareFrame = function(num){
	    this._mdf = false;
	    this.prepareRenderableFrame(num);
	    this.prepareProperties(num, this.isInRange);
	    if(!this.isInRange && !this.data.xt){
	        return;
	    }
	
	    if (!this.tm._placeholder) {
	        var timeRemapped = this.tm.v;
	        if(timeRemapped === this.data.op){
	            timeRemapped = this.data.op - 1;
	        }
	        this.renderedFrame = timeRemapped;
	    } else {
	        this.renderedFrame = num/this.data.sr;
	    }
	    var i,len = this.elements.length;
	    if(!this.completeLayers){
	        this.checkLayers(this.renderedFrame);
	    }
	    for( i = 0; i < len; i+=1 ){
	        if(this.completeLayers || this.elements[i]){
	            this.elements[i].prepareFrame(this.renderedFrame - this.layers[i].st);
	            if(this.elements[i]._mdf) {
	                this._mdf = true;
	            }
	        }
	    }
	};
	
	ICompElement.prototype.renderInnerContent = function() {
	    var i,len = this.layers.length;
	    for( i = 0; i < len; i += 1 ){
	        if(this.completeLayers || this.elements[i]){
	            this.elements[i].renderFrame();
	        }
	    }
	};
	
	ICompElement.prototype.setElements = function(elems){
	    this.elements = elems;
	};
	
	ICompElement.prototype.getElements = function(){
	    return this.elements;
	};
	
	ICompElement.prototype.destroyElements = function(){
	    var i,len = this.layers.length;
	    for( i = 0; i < len; i+=1 ){
	        if(this.elements[i]){
	            this.elements[i].destroy();
	        }
	    }
	};
	
	ICompElement.prototype.destroy = function(){
	    this.destroyElements();
	    this.destroyBaseElement();
	};
	
	function IImageElement(data,globalData,comp){
	    this.assetData = globalData.getAssetData(data.refId);
	    this.initElement(data,globalData,comp);
	}
	
	extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement], IImageElement);
	
	IImageElement.prototype.createContent = function(){
	
	    var assetPath = this.globalData.getAssetsPath(this.assetData);
	
	    this.innerElem = createNS('image');
	    this.innerElem.setAttribute('width',this.assetData.w+"px");
	    this.innerElem.setAttribute('height',this.assetData.h+"px");
	    this.innerElem.setAttribute('preserveAspectRatio','xMidYMid slice');
	    this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);
	    
	    this.layerElement.appendChild(this.innerElem);
	};
	
	function ISolidElement(data,globalData,comp){
	    this.initElement(data,globalData,comp);
	}
	extendPrototype([IImageElement], ISolidElement);
	
	ISolidElement.prototype.createContent = function(){
	
	    var rect = createNS('rect');
	    ////rect.style.width = this.data.sw;
	    ////rect.style.height = this.data.sh;
	    ////rect.style.fill = this.data.sc;
	    rect.setAttribute('width',this.data.sw);
	    rect.setAttribute('height',this.data.sh);
	    rect.setAttribute('fill',this.data.sc);
	    this.layerElement.appendChild(rect);
	};
	function SVGCompElement(data,globalData,comp){
	    this.layers = data.layers;
	    this.supports3d = true;
	    this.completeLayers = false;
	    this.pendingElements = [];
	    this.elements = this.layers ? createSizedArray(this.layers.length) : [];
	    //this.layerElement = createNS('g');
	    this.initElement(data,globalData,comp);
	    this.tm = data.tm ? PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this) : {_placeholder:true};
	}
	
	extendPrototype([SVGRenderer, ICompElement, SVGBaseElement], SVGCompElement);
	function SVGTextElement(data,globalData,comp){
	    this.textSpans = [];
	    this.renderType = 'svg';
	    this.initElement(data,globalData,comp);
	}
	
	extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement], SVGTextElement);
	
	SVGTextElement.prototype.createContent = function(){
	
	    if (this.data.singleShape && !this.globalData.fontManager.chars) {
	        this.textContainer = createNS('text');
	    }
	};
	
	SVGTextElement.prototype.buildTextContents = function(textArray) {
	    var i = 0, len = textArray.length;
	    var textContents = [], currentTextContent = '';
	    while (i < len) {
	        if(textArray[i] === String.fromCharCode(13)) {
	            textContents.push(currentTextContent);
	            currentTextContent = '';
	        } else {
	            currentTextContent += textArray[i];
	        }
	        i += 1;
	    }
	    textContents.push(currentTextContent);
	    return textContents;
	}
	
	SVGTextElement.prototype.buildNewText = function(){
	    var i, len;
	
	    var documentData = this.textProperty.currentData;
	    this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
	    if(documentData.fc) {
	        this.layerElement.setAttribute('fill', this.buildColor(documentData.fc));
	    }else{
	        this.layerElement.setAttribute('fill', 'rgba(0,0,0,0)');
	    }
	    if(documentData.sc){
	        this.layerElement.setAttribute('stroke', this.buildColor(documentData.sc));
	        this.layerElement.setAttribute('stroke-width', documentData.sw);
	    }
	    this.layerElement.setAttribute('font-size', documentData.finalSize);
	    var fontData = this.globalData.fontManager.getFontByName(documentData.f);
	    if(fontData.fClass){
	        this.layerElement.setAttribute('class',fontData.fClass);
	    } else {
	        this.layerElement.setAttribute('font-family', fontData.fFamily);
	        var fWeight = documentData.fWeight, fStyle = documentData.fStyle;
	        this.layerElement.setAttribute('font-style', fStyle);
	        this.layerElement.setAttribute('font-weight', fWeight);
	    }
	
	    var letters = documentData.l || [];
	    var usesGlyphs = this.globalData.fontManager.chars;
	    len = letters.length;
	    if(!len){
	        return;
	    }
	    var tSpan;
	    var matrixHelper = this.mHelper;
	    var shapes, shapeStr = '', singleShape = this.data.singleShape;
	    var xPos = 0, yPos = 0, firstLine = true;
	    var trackingOffset = documentData.tr/1000*documentData.finalSize;
	    if(singleShape && !usesGlyphs && !documentData.sz) {
	        var tElement = this.textContainer;
	        var justify = 'start';
	        switch(documentData.j) {
	            case 1:
	                justify = 'end';
	                break;
	            case 2:
	                justify = 'middle';
	                break;
	        }
	        tElement.setAttribute('text-anchor',justify);
	        tElement.setAttribute('letter-spacing',trackingOffset);
	        var textContent = this.buildTextContents(documentData.finalText);
	        len = textContent.length;
	        yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
	        for ( i = 0; i < len; i += 1) {
	            tSpan = this.textSpans[i] || createNS('tspan');
	            tSpan.textContent = textContent[i];
	            tSpan.setAttribute('x', 0);
	            tSpan.setAttribute('y', yPos);
	            tSpan.style.display = 'inherit';
	            tElement.appendChild(tSpan);
	            this.textSpans[i] = tSpan;
	            yPos += documentData.finalLineHeight;
	        }
	        
	        this.layerElement.appendChild(tElement);
	    } else {
	        var cachedSpansLength = this.textSpans.length;
	        var shapeData, charData;
	        for (i = 0; i < len; i += 1) {
	            if(!usesGlyphs || !singleShape || i === 0){
	                tSpan = cachedSpansLength > i ? this.textSpans[i] : createNS(usesGlyphs?'path':'text');
	                if (cachedSpansLength <= i) {
	                    tSpan.setAttribute('stroke-linecap', 'butt');
	                    tSpan.setAttribute('stroke-linejoin','round');
	                    tSpan.setAttribute('stroke-miterlimit','4');
	                    this.textSpans[i] = tSpan;
	                    this.layerElement.appendChild(tSpan);
	                }
	                tSpan.style.display = 'inherit';
	            }
	            
	            matrixHelper.reset();
	            matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
	            if (singleShape) {
	                if(letters[i].n) {
	                    xPos = -trackingOffset;
	                    yPos += documentData.yOffset;
	                    yPos += firstLine ? 1 : 0;
	                    firstLine = false;
	                }
	                this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
	                xPos += letters[i].l || 0;
	                //xPos += letters[i].val === ' ' ? 0 : trackingOffset;
	                xPos += trackingOffset;
	            }
	            if(usesGlyphs) {
	                charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
	                shapeData = charData && charData.data || {};
	                shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
	                if(!singleShape){
	                    tSpan.setAttribute('d',this.createPathShape(matrixHelper,shapes));
	                } else {
	                    shapeStr += this.createPathShape(matrixHelper,shapes);
	                }
	            } else {
	                if(singleShape) {
	                    tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
	                }
	                tSpan.textContent = letters[i].val;
	                tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space","preserve");
	            }
	            //
	        }
	        if (singleShape) {
	            tSpan.setAttribute('d',shapeStr);
	        }
	    }
	    while (i < this.textSpans.length){
	        this.textSpans[i].style.display = 'none';
	        i += 1;
	    }
	    
	    this._sizeChanged = true;
	};
	
	SVGTextElement.prototype.sourceRectAtTime = function(time){
	    this.prepareFrame(this.comp.renderedFrame - this.data.st);
	    this.renderInnerContent();
	    if(this._sizeChanged){
	        this._sizeChanged = false;
	        var textBox = this.layerElement.getBBox();
	        this.bbox = {
	            top: textBox.y,
	            left: textBox.x,
	            width: textBox.width,
	            height: textBox.height
	        };
	    }
	    return this.bbox;
	};
	
	SVGTextElement.prototype.renderInnerContent = function(){
	
	    if(!this.data.singleShape){
	        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
	        if(this.lettersChangedFlag || this.textAnimator.lettersChangedFlag){
	            this._sizeChanged = true;
	            var  i,len;
	            var renderedLetters = this.textAnimator.renderedLetters;
	
	            var letters = this.textProperty.currentData.l;
	
	            len = letters.length;
	            var renderedLetter, textSpan;
	            for(i=0;i<len;i+=1){
	                if(letters[i].n){
	                    continue;
	                }
	                renderedLetter = renderedLetters[i];
	                textSpan = this.textSpans[i];
	                if(renderedLetter._mdf.m) {
	                    textSpan.setAttribute('transform',renderedLetter.m);
	                }
	                if(renderedLetter._mdf.o) {
	                    textSpan.setAttribute('opacity',renderedLetter.o);
	                }
	                if(renderedLetter._mdf.sw){
	                    textSpan.setAttribute('stroke-width',renderedLetter.sw);
	                }
	                if(renderedLetter._mdf.sc){
	                    textSpan.setAttribute('stroke',renderedLetter.sc);
	                }
	                if(renderedLetter._mdf.fc){
	                    textSpan.setAttribute('fill',renderedLetter.fc);
	                }
	            }
	        }
	    }
	};
	function SVGShapeElement(data,globalData,comp){
	    //List of drawable elements
	    this.shapes = [];
	    // Full shape data
	    this.shapesData = data.shapes;
	    //List of styles that will be applied to shapes
	    this.stylesList = [];
	    //List of modifiers that will be applied to shapes
	    this.shapeModifiers = [];
	    //List of items in shape tree
	    this.itemsData = [];
	    //List of items in previous shape tree
	    this.processedElements = [];
	    this.initElement(data,globalData,comp);
	    //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
	    // List of elements that have been created
	    this.prevViewData = [];
	}
	
	extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement], SVGShapeElement);
	
	SVGShapeElement.prototype.initSecondaryElement = function() {
	};
	
	SVGShapeElement.prototype.identityMatrix = new Matrix();
	
	SVGShapeElement.prototype.buildExpressionInterface = function(){};
	
	SVGShapeElement.prototype.createContent = function(){
	    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement, 0, [], true);
	};
	
	SVGShapeElement.prototype.createStyleElement = function(data, level){
	    //TODO: prevent drawing of hidden styles
	    var elementData;
	    var styleOb = new SVGStyleData(data, level);
	
	    var pathElement = styleOb.pElem;
	    if(data.ty === 'st') {
	        elementData = new SVGStrokeStyleData(this, data, styleOb);
	    } else if(data.ty === 'fl') {
	        elementData = new SVGFillStyleData(this, data, styleOb);
	    } else if(data.ty === 'gf' || data.ty === 'gs') {
	        var gradientConstructor = data.ty === 'gf' ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
	        elementData = new gradientConstructor(this, data, styleOb);
	        this.globalData.defs.appendChild(elementData.gf);
	        if (elementData.maskId) {
	            this.globalData.defs.appendChild(elementData.ms);
	            this.globalData.defs.appendChild(elementData.of);
	            pathElement.setAttribute('mask','url(#' + elementData.maskId + ')');
	        }
	    }
	    
	    if(data.ty === 'st' || data.ty === 'gs') {
	        pathElement.setAttribute('stroke-linecap', this.lcEnum[data.lc] || 'round');
	        pathElement.setAttribute('stroke-linejoin',this.ljEnum[data.lj] || 'round');
	        pathElement.setAttribute('fill-opacity','0');
	        if(data.lj === 1) {
	            pathElement.setAttribute('stroke-miterlimit',data.ml);
	        }
	    }
	
	    if(data.r === 2) {
	        pathElement.setAttribute('fill-rule', 'evenodd');
	    }
	
	    if(data.ln){
	        pathElement.setAttribute('id',data.ln);
	    }
	    if(data.cl){
	        pathElement.setAttribute('class',data.cl);
	    }
	    this.stylesList.push(styleOb);
	    return elementData;
	};
	
	SVGShapeElement.prototype.createGroupElement = function(data) {
	    var elementData = new ShapeGroupData();
	    if(data.ln){
	        elementData.gr.setAttribute('id',data.ln);
	    }
	    return elementData;
	};
	
	SVGShapeElement.prototype.createTransformElement = function(data) {
	    return new SVGTransformData(TransformPropertyFactory.getTransformProperty(this,data,this), PropertyFactory.getProp(this,data.o,0,0.01,this));
	};
	
	SVGShapeElement.prototype.createShapeElement = function(data, ownTransformers, level) {
	    var ty = 4;
	    if(data.ty === 'rc'){
	        ty = 5;
	    }else if(data.ty === 'el'){
	        ty = 6;
	    }else if(data.ty === 'sr'){
	        ty = 7;
	    }
	    var shapeProperty = ShapePropertyFactory.getShapeProp(this,data,ty,this);
	    var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
	    this.shapes.push(elementData.sh);
	    this.addShapeToModifiers(elementData);
	    return elementData;
	};
	
	SVGShapeElement.prototype.setElementStyles = function(elementData){
	    var arr = elementData.styles;
	    var j, jLen = this.stylesList.length;
	    for (j = 0; j < jLen; j += 1) {
	        if (!this.stylesList[j].closed) {
	            arr.push(this.stylesList[j]);
	        }
	    }
	};
	
	SVGShapeElement.prototype.reloadShapes = function(){
	    this._isFirstFrame = true;
	    var i, len = this.itemsData.length;
	    for( i = 0; i < len; i += 1) {
	        this.prevViewData[i] = this.itemsData[i];
	    }
	    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement, 0, [], true);
	    len = this.dynamicProperties.length;
	    for(i = 0; i < len; i += 1) {
	        this.dynamicProperties[i].getValue();
	    }
	    this.renderModifiers();
	};
	
	SVGShapeElement.prototype.searchShapes = function(arr,itemsData,prevViewData,container, level, transformers, render){
	    var ownTransformers = [].concat(transformers);
	    var i, len = arr.length - 1;
	    var j, jLen;
	    var ownStyles = [], ownModifiers = [], styleOb, currentTransform, modifier, processedPos;
	    for(i=len;i>=0;i-=1){
	        processedPos = this.searchProcessedElement(arr[i]);
	        if(!processedPos){
	            arr[i]._render = render;
	        } else {
	            itemsData[i] = prevViewData[processedPos - 1];
	        }
	        if(arr[i].ty == 'fl' || arr[i].ty == 'st' || arr[i].ty == 'gf' || arr[i].ty == 'gs'){
	            if(!processedPos){
	                itemsData[i] = this.createStyleElement(arr[i], level);
	            } else {
	                itemsData[i].style.closed = false;
	            }
	            if(arr[i]._render){
	                container.appendChild(itemsData[i].style.pElem);
	            }
	            ownStyles.push(itemsData[i].style);
	        }else if(arr[i].ty == 'gr'){
	            if(!processedPos){
	                itemsData[i] = this.createGroupElement(arr[i]);
	            } else {
	                jLen = itemsData[i].it.length;
	                for(j=0;j<jLen;j+=1){
	                    itemsData[i].prevViewData[j] = itemsData[i].it[j];
	                }
	            }
	            this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData,itemsData[i].gr, level + 1, ownTransformers, render);
	            if(arr[i]._render){
	                container.appendChild(itemsData[i].gr);
	            }
	        }else if(arr[i].ty == 'tr'){
	            if(!processedPos){
	                itemsData[i] = this.createTransformElement(arr[i]);
	            }
	            currentTransform = itemsData[i].transform;
	            ownTransformers.push(currentTransform);
	        }else if(arr[i].ty == 'sh' || arr[i].ty == 'rc' || arr[i].ty == 'el' || arr[i].ty == 'sr'){
	            if(!processedPos){
	                itemsData[i] = this.createShapeElement(arr[i], ownTransformers, level);
	            }
	            this.setElementStyles(itemsData[i]);
	
	        }else if(arr[i].ty == 'tm' || arr[i].ty == 'rd' || arr[i].ty == 'ms'){
	            if(!processedPos){
	                modifier = ShapeModifiers.getModifier(arr[i].ty);
	                modifier.init(this,arr[i]);
	                itemsData[i] = modifier;
	                this.shapeModifiers.push(modifier);
	            } else {
	                modifier = itemsData[i];
	                modifier.closed = false;
	            }
	            ownModifiers.push(modifier);
	        }else if(arr[i].ty == 'rp'){
	            if(!processedPos){
	                modifier = ShapeModifiers.getModifier(arr[i].ty);
	                itemsData[i] = modifier;
	                modifier.init(this,arr,i,itemsData);
	                this.shapeModifiers.push(modifier);
	                render = false;
	            }else{
	                modifier = itemsData[i];
	                modifier.closed = true;
	            }
	            ownModifiers.push(modifier);
	        }
	        this.addProcessedElement(arr[i], i + 1);
	    }
	    len = ownStyles.length;
	    for(i=0;i<len;i+=1){
	        ownStyles[i].closed = true;
	    }
	    len = ownModifiers.length;
	    for(i=0;i<len;i+=1){
	        ownModifiers[i].closed = true;
	    }
	};
	
	SVGShapeElement.prototype.renderInnerContent = function() {
	    this.renderModifiers();
	    var i, len = this.stylesList.length;
	    for(i=0;i<len;i+=1){
	        this.stylesList[i].reset();
	    }
	    this.renderShape(this.shapesData, this.itemsData, this.layerElement);
	
	    for (i = 0; i < len; i += 1) {
	        if (this.stylesList[i]._mdf || this._isFirstFrame) {
	            if(this.stylesList[i].msElem){
	                this.stylesList[i].msElem.setAttribute('d', this.stylesList[i].d);
	                //Adding M0 0 fixes same mask bug on all browsers
	                this.stylesList[i].d = 'M0 0' + this.stylesList[i].d;
	            }
	            this.stylesList[i].pElem.setAttribute('d', this.stylesList[i].d || 'M0 0');
	        }
	    }
	};
	
	
	SVGShapeElement.prototype.renderShape = function(items, data, container) {
	    var i, len = items.length - 1;
	    var ty;
	    for(i=0;i<=len;i+=1){
	        ty = items[i].ty;
	        if(ty == 'tr'){
	            if(this._isFirstFrame || data[i].transform.op._mdf){
	                container.setAttribute('opacity',data[i].transform.op.v);
	            }
	            if(this._isFirstFrame || data[i].transform.mProps._mdf){
	                container.setAttribute('transform',data[i].transform.mProps.v.to2dCSS());
	            }
	        }else if(items[i]._render && (ty == 'sh' || ty == 'el' || ty == 'rc' || ty == 'sr')){
	            this.renderPath(data[i]);
	        }else if(ty == 'fl'){
	            this.renderFill(items[i],data[i]);
	        }else if(ty == 'gf'){
	            this.renderGradient(items[i],data[i]);
	        }else if(ty == 'gs'){
	            this.renderGradient(items[i],data[i]);
	            this.renderStroke(items[i],data[i]);
	        }else if(ty == 'st'){
	            this.renderStroke(items[i],data[i]);
	        }else if(ty == 'gr'){
	            this.renderShape(items[i].it,data[i].it, data[i].gr);
	        }else if(ty == 'tm'){
	            //
	        }
	    }
	
	};
	
	SVGShapeElement.prototype.renderPath = function(itemData){
	    var j, jLen,pathStringTransformed,redraw,pathNodes,l, lLen = itemData.styles.length;
	    var lvl = itemData.lvl;
	    var paths, mat, props, iterations, k;
	    for(l=0;l<lLen;l+=1){
	        redraw = itemData.sh._mdf || this._isFirstFrame;
	        if(itemData.styles[l].lvl < lvl){
	            mat = this.mHelper.reset();
	            iterations = lvl - itemData.styles[l].lvl;
	            k = itemData.transformers.length-1;
	            while(iterations > 0) {
	                redraw = itemData.transformers[k].mProps._mdf || redraw;
	                props = itemData.transformers[k].mProps.v.props;
	                mat.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
	                iterations --;
	                k --;
	            }
	        } else {
	            mat = this.identityMatrix;
	        }
	        paths = itemData.sh.paths;
	        jLen = paths._length;
	        if(redraw){
	            pathStringTransformed = '';
	            for(j=0;j<jLen;j+=1){
	                pathNodes = paths.shapes[j];
	                if(pathNodes && pathNodes._length){
	                    pathStringTransformed += this.buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
	                }
	            }
	            itemData.caches[l] = pathStringTransformed;
	        } else {
	            pathStringTransformed = itemData.caches[l];
	        }
	        itemData.styles[l].d += pathStringTransformed;
	        itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
	    }
	};
	
	SVGShapeElement.prototype.renderFill = function(styleData,itemData){
	    var styleElem = itemData.style;
	
	    if(itemData.c._mdf || this._isFirstFrame){
	        styleElem.pElem.setAttribute('fill','rgb('+bm_floor(itemData.c.v[0])+','+bm_floor(itemData.c.v[1])+','+bm_floor(itemData.c.v[2])+')');
	    }
	    if(itemData.o._mdf || this._isFirstFrame){
	        styleElem.pElem.setAttribute('fill-opacity',itemData.o.v);
	    }
	};
	
	SVGShapeElement.prototype.renderGradient = function(styleData, itemData) {
	    var gfill = itemData.gf;
	    var hasOpacity = itemData.g._hasOpacity;
	    var pt1 = itemData.s.v, pt2 = itemData.e.v;
	
	    if (itemData.o._mdf || this._isFirstFrame) {
	        var attr = styleData.ty === 'gf' ? 'fill-opacity' : 'stroke-opacity';
	        itemData.style.pElem.setAttribute(attr, itemData.o.v);
	    }
	    if (itemData.s._mdf || this._isFirstFrame) {
	        var attr1 = styleData.t === 1 ? 'x1' : 'cx';
	        var attr2 = attr1 === 'x1' ? 'y1' : 'cy';
	        gfill.setAttribute(attr1, pt1[0]);
	        gfill.setAttribute(attr2, pt1[1]);
	        if (hasOpacity && !itemData.g._collapsable) {
	            itemData.of.setAttribute(attr1, pt1[0]);
	            itemData.of.setAttribute(attr2, pt1[1]);
	        }
	    }
	    var stops, i, len, stop;
	    if (itemData.g._cmdf || this._isFirstFrame) {
	        stops = itemData.cst;
	        var cValues = itemData.g.c;
	        len = stops.length;
	        for (i = 0; i < len; i += 1){
	            stop = stops[i];
	            stop.setAttribute('offset', cValues[i * 4] + '%');
	            stop.setAttribute('stop-color','rgb('+ cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ','+cValues[i * 4 + 3] + ')');
	        }
	    }
	    if (hasOpacity && (itemData.g._omdf || this._isFirstFrame)) {
	        var oValues = itemData.g.o;
	        if(itemData.g._collapsable) {
	            stops = itemData.cst;
	        } else {
	            stops = itemData.ost;
	        }
	        len = stops.length;
	        for (i = 0; i < len; i += 1) {
	            stop = stops[i];
	            if(!itemData.g._collapsable) {
	                stop.setAttribute('offset', oValues[i * 2] + '%');
	            }
	            stop.setAttribute('stop-opacity', oValues[i * 2 + 1]);
	        }
	    }
	    if (styleData.t === 1) {
	        if (itemData.e._mdf  || this._isFirstFrame) {
	            gfill.setAttribute('x2', pt2[0]);
	            gfill.setAttribute('y2', pt2[1]);
	            if (hasOpacity && !itemData.g._collapsable) {
	                itemData.of.setAttribute('x2', pt2[0]);
	                itemData.of.setAttribute('y2', pt2[1]);
	            }
	        }
	    } else {
	        var rad;
	        if (itemData.s._mdf || itemData.e._mdf || this._isFirstFrame) {
	            rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
	            gfill.setAttribute('r', rad);
	            if(hasOpacity && !itemData.g._collapsable){
	                itemData.of.setAttribute('r', rad);
	            }
	        }
	        if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || this._isFirstFrame) {
	            if (!rad) {
	                rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
	            }
	            var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
	
	            var percent = itemData.h.v >= 1 ? 0.99 : itemData.h.v <= -1 ? -0.99: itemData.h.v;
	            var dist = rad * percent;
	            var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
	            var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
	            gfill.setAttribute('fx', x);
	            gfill.setAttribute('fy', y);
	            if (hasOpacity && !itemData.g._collapsable) {
	                itemData.of.setAttribute('fx', x);
	                itemData.of.setAttribute('fy', y);
	            }
	        }
	        //gfill.setAttribute('fy','200');
	    }
	};
	
	SVGShapeElement.prototype.renderStroke = function(styleData, itemData) {
	    var styleElem = itemData.style;
	    var d = itemData.d;
	    if (d && (d._mdf || this._isFirstFrame) && d.dashStr) {
	        styleElem.pElem.setAttribute('stroke-dasharray', d.dashStr);
	        styleElem.pElem.setAttribute('stroke-dashoffset', d.dashoffset[0]);
	    }
	    if(itemData.c && (itemData.c._mdf || this._isFirstFrame)){
	        styleElem.pElem.setAttribute('stroke','rgb(' + bm_floor(itemData.c.v[0]) + ',' + bm_floor(itemData.c.v[1]) + ',' + bm_floor(itemData.c.v[2]) + ')');
	    }
	    if(itemData.o._mdf || this._isFirstFrame){
	        styleElem.pElem.setAttribute('stroke-opacity', itemData.o.v);
	    }
	    if(itemData.w._mdf || this._isFirstFrame){
	        styleElem.pElem.setAttribute('stroke-width', itemData.w.v);
	        if(styleElem.msElem){
	            styleElem.msElem.setAttribute('stroke-width', itemData.w.v);
	        }
	    }
	};
	
	SVGShapeElement.prototype.destroy = function(){
	    this.destroyBaseElement();
	    this.shapeData = null;
	    this.itemsData = null;
	};
	
	function SVGTintFilter(filter, filterManager){
	    this.filterManager = filterManager;
	    var feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type','matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');
	    feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
	    feColorMatrix.setAttribute('result','f1');
	    filter.appendChild(feColorMatrix);
	    feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type','matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters','sRGB');
	    feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
	    feColorMatrix.setAttribute('result','f2');
	    filter.appendChild(feColorMatrix);
	    this.matrixFilter = feColorMatrix;
	    if(filterManager.effectElements[2].p.v !== 100 || filterManager.effectElements[2].p.k){
	        var feMerge = createNS('feMerge');
	        filter.appendChild(feMerge);
	        var feMergeNode;
	        feMergeNode = createNS('feMergeNode');
	        feMergeNode.setAttribute('in','SourceGraphic');
	        feMerge.appendChild(feMergeNode);
	        feMergeNode = createNS('feMergeNode');
	        feMergeNode.setAttribute('in','f2');
	        feMerge.appendChild(feMergeNode);
	    }
	}
	
	SVGTintFilter.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        var colorBlack = this.filterManager.effectElements[0].p.v;
	        var colorWhite = this.filterManager.effectElements[1].p.v;
	        var opacity = this.filterManager.effectElements[2].p.v/100;
	        this.matrixFilter.setAttribute('values',(colorWhite[0]- colorBlack[0])+' 0 0 0 '+ colorBlack[0] +' '+ (colorWhite[1]- colorBlack[1]) +' 0 0 0 '+ colorBlack[1] +' '+ (colorWhite[2]- colorBlack[2]) +' 0 0 0 '+ colorBlack[2] +' 0 0 0 ' + opacity + ' 0');
	    }
	};
	function SVGFillFilter(filter, filterManager){
	    this.filterManager = filterManager;
	    var feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type','matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters','sRGB');
	    feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
	    filter.appendChild(feColorMatrix);
	    this.matrixFilter = feColorMatrix;
	}
	SVGFillFilter.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        var color = this.filterManager.effectElements[2].p.v;
	        var opacity = this.filterManager.effectElements[6].p.v;
	        this.matrixFilter.setAttribute('values','0 0 0 0 '+color[0]+' 0 0 0 0 '+color[1]+' 0 0 0 0 '+color[2]+' 0 0 0 '+opacity+' 0');
	    }
	};
	function SVGStrokeEffect(elem, filterManager){
	    this.initialized = false;
	    this.filterManager = filterManager;
	    this.elem = elem;
	    this.paths = [];
	}
	
	SVGStrokeEffect.prototype.initialize = function(){
	
	    var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
	    var path,groupPath, i, len;
	    if(this.filterManager.effectElements[1].p.v === 1){
	        len = this.elem.maskManager.masksProperties.length;
	        i = 0;
	    } else {
	        i = this.filterManager.effectElements[0].p.v - 1;
	        len = i + 1;
	    }
	    groupPath = createNS('g'); 
	    groupPath.setAttribute('fill','none');
	    groupPath.setAttribute('stroke-linecap','round');
	    groupPath.setAttribute('stroke-dashoffset',1);
	    for(i;i<len;i+=1){
	        path = createNS('path');
	        groupPath.appendChild(path);
	        this.paths.push({p:path,m:i});
	    }
	    if(this.filterManager.effectElements[10].p.v === 3){
	        var mask = createNS('mask');
	        var id = 'stms_' + randomString(10);
	        mask.setAttribute('id',id);
	        mask.setAttribute('mask-type','alpha');
	        mask.appendChild(groupPath);
	        this.elem.globalData.defs.appendChild(mask);
	        var g = createNS('g');
	        g.setAttribute('mask','url(' + locationHref + '#'+id+')');
	        if(elemChildren[0]){
	            g.appendChild(elemChildren[0]);
	        }
	        this.elem.layerElement.appendChild(g);
	        this.masker = mask;
	        groupPath.setAttribute('stroke','#fff');
	    } else if(this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2){
	        if(this.filterManager.effectElements[10].p.v === 2){
	            elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
	            while(elemChildren.length){
	                this.elem.layerElement.removeChild(elemChildren[0]);
	            }
	        }
	        this.elem.layerElement.appendChild(groupPath);
	        this.elem.layerElement.removeAttribute('mask');
	        groupPath.setAttribute('stroke','#fff');
	    }
	    this.initialized = true;
	    this.pathMasker = groupPath;
	};
	
	SVGStrokeEffect.prototype.renderFrame = function(forceRender){
	    if(!this.initialized){
	        this.initialize();
	    }
	    var i, len = this.paths.length;
	    var mask, path;
	    for(i=0;i<len;i+=1){
	        if(this.paths[i].m === -1) {
	            continue;
	        }
	        mask = this.elem.maskManager.viewData[this.paths[i].m];
	        path = this.paths[i].p;
	        if(forceRender || this.filterManager._mdf || mask.prop._mdf){
	            path.setAttribute('d',mask.lastPath);
	        }
	        if(forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask.prop._mdf){
	            var dasharrayValue;
	            if(this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100){
	                var s = Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)/100;
	                var e = Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)/100;
	                var l = path.getTotalLength();
	                dasharrayValue = '0 0 0 ' + l*s + ' ';
	                var lineLength = l*(e-s);
	                var segment = 1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v/100;
	                var units = Math.floor(lineLength/segment);
	                var j;
	                for(j=0;j<units;j+=1){
	                    dasharrayValue += '1 ' + this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v/100 + ' ';
	                }
	                dasharrayValue += '0 ' + l*10 + ' 0 0';
	            } else {
	                dasharrayValue = '1 ' + this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v/100;
	            }
	            path.setAttribute('stroke-dasharray',dasharrayValue);
	        }
	    }
	    if(forceRender || this.filterManager.effectElements[4].p._mdf){
	        this.pathMasker.setAttribute('stroke-width',this.filterManager.effectElements[4].p.v*2);
	    }
	    
	    if(forceRender || this.filterManager.effectElements[6].p._mdf){
	        this.pathMasker.setAttribute('opacity',this.filterManager.effectElements[6].p.v);
	    }
	    if(this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2){
	        if(forceRender || this.filterManager.effectElements[3].p._mdf){
	            var color = this.filterManager.effectElements[3].p.v;
	            this.pathMasker.setAttribute('stroke','rgb('+bm_floor(color[0]*255)+','+bm_floor(color[1]*255)+','+bm_floor(color[2]*255)+')');
	        }
	    }
	};
	function SVGTritoneFilter(filter, filterManager){
	    this.filterManager = filterManager;
	    var feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type','matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');
	    feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
	    feColorMatrix.setAttribute('result','f1');
	    filter.appendChild(feColorMatrix);
	    var feComponentTransfer = createNS('feComponentTransfer');
	    feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');
	    filter.appendChild(feComponentTransfer);
	    this.matrixFilter = feComponentTransfer;
	    var feFuncR = createNS('feFuncR');
	    feFuncR.setAttribute('type','table');
	    feComponentTransfer.appendChild(feFuncR);
	    this.feFuncR = feFuncR;
	    var feFuncG = createNS('feFuncG');
	    feFuncG.setAttribute('type','table');
	    feComponentTransfer.appendChild(feFuncG);
	    this.feFuncG = feFuncG;
	    var feFuncB = createNS('feFuncB');
	    feFuncB.setAttribute('type','table');
	    feComponentTransfer.appendChild(feFuncB);
	    this.feFuncB = feFuncB;
	}
	
	SVGTritoneFilter.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        var color1 = this.filterManager.effectElements[0].p.v;
	        var color2 = this.filterManager.effectElements[1].p.v;
	        var color3 = this.filterManager.effectElements[2].p.v;
	        var tableR = color3[0] + ' ' + color2[0] + ' ' + color1[0];
	        var tableG = color3[1] + ' ' + color2[1] + ' ' + color1[1];
	        var tableB = color3[2] + ' ' + color2[2] + ' ' + color1[2];
	        this.feFuncR.setAttribute('tableValues', tableR);
	        this.feFuncG.setAttribute('tableValues', tableG);
	        this.feFuncB.setAttribute('tableValues', tableB);
	        //var opacity = this.filterManager.effectElements[2].p.v/100;
	        //this.matrixFilter.setAttribute('values',(colorWhite[0]- colorBlack[0])+' 0 0 0 '+ colorBlack[0] +' '+ (colorWhite[1]- colorBlack[1]) +' 0 0 0 '+ colorBlack[1] +' '+ (colorWhite[2]- colorBlack[2]) +' 0 0 0 '+ colorBlack[2] +' 0 0 0 ' + opacity + ' 0');
	    }
	};
	function SVGProLevelsFilter(filter, filterManager){
	    this.filterManager = filterManager;
	    var effectElements = this.filterManager.effectElements;
	    var feComponentTransfer = createNS('feComponentTransfer');
	    var feFuncR, feFuncG, feFuncB;
	    
	    if(effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1){
	        this.feFuncR = this.createFeFunc('feFuncR', feComponentTransfer);
	    }
	    if(effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1){
	        this.feFuncG = this.createFeFunc('feFuncG', feComponentTransfer);
	    }
	    if(effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1){
	        this.feFuncB = this.createFeFunc('feFuncB', feComponentTransfer);
	    }
	    if(effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1){
	        this.feFuncA = this.createFeFunc('feFuncA', feComponentTransfer);
	    }
	    
	    if(this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA){
	        feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');
	        filter.appendChild(feComponentTransfer);
	        feComponentTransfer = createNS('feComponentTransfer');
	    }
	
	    if(effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1){
	
	        feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');
	        filter.appendChild(feComponentTransfer);
	        this.feFuncRComposed = this.createFeFunc('feFuncR', feComponentTransfer);
	        this.feFuncGComposed = this.createFeFunc('feFuncG', feComponentTransfer);
	        this.feFuncBComposed = this.createFeFunc('feFuncB', feComponentTransfer);
	    }
	}
	
	SVGProLevelsFilter.prototype.createFeFunc = function(type, feComponentTransfer) {
	    var feFunc = createNS(type);
	    feFunc.setAttribute('type','table');
	    feComponentTransfer.appendChild(feFunc);
	    return feFunc;
	};
	
	SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
	    var cnt = 0;
	    var segments = 256;
	    var perc;
	    var min = Math.min(inputBlack, inputWhite);
	    var max = Math.max(inputBlack, inputWhite);
	    var table = Array.call(null,{length:segments});
	    var colorValue;
	    var pos = 0;
	    var outputDelta = outputWhite - outputBlack; 
	    var inputDelta = inputWhite - inputBlack; 
	    while(cnt <= 256) {
	        perc = cnt/256;
	        if(perc <= min){
	            colorValue = inputDelta < 0 ? outputWhite : outputBlack;
	        } else if(perc >= max){
	            colorValue = inputDelta < 0 ? outputBlack : outputWhite;
	        } else {
	            colorValue = (outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma));
	        }
	        table[pos++] = colorValue;
	        cnt += 256/(segments-1);
	    }
	    return table.join(' ');
	};
	
	SVGProLevelsFilter.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        var val, cnt, perc, bezier;
	        var effectElements = this.filterManager.effectElements;
	        if(this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)){
	            val = this.getTableValue(effectElements[3].p.v,effectElements[4].p.v,effectElements[5].p.v,effectElements[6].p.v,effectElements[7].p.v);
	            this.feFuncRComposed.setAttribute('tableValues',val);
	            this.feFuncGComposed.setAttribute('tableValues',val);
	            this.feFuncBComposed.setAttribute('tableValues',val);
	        }
	
	
	        if(this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)){
	            val = this.getTableValue(effectElements[10].p.v,effectElements[11].p.v,effectElements[12].p.v,effectElements[13].p.v,effectElements[14].p.v);
	            this.feFuncR.setAttribute('tableValues',val);
	        }
	
	        if(this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)){
	            val = this.getTableValue(effectElements[17].p.v,effectElements[18].p.v,effectElements[19].p.v,effectElements[20].p.v,effectElements[21].p.v);
	            this.feFuncG.setAttribute('tableValues',val);
	        }
	
	        if(this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)){
	            val = this.getTableValue(effectElements[24].p.v,effectElements[25].p.v,effectElements[26].p.v,effectElements[27].p.v,effectElements[28].p.v);
	            this.feFuncB.setAttribute('tableValues',val);
	        }
	
	        if(this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)){
	            val = this.getTableValue(effectElements[31].p.v,effectElements[32].p.v,effectElements[33].p.v,effectElements[34].p.v,effectElements[35].p.v);
	            this.feFuncA.setAttribute('tableValues',val);
	        }
	        
	    }
	};
	function SVGDropShadowEffect(filter, filterManager){
	    filter.setAttribute('x','-100%');
	    filter.setAttribute('y','-100%');
	    filter.setAttribute('width','400%');
	    filter.setAttribute('height','400%');
	    this.filterManager = filterManager;
	
	    var feGaussianBlur = createNS('feGaussianBlur');
	    feGaussianBlur.setAttribute('in','SourceAlpha');
	    feGaussianBlur.setAttribute('result','drop_shadow_1');
	    feGaussianBlur.setAttribute('stdDeviation','0');
	    this.feGaussianBlur = feGaussianBlur;
	    filter.appendChild(feGaussianBlur);
	
	    var feOffset = createNS('feOffset');
	    feOffset.setAttribute('dx','25');
	    feOffset.setAttribute('dy','0');
	    feOffset.setAttribute('in','drop_shadow_1');
	    feOffset.setAttribute('result','drop_shadow_2');
	    this.feOffset = feOffset;
	    filter.appendChild(feOffset);
	    var feFlood = createNS('feFlood');
	    feFlood.setAttribute('flood-color','#00ff00');
	    feFlood.setAttribute('flood-opacity','1');
	    feFlood.setAttribute('result','drop_shadow_3');
	    this.feFlood = feFlood;
	    filter.appendChild(feFlood);
	
	    var feComposite = createNS('feComposite');
	    feComposite.setAttribute('in','drop_shadow_3');
	    feComposite.setAttribute('in2','drop_shadow_2');
	    feComposite.setAttribute('operator','in');
	    feComposite.setAttribute('result','drop_shadow_4');
	    filter.appendChild(feComposite);
	
	
	    var feMerge = createNS('feMerge');
	    filter.appendChild(feMerge);
	    var feMergeNode;
	    feMergeNode = createNS('feMergeNode');
	    feMerge.appendChild(feMergeNode);
	    feMergeNode = createNS('feMergeNode');
	    feMergeNode.setAttribute('in','SourceGraphic');
	    this.feMergeNode = feMergeNode;
	    this.feMerge = feMerge;
	    this.originalNodeAdded = false;
	    feMerge.appendChild(feMergeNode);
	}
	
	SVGDropShadowEffect.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        if(forceRender || this.filterManager.effectElements[4].p._mdf){
	            this.feGaussianBlur.setAttribute('stdDeviation', this.filterManager.effectElements[4].p.v / 4);
	        }
	        if(forceRender || this.filterManager.effectElements[0].p._mdf){
	            var col = this.filterManager.effectElements[0].p.v;
	            this.feFlood.setAttribute('flood-color',rgbToHex(Math.round(col[0]*255),Math.round(col[1]*255),Math.round(col[2]*255)));
	        }
	        if(forceRender || this.filterManager.effectElements[1].p._mdf){
	            this.feFlood.setAttribute('flood-opacity',this.filterManager.effectElements[1].p.v/255);
	        }
	        if(forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf){
	            var distance = this.filterManager.effectElements[3].p.v;
	            var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
	            var x = distance * Math.cos(angle);
	            var y = distance * Math.sin(angle);
	            this.feOffset.setAttribute('dx', x);
	            this.feOffset.setAttribute('dy', y);
	        }
	        /*if(forceRender || this.filterManager.effectElements[5].p._mdf){
	            if(this.filterManager.effectElements[5].p.v === 1 && this.originalNodeAdded) {
	                this.feMerge.removeChild(this.feMergeNode);
	                this.originalNodeAdded = false;
	            } else if(this.filterManager.effectElements[5].p.v === 0 && !this.originalNodeAdded) {
	                this.feMerge.appendChild(this.feMergeNode);
	                this.originalNodeAdded = true;
	            }
	        }*/
	    }
	};
	var _svgMatteSymbols = [];
	var _svgMatteMaskCounter = 0;
	
	function SVGMatte3Effect(filterElem, filterManager, elem){
	    this.initialized = false;
	    this.filterManager = filterManager;
	    this.filterElem = filterElem;
	    this.elem = elem;
	    elem.matteElement = createNS('g');
	    elem.matteElement.appendChild(elem.layerElement);
	    elem.matteElement.appendChild(elem.transformedElement);
	    elem.baseElement = elem.matteElement;
	}
	
	SVGMatte3Effect.prototype.findSymbol = function(mask) {
	    var i = 0, len = _svgMatteSymbols.length;
	    while(i < len) {
	        if(_svgMatteSymbols[i] === mask) {
	            return _svgMatteSymbols[i];
	        }
	        i += 1;
	    }
	    return null;
	};
	
	SVGMatte3Effect.prototype.replaceInParent = function(mask, symbolId) {
	    var parentNode = mask.layerElement.parentNode;
	    if(!parentNode) {
	        return;
	    }
	    var children = parentNode.children;
	    var i = 0, len = children.length;
	    while (i < len) {
	        if (children[i] === mask.layerElement) {
	            break;
	        }
	        i += 1;
	    }
	    var nextChild;
	    if (i <= len - 2) {
	        nextChild = children[i + 1];
	    }
	    var useElem = createNS('use');
	    useElem.setAttribute('href', '#' + symbolId);
	    if(nextChild) {
	        parentNode.insertBefore(useElem, nextChild);
	    } else {
	        parentNode.appendChild(useElem);
	    }
	};
	
	SVGMatte3Effect.prototype.setElementAsMask = function(elem, mask) {
	    if(!this.findSymbol(mask)) {
	        var symbolId = 'matte_' + randomString(5) + '_' + _svgMatteMaskCounter++;
	        var masker = createNS('mask');
	        masker.setAttribute('id', mask.layerId);
	        masker.setAttribute('mask-type', 'alpha');
	        _svgMatteSymbols.push(mask);
	        var defs = elem.globalData.defs;
	        defs.appendChild(masker);
	        var symbol = createNS('symbol');
	        symbol.setAttribute('id', symbolId);
	        this.replaceInParent(mask, symbolId);
	        symbol.appendChild(mask.layerElement);
	        defs.appendChild(symbol);
	        var useElem = createNS('use');
	        useElem.setAttribute('href', '#' + symbolId);
	        masker.appendChild(useElem);
	        mask.data.hd = false;
	        mask.show();
	    }
	    elem.setMatte(mask.layerId);
	};
	
	SVGMatte3Effect.prototype.initialize = function() {
	    var ind = this.filterManager.effectElements[0].p.v;
	    var i = 0, len = this.elem.comp.elements.length;
	    while (i < len) {
	    	if (this.elem.comp.elements[i].data.ind === ind) {
	    		this.setElementAsMask(this.elem, this.elem.comp.elements[i]);
	    	}
	    	i += 1;
	    }
	    this.initialized = true;
	};
	
	SVGMatte3Effect.prototype.renderFrame = function() {
		if(!this.initialized) {
			this.initialize();
		}
	};
	function SVGEffects(elem){
	    var i, len = elem.data.ef ? elem.data.ef.length : 0;
	    var filId = randomString(10);
	    var fil = filtersFactory.createFilter(filId);
	    var count = 0;
	    this.filters = [];
	    var filterManager;
	    for(i=0;i<len;i+=1){
	        filterManager = null;
	        if(elem.data.ef[i].ty === 20){
	            count += 1;
	            filterManager = new SVGTintFilter(fil, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 21){
	            count += 1;
	            filterManager = new SVGFillFilter(fil, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 22){
	            filterManager = new SVGStrokeEffect(elem, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 23){
	            count += 1;
	            filterManager = new SVGTritoneFilter(fil, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 24){
	            count += 1;
	            filterManager = new SVGProLevelsFilter(fil, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 25){
	            count += 1;
	            filterManager = new SVGDropShadowEffect(fil, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 28){
	            //count += 1;
	            filterManager = new SVGMatte3Effect(fil, elem.effectsManager.effectElements[i], elem);
	        }
	        if(filterManager) {
	            this.filters.push(filterManager);
	        }
	    }
	    if(count){
	        elem.globalData.defs.appendChild(fil);
	        elem.layerElement.setAttribute('filter','url(' + locationHref + '#'+filId+')');
	    }
	}
	
	SVGEffects.prototype.renderFrame = function(_isFirstFrame){
	    var i, len = this.filters.length;
	    for(i=0;i<len;i+=1){
	        this.filters[i].renderFrame(_isFirstFrame);
	    }
	};
	var animationManager = (function(){
	    var moduleOb = {};
	    var registeredAnimations = [];
	    var initTime = 0;
	    var len = 0;
	    var idled = true;
	    var playingAnimationsNum = 0;
	    var _stopped = true;
	
	    function removeElement(ev){
	        var i = 0;
	        var animItem = ev.target;
	        while(i<len) {
	            if (registeredAnimations[i].animation === animItem) {
	                registeredAnimations.splice(i, 1);
	                i -= 1;
	                len -= 1;
	                if(!animItem.isPaused){
	                    subtractPlayingCount();
	                }
	            }
	            i += 1;
	        }
	    }
	
	    function registerAnimation(element, animationData){
	        if(!element){
	            return null;
	        }
	        var i=0;
	        while(i<len){
	            if(registeredAnimations[i].elem == element && registeredAnimations[i].elem !== null ){
	                return registeredAnimations[i].animation;
	            }
	            i+=1;
	        }
	        var animItem = new AnimationItem();
	        setupAnimation(animItem, element);
	        animItem.setData(element, animationData);
	        return animItem;
	    }
	
	    function addPlayingCount(){
	        playingAnimationsNum += 1;
	        activate();
	    }
	
	    function subtractPlayingCount(){
	        playingAnimationsNum -= 1;
	        if(playingAnimationsNum === 0){
	            idled = true;
	        }
	    }
	
	    function setupAnimation(animItem, element){
	        animItem.addEventListener('destroy',removeElement);
	        animItem.addEventListener('_active',addPlayingCount);
	        animItem.addEventListener('_idle',subtractPlayingCount);
	        registeredAnimations.push({elem: element,animation:animItem});
	        len += 1;
	    }
	
	    function loadAnimation(params){
	        var animItem = new AnimationItem();
	        setupAnimation(animItem, null);
	        animItem.setParams(params);
	        return animItem;
	    }
	
	
	    function setSpeed(val,animation){
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.setSpeed(val, animation);
	        }
	    }
	
	    function setDirection(val, animation){
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.setDirection(val, animation);
	        }
	    }
	
	    function play(animation){
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.play(animation);
	        }
	    }
	    function resume(nowTime) {
	        var elapsedTime = nowTime - initTime;
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.advanceTime(elapsedTime);
	        }
	        initTime = nowTime;
	        if(!idled) {
	            window.requestAnimationFrame(resume);
	        } else {
	            _stopped = true;
	        }
	    }
	
	    function first(nowTime){
	        initTime = nowTime;
	        window.requestAnimationFrame(resume);
	    }
	
	    function pause(animation) {
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.pause(animation);
	        }
	    }
	
	    function goToAndStop(value,isFrame,animation) {
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.goToAndStop(value,isFrame,animation);
	        }
	    }
	
	    function stop(animation) {
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.stop(animation);
	        }
	    }
	
	    function togglePause(animation) {
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.togglePause(animation);
	        }
	    }
	
	    function destroy(animation) {
	        var i;
	        for(i=(len-1);i>=0;i-=1){
	            registeredAnimations[i].animation.destroy(animation);
	        }
	    }
	
	    function searchAnimations(animationData, standalone, renderer){
	        var animElements = [].concat([].slice.call(document.getElementsByClassName('lottie')),
	                  [].slice.call(document.getElementsByClassName('bodymovin')));
	        var i, len = animElements.length;
	        for(i=0;i<len;i+=1){
	            if(renderer){
	                animElements[i].setAttribute('data-bm-type',renderer);
	            }
	            registerAnimation(animElements[i], animationData);
	        }
	        if(standalone && len === 0){
	            if(!renderer){
	                renderer = 'svg';
	            }
	            var body = document.getElementsByTagName('body')[0];
	            body.innerHTML = '';
	            var div = createTag('div');
	            div.style.width = '100%';
	            div.style.height = '100%';
	            div.setAttribute('data-bm-type',renderer);
	            body.appendChild(div);
	            registerAnimation(div, animationData);
	        }
	    }
	
	    function resize(){
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.resize();
	        }
	    }
	
	    /*function start(){
	        window.requestAnimationFrame(first);
	    }*/
	
	    function activate(){
	        if(idled){
	            idled = false;
	            if(_stopped) {
	                window.requestAnimationFrame(first);
	                _stopped = false;
	            }
	        }
	    }
	
	    //start();
	
	    //setTimeout(start,0);
	
	    moduleOb.registerAnimation = registerAnimation;
	    moduleOb.loadAnimation = loadAnimation;
	    moduleOb.setSpeed = setSpeed;
	    moduleOb.setDirection = setDirection;
	    moduleOb.play = play;
	    moduleOb.pause = pause;
	    moduleOb.stop = stop;
	    moduleOb.togglePause = togglePause;
	    moduleOb.searchAnimations = searchAnimations;
	    moduleOb.resize = resize;
	    //moduleOb.start = start;
	    moduleOb.goToAndStop = goToAndStop;
	    moduleOb.destroy = destroy;
	    return moduleOb;
	}());
	
	var AnimationItem = function () {
	    this._cbs = [];
	    this.name = '';
	    this.path = '';
	    this.isLoaded = false;
	    this.currentFrame = 0;
	    this.currentRawFrame = 0;
	    this.totalFrames = 0;
	    this.frameRate = 0;
	    this.frameMult = 0;
	    this.playSpeed = 1;
	    this.playDirection = 1;
	    this.pendingElements = 0;
	    this.playCount = 0;
	    this.animationData = {};
	    this.layers = [];
	    this.assets = [];
	    this.isPaused = true;
	    this.autoplay = false;
	    this.loop = true;
	    this.renderer = null;
	    this.animationID = randomString(10);
	    this.assetsPath = '';
	    this.timeCompleted = 0;
	    this.segmentPos = 0;
	    this.subframeEnabled = subframeEnabled;
	    this.segments = [];
	    this._idle = true;
	    this.projectInterface = ProjectInterface();
	};
	
	extendPrototype([BaseEvent], AnimationItem);
	
	AnimationItem.prototype.setParams = function(params) {
	    var self = this;
	    if(params.context){
	        this.context = params.context;
	    }
	    if(params.wrapper || params.container){
	        this.wrapper = params.wrapper || params.container;
	    }
	    var animType = params.animType ? params.animType : params.renderer ? params.renderer : 'svg';
	    switch(animType){
	        case 'canvas':
	            this.renderer = new CanvasRenderer(this, params.rendererSettings);
	            break;
	        case 'svg':
	            this.renderer = new SVGRenderer(this, params.rendererSettings);
	            break;
	        default:
	            this.renderer = new HybridRenderer(this, params.rendererSettings);
	            break;
	    }
	    this.renderer.setProjectInterface(this.projectInterface);
	    this.animType = animType;
	
	    if(params.loop === '' || params.loop === null){
	    }else if(params.loop === false){
	        this.loop = false;
	    }else if(params.loop === true){
	        this.loop = true;
	    }else{
	        this.loop = parseInt(params.loop);
	    }
	    this.autoplay = 'autoplay' in params ? params.autoplay : true;
	    this.name = params.name ? params.name :  '';
	    this.autoloadSegments = params.hasOwnProperty('autoloadSegments') ? params.autoloadSegments :  true;
	    this.assetsPath = params.assetsPath;
	    if(params.animationData){
	        self.configAnimation(params.animationData);
	    }else if(params.path){
	        if(params.path.substr(-4) != 'json'){
	            if (params.path.substr(-1, 1) != '/') {
	                params.path += '/';
	            }
	            params.path += 'data.json';
	        }
	
	        var xhr = new XMLHttpRequest();
	        if(params.path.lastIndexOf('\\') != -1){
	            this.path = params.path.substr(0,params.path.lastIndexOf('\\')+1);
	        }else{
	            this.path = params.path.substr(0,params.path.lastIndexOf('/')+1);
	        }
	        this.fileName = params.path.substr(params.path.lastIndexOf('/')+1);
	        this.fileName = this.fileName.substr(0,this.fileName.lastIndexOf('.json'));
	        xhr.open('GET', params.path, true);
	        xhr.send();
	        xhr.onreadystatechange = function () {
	            if (xhr.readyState == 4) {
	                if(xhr.status == 200){
	                    self.configAnimation(JSON.parse(xhr.responseText));
	                }else{
	                    try{
	                        var response = JSON.parse(xhr.responseText);
	                        self.configAnimation(response);
	                    }catch(err){
	                    }
	                }
	            }
	        };
	    }
	};
	
	AnimationItem.prototype.setData = function (wrapper, animationData) {
	    var params = {
	        wrapper: wrapper,
	        animationData: animationData ? (typeof animationData  === "object") ? animationData : JSON.parse(animationData) : null
	    };
	    var wrapperAttributes = wrapper.attributes;
	
	    params.path = wrapperAttributes.getNamedItem('data-animation-path') ? wrapperAttributes.getNamedItem('data-animation-path').value : wrapperAttributes.getNamedItem('data-bm-path') ? wrapperAttributes.getNamedItem('data-bm-path').value :  wrapperAttributes.getNamedItem('bm-path') ? wrapperAttributes.getNamedItem('bm-path').value : '';
	    params.animType = wrapperAttributes.getNamedItem('data-anim-type') ? wrapperAttributes.getNamedItem('data-anim-type').value : wrapperAttributes.getNamedItem('data-bm-type') ? wrapperAttributes.getNamedItem('data-bm-type').value : wrapperAttributes.getNamedItem('bm-type') ? wrapperAttributes.getNamedItem('bm-type').value :  wrapperAttributes.getNamedItem('data-bm-renderer') ? wrapperAttributes.getNamedItem('data-bm-renderer').value : wrapperAttributes.getNamedItem('bm-renderer') ? wrapperAttributes.getNamedItem('bm-renderer').value : 'canvas';
	
	    var loop = wrapperAttributes.getNamedItem('data-anim-loop') ? wrapperAttributes.getNamedItem('data-anim-loop').value :  wrapperAttributes.getNamedItem('data-bm-loop') ? wrapperAttributes.getNamedItem('data-bm-loop').value :  wrapperAttributes.getNamedItem('bm-loop') ? wrapperAttributes.getNamedItem('bm-loop').value : '';
	    if(loop === ''){
	    }else if(loop === 'false'){
	        params.loop = false;
	    }else if(loop === 'true'){
	        params.loop = true;
	    }else{
	        params.loop = parseInt(loop);
	    }
	    var autoplay = wrapperAttributes.getNamedItem('data-anim-autoplay') ? wrapperAttributes.getNamedItem('data-anim-autoplay').value :  wrapperAttributes.getNamedItem('data-bm-autoplay') ? wrapperAttributes.getNamedItem('data-bm-autoplay').value :  wrapperAttributes.getNamedItem('bm-autoplay') ? wrapperAttributes.getNamedItem('bm-autoplay').value : true;
	    params.autoplay = autoplay !== "false";
	
	    params.name = wrapperAttributes.getNamedItem('data-name') ? wrapperAttributes.getNamedItem('data-name').value :  wrapperAttributes.getNamedItem('data-bm-name') ? wrapperAttributes.getNamedItem('data-bm-name').value : wrapperAttributes.getNamedItem('bm-name') ? wrapperAttributes.getNamedItem('bm-name').value :  '';
	    var prerender = wrapperAttributes.getNamedItem('data-anim-prerender') ? wrapperAttributes.getNamedItem('data-anim-prerender').value :  wrapperAttributes.getNamedItem('data-bm-prerender') ? wrapperAttributes.getNamedItem('data-bm-prerender').value :  wrapperAttributes.getNamedItem('bm-prerender') ? wrapperAttributes.getNamedItem('bm-prerender').value : '';
	
	    if(prerender === 'false'){
	        params.prerender = false;
	    }
	    this.setParams(params);
	};
	
	AnimationItem.prototype.includeLayers = function(data) {
	    if(data.op > this.animationData.op){
	        this.animationData.op = data.op;
	        this.totalFrames = Math.floor(data.op - this.animationData.ip);
	        this.animationData.tf = this.totalFrames;
	    }
	    var layers = this.animationData.layers;
	    var i, len = layers.length;
	    var newLayers = data.layers;
	    var j, jLen = newLayers.length;
	    for(j=0;j<jLen;j+=1){
	        i = 0;
	        while(i<len){
	            if(layers[i].id == newLayers[j].id){
	                layers[i] = newLayers[j];
	                break;
	            }
	            i += 1;
	        }
	    }
	    if(data.chars || data.fonts){
	        this.renderer.globalData.fontManager.addChars(data.chars);
	        this.renderer.globalData.fontManager.addFonts(data.fonts, this.renderer.globalData.defs);
	    }
	    if(data.assets){
	        len = data.assets.length;
	        for(i = 0; i < len; i += 1){
	            this.animationData.assets.push(data.assets[i]);
	        }
	    }
	    //this.totalFrames = 50;
	    //this.animationData.tf = 50;
	    this.animationData.__complete = false;
	    dataManager.completeData(this.animationData,this.renderer.globalData.fontManager);
	    this.renderer.includeLayers(data.layers);
	    if(expressionsPlugin){
	        expressionsPlugin.initExpressions(this);
	    }
	    this.renderer.renderFrame(-1);
	    this.loadNextSegment();
	};
	
	AnimationItem.prototype.loadNextSegment = function() {
	    var segments = this.animationData.segments;
	    if(!segments || segments.length === 0 || !this.autoloadSegments){
	        this.trigger('data_ready');
	        this.timeCompleted = this.animationData.tf;
	        return;
	    }
	    var segment = segments.shift();
	    this.timeCompleted = segment.time * this.frameRate;
	    var xhr = new XMLHttpRequest();
	    var self = this;
	    var segmentPath = this.path+this.fileName+'_' + this.segmentPos + '.json';
	    this.segmentPos += 1;
	    xhr.open('GET', segmentPath, true);
	    xhr.send();
	    xhr.onreadystatechange = function () {
	        if (xhr.readyState == 4) {
	            if(xhr.status == 200){
	                self.includeLayers(JSON.parse(xhr.responseText));
	            }else{
	                try{
	                    var response = JSON.parse(xhr.responseText);
	                    self.includeLayers(response);
	                }catch(err){
	                }
	            }
	        }
	    };
	};
	
	AnimationItem.prototype.loadSegments = function() {
	    var segments = this.animationData.segments;
	    if(!segments) {
	        this.timeCompleted = this.animationData.tf;
	    }
	    this.loadNextSegment();
	};
	
	AnimationItem.prototype.configAnimation = function (animData) {
	    var _this = this;
	    if(this.renderer && this.renderer.destroyed){
	        return;
	    }
	    this.animationData = animData;
	    this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
	    this.animationData.tf = this.totalFrames;
	    this.renderer.configAnimation(animData);
	    if(!animData.assets){
	        animData.assets = [];
	    }
	    if(animData.comps) {
	        animData.assets = animData.assets.concat(animData.comps);
	        animData.comps = null;
	    }
	    this.renderer.searchExtraCompositions(animData.assets);
	
	    this.layers = this.animationData.layers;
	    this.assets = this.animationData.assets;
	    this.frameRate = this.animationData.fr;
	    this.firstFrame = Math.round(this.animationData.ip);
	    this.frameMult = this.animationData.fr / 1000;
	    this.trigger('config_ready');
	    this.imagePreloader = new ImagePreloader();
	    this.imagePreloader.setAssetsPath(this.assetsPath);
	    this.imagePreloader.setPath(this.path);
	    this.imagePreloader.loadAssets(animData.assets, function(err) {
	        if(!err) {
	            _this.trigger('loaded_images');
	        }
	    });
	    this.loadSegments();
	    this.updaFrameModifier();
	    if(this.renderer.globalData.fontManager){
	        this.waitForFontsLoaded();
	    }else{
	        dataManager.completeData(this.animationData,this.renderer.globalData.fontManager);
	        this.checkLoaded();
	    }
	};
	
	AnimationItem.prototype.waitForFontsLoaded = (function(){
	    function checkFontsLoaded(){
	        if(this.renderer.globalData.fontManager.loaded){
	            dataManager.completeData(this.animationData,this.renderer.globalData.fontManager);
	            //this.renderer.buildItems(this.animationData.layers);
	            this.checkLoaded();
	        }else{
	            setTimeout(checkFontsLoaded.bind(this),20);
	        }
	    }
	
	    return function(){
	        checkFontsLoaded.bind(this)();
	    };
	}());
	
	AnimationItem.prototype.addPendingElement = function () {
	    this.pendingElements += 1;
	};
	
	AnimationItem.prototype.elementLoaded = function () {
	    this.pendingElements--;
	    this.checkLoaded();
	};
	
	AnimationItem.prototype.checkLoaded = function () {
	    if (this.pendingElements === 0) {
	        if(expressionsPlugin){
	            expressionsPlugin.initExpressions(this);
	        }
	        this.renderer.initItems();
	        setTimeout(function(){
	            this.trigger('DOMLoaded');
	        }.bind(this),0);
	        this.isLoaded = true;
	        this.gotoFrame();
	        if(this.autoplay){
	            this.play();
	        }
	    }
	};
	
	AnimationItem.prototype.resize = function () {
	    this.renderer.updateContainerSize();
	};
	
	AnimationItem.prototype.setSubframe = function(flag){
	    this.subframeEnabled = flag ? true : false;
	};
	
	AnimationItem.prototype.gotoFrame = function () {
	    this.currentFrame = this.subframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;
	
	    if(this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted){
	        this.currentFrame = this.timeCompleted;
	    }
	    this.trigger('enterFrame');
	    this.renderFrame();
	};
	
	AnimationItem.prototype.renderFrame = function () {
	    if(this.isLoaded === false){
	        return;
	    }
	    this.renderer.renderFrame(this.currentFrame + this.firstFrame);
	};
	
	AnimationItem.prototype.play = function (name) {
	    if(name && this.name != name){
	        return;
	    }
	    if(this.isPaused === true){
	        this.isPaused = false;
	        if(this._idle){
	            this._idle = false;
	            this.trigger('_active');
	        }
	    }
	};
	
	AnimationItem.prototype.pause = function (name) {
	    if(name && this.name != name){
	        return;
	    }
	    if(this.isPaused === false){
	        this.isPaused = true;
	        this._idle = true;
	        this.trigger('_idle');
	    }
	};
	
	AnimationItem.prototype.togglePause = function (name) {
	    if(name && this.name != name){
	        return;
	    }
	    if(this.isPaused === true){
	        this.play();
	    }else{
	        this.pause();
	    }
	};
	
	AnimationItem.prototype.stop = function (name) {
	    if(name && this.name != name){
	        return;
	    }
	    this.pause();
	    this.playCount = 0;
	    this.setCurrentRawFrameValue(0);
	};
	
	AnimationItem.prototype.goToAndStop = function (value, isFrame, name) {
	    if(name && this.name != name){
	        return;
	    }
	    if(isFrame){
	        this.setCurrentRawFrameValue(value);
	    }else{
	        this.setCurrentRawFrameValue(value * this.frameModifier);
	    }
	    this.pause();
	};
	
	AnimationItem.prototype.goToAndPlay = function (value, isFrame, name) {
	    this.goToAndStop(value, isFrame, name);
	    this.play();
	};
	
	AnimationItem.prototype.advanceTime = function (value) {
	    if (this.isPaused === true || this.isLoaded === false) {
	        return;
	    }
	    var nextValue = this.currentRawFrame + value * this.frameModifier;
	    var _isComplete = false;
	    // Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
	    // If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.
	    if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
	        if (!this.loop || this.playCount === this.loop) {
	            if (!this.checkSegments(nextValue % this.totalFrames)) {
	                _isComplete = true;
	                nextValue = this.totalFrames - 1;
	            }
	        } else if (nextValue >= this.totalFrames) {
	            this.playCount += 1;
	            if (!this.checkSegments(nextValue % this.totalFrames)) {
	                this.setCurrentRawFrameValue(nextValue % this.totalFrames);
	                this.trigger('loopComplete');
	            }
	        } else {
	            this.setCurrentRawFrameValue(nextValue);
	        }
	    } else if(nextValue < 0) {
	        if (!this.checkSegments(nextValue % this.totalFrames)) {
	            if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
	                this.setCurrentRawFrameValue(this.totalFrames + (nextValue % this.totalFrames));
	                this.trigger('loopComplete');
	            } else {
	                _isComplete = true;
	                nextValue = 0;
	            }
	        }
	    } else {
	        this.setCurrentRawFrameValue(nextValue);
	    }
	    if (_isComplete) {
	        this.setCurrentRawFrameValue(nextValue);
	        this.pause();
	        this.trigger('complete');
	    }
	};
	
	AnimationItem.prototype.adjustSegment = function(arr, offset){
	    this.playCount = 0;
	    if(arr[1] < arr[0]){
	        if(this.frameModifier > 0){
	            if(this.playSpeed < 0){
	                this.setSpeed(-this.playSpeed);
	            } else {
	                this.setDirection(-1);
	            }
	        }
	        this.timeCompleted = this.totalFrames = arr[0] - arr[1];
	        this.firstFrame = arr[1];
	        this.setCurrentRawFrameValue(this.totalFrames - 0.001 - offset);
	    } else if(arr[1] > arr[0]){
	        if(this.frameModifier < 0){
	            if(this.playSpeed < 0){
	                this.setSpeed(-this.playSpeed);
	            } else {
	                this.setDirection(1);
	            }
	        }
	        this.timeCompleted = this.totalFrames = arr[1] - arr[0];
	        this.firstFrame = arr[0];
	        this.setCurrentRawFrameValue(0.001 + offset);
	    }
	    this.trigger('segmentStart');
	};
	AnimationItem.prototype.setSegment = function (init,end) {
	    var pendingFrame = -1;
	    if(this.isPaused) {
	        if (this.currentRawFrame + this.firstFrame < init) {
	            pendingFrame = init;
	        } else if (this.currentRawFrame + this.firstFrame > end) {
	            pendingFrame = end - init;
	        }
	    }
	
	    this.firstFrame = init;
	    this.timeCompleted = this.totalFrames = end - init;
	    if(pendingFrame !== -1) {
	        this.goToAndStop(pendingFrame,true);
	    }
	};
	
	AnimationItem.prototype.playSegments = function (arr,forceFlag) {
	    if(typeof arr[0] === 'object'){
	        var i, len = arr.length;
	        for(i=0;i<len;i+=1){
	            this.segments.push(arr[i]);
	        }
	    }else{
	        this.segments.push(arr);
	    }
	    if(forceFlag){
	        this.checkSegments(0);
	    }
	    if(this.isPaused){
	        this.play();
	    }
	};
	
	AnimationItem.prototype.resetSegments = function (forceFlag) {
	    this.segments.length = 0;
	    this.segments.push([this.animationData.ip,this.animationData.op]);
	    //this.segments.push([this.animationData.ip*this.frameRate,Math.floor(this.animationData.op - this.animationData.ip+this.animationData.ip*this.frameRate)]);
	    if(forceFlag){
	        this.checkSegments(0);
	    }
	};
	AnimationItem.prototype.checkSegments = function(offset){
	    if(this.segments.length) {
	        this.adjustSegment(this.segments.shift(), offset);
	        return true;
	    }
	    return false;
	};
	
	AnimationItem.prototype.remove = function (name) {
	    if(name && this.name != name){
	        return;
	    }
	    this.renderer.destroy();
	};
	
	AnimationItem.prototype.destroy = function (name) {
	    if((name && this.name != name) || (this.renderer && this.renderer.destroyed)){
	        return;
	    }
	    this.renderer.destroy();
	    this.trigger('destroy');
	    this._cbs = null;
	    this.onEnterFrame = this.onLoopComplete = this.onComplete = this.onSegmentStart = this.onDestroy = null;
	    this.renderer = null;
	};
	
	AnimationItem.prototype.setCurrentRawFrameValue = function(value){
	    this.currentRawFrame = value;
	    this.gotoFrame();
	};
	
	AnimationItem.prototype.setSpeed = function (val) {
	    this.playSpeed = val;
	    this.updaFrameModifier();
	};
	
	AnimationItem.prototype.setDirection = function (val) {
	    this.playDirection = val < 0 ? -1 : 1;
	    this.updaFrameModifier();
	};
	
	AnimationItem.prototype.updaFrameModifier = function () {
	    this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
	};
	
	AnimationItem.prototype.getPath = function () {
	    return this.path;
	};
	
	AnimationItem.prototype.getAssetsPath = function (assetData) {
	    var path = '';
	    if(this.assetsPath){
	        var imagePath = assetData.p;
	        if(imagePath.indexOf('images/') !== -1){
	            imagePath = imagePath.split('/')[1];
	        }
	        path = this.assetsPath + imagePath;
	    } else {
	        path = this.path;
	        path += assetData.u ? assetData.u : '';
	        path += assetData.p;
	    }
	    return path;
	};
	
	AnimationItem.prototype.getAssetData = function (id) {
	    var i = 0, len = this.assets.length;
	    while (i < len) {
	        if(id == this.assets[i].id){
	            return this.assets[i];
	        }
	        i += 1;
	    }
	};
	
	AnimationItem.prototype.hide = function () {
	    this.renderer.hide();
	};
	
	AnimationItem.prototype.show = function () {
	    this.renderer.show();
	};
	
	AnimationItem.prototype.getAssets = function () {
	    return this.assets;
	};
	
	AnimationItem.prototype.getDuration = function (isFrame) {
	    return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
	};
	
	AnimationItem.prototype.trigger = function(name){
	    if(this._cbs && this._cbs[name]){
	        switch(name){
	            case 'enterFrame':
	                this.triggerEvent(name,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameMult));
	                break;
	            case 'loopComplete':
	                this.triggerEvent(name,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));
	                break;
	            case 'complete':
	                this.triggerEvent(name,new BMCompleteEvent(name,this.frameMult));
	                break;
	            case 'segmentStart':
	                this.triggerEvent(name,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));
	                break;
	            case 'destroy':
	                this.triggerEvent(name,new BMDestroyEvent(name,this));
	                break;
	            default:
	                this.triggerEvent(name);
	        }
	    }
	    if(name === 'enterFrame' && this.onEnterFrame){
	        this.onEnterFrame.call(this,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameMult));
	    }
	    if(name === 'loopComplete' && this.onLoopComplete){
	        this.onLoopComplete.call(this,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));
	    }
	    if(name === 'complete' && this.onComplete){
	        this.onComplete.call(this,new BMCompleteEvent(name,this.frameMult));
	    }
	    if(name === 'segmentStart' && this.onSegmentStart){
	        this.onSegmentStart.call(this,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));
	    }
	    if(name === 'destroy' && this.onDestroy){
	        this.onDestroy.call(this,new BMDestroyEvent(name,this));
	    }
	};
	
	function EffectsManager(){}
	function CanvasRenderer(animationItem, config){
	    this.animationItem = animationItem;
	    this.renderConfig = {
	        clearCanvas: (config && config.clearCanvas !== undefined) ? config.clearCanvas : true,
	        context: (config && config.context) || null,
	        progressiveLoad: (config && config.progressiveLoad) || false,
	        preserveAspectRatio: (config && config.preserveAspectRatio) || 'xMidYMid meet',
	        className: (config && config.className) || ''
	    };
	    this.renderConfig.dpr = (config && config.dpr) || 1;
	    if (this.animationItem.wrapper) {
	        this.renderConfig.dpr = (config && config.dpr) || window.devicePixelRatio || 1;
	    }
	    this.renderedFrame = -1;
	    this.globalData = {
	        frameNum: -1,
	        _mdf: false,
	        renderConfig: this.renderConfig
	    };
	    var i, len = 15;
	    this.contextData = new CVContextData();
	    this.elements = [];
	    this.pendingElements = [];
	    this.transformMat = new Matrix();
	    this.completeLayers = false;
	}
	extendPrototype([BaseRenderer],CanvasRenderer);
	
	CanvasRenderer.prototype.createShape = function (data) {
	    return new CVShapeElement(data, this.globalData, this);
	};
	
	CanvasRenderer.prototype.createText = function (data) {
	    return new CVTextElement(data, this.globalData, this);
	};
	
	CanvasRenderer.prototype.createImage = function (data) {
	    return new CVImageElement(data, this.globalData, this);
	};
	
	CanvasRenderer.prototype.createComp = function (data) {
	    return new CVCompElement(data, this.globalData, this);
	};
	
	CanvasRenderer.prototype.createSolid = function (data) {
	    return new CVSolidElement(data, this.globalData, this);
	};
	
	CanvasRenderer.prototype.createNull = SVGRenderer.prototype.createNull;
	
	CanvasRenderer.prototype.ctxTransform = function(props){
	    if(props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0){
	        return;
	    }
	    if(!this.renderConfig.clearCanvas){
	        this.canvasContext.transform(props[0],props[1],props[4],props[5],props[12],props[13]);
	        return;
	    }
	    this.transformMat.cloneFromProps(props);
	    var cProps = this.contextData.cTr.props;
	    this.transformMat.transform(cProps[0],cProps[1],cProps[2],cProps[3],cProps[4],cProps[5],cProps[6],cProps[7],cProps[8],cProps[9],cProps[10],cProps[11],cProps[12],cProps[13],cProps[14],cProps[15]);
	    //this.contextData.cTr.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
	    this.contextData.cTr.cloneFromProps(this.transformMat.props);
	    var trProps = this.contextData.cTr.props;
	    this.canvasContext.setTransform(trProps[0],trProps[1],trProps[4],trProps[5],trProps[12],trProps[13]);
	};
	
	CanvasRenderer.prototype.ctxOpacity = function(op){
	    /*if(op === 1){
	        return;
	    }*/
	    if(!this.renderConfig.clearCanvas){
	        this.canvasContext.globalAlpha *= op < 0 ? 0 : op;
	        return;
	    }
	    this.contextData.cO *= op < 0 ? 0 : op;
	    this.canvasContext.globalAlpha = this.contextData.cO;
	};
	
	CanvasRenderer.prototype.reset = function(){
	    if(!this.renderConfig.clearCanvas){
	        this.canvasContext.restore();
	        return;
	    }
	    this.contextData.reset();
	};
	
	CanvasRenderer.prototype.save = function(actionFlag){
	    if(!this.renderConfig.clearCanvas){
	        this.canvasContext.save();
	        return;
	    }
	    if(actionFlag){
	        this.canvasContext.save();
	    }
	    var props = this.contextData.cTr.props;
	    if(this.contextData._length <= this.contextData.cArrPos) {
	        this.contextData.duplicate();
	    }
	    var i, arr = this.contextData.saved[this.contextData.cArrPos];
	    for (i = 0; i < 16; i += 1) {
	        arr[i] = props[i];
	    }
	    this.contextData.savedOp[this.contextData.cArrPos] = this.contextData.cO;
	    this.contextData.cArrPos += 1;
	};
	
	CanvasRenderer.prototype.restore = function(actionFlag){
	    if(!this.renderConfig.clearCanvas){
	        this.canvasContext.restore();
	        return;
	    }
	    if(actionFlag){
	        this.canvasContext.restore();
	        this.globalData.blendMode = 'source-over';
	    }
	    this.contextData.cArrPos -= 1;
	    var popped = this.contextData.saved[this.contextData.cArrPos];
	    var i,arr = this.contextData.cTr.props;
	    for(i=0;i<16;i+=1){
	        arr[i] = popped[i];
	    }
	    this.canvasContext.setTransform(popped[0],popped[1],popped[4],popped[5],popped[12],popped[13]);
	    popped = this.contextData.savedOp[this.contextData.cArrPos];
	    this.contextData.cO = popped;
	    this.canvasContext.globalAlpha = popped;
	};
	
	CanvasRenderer.prototype.configAnimation = function(animData){
	    if(this.animationItem.wrapper){
	        this.animationItem.container = createTag('canvas');
	        this.animationItem.container.style.width = '100%';
	        this.animationItem.container.style.height = '100%';
	        //this.animationItem.container.style.transform = 'translate3d(0,0,0)';
	        //this.animationItem.container.style.webkitTransform = 'translate3d(0,0,0)';
	        this.animationItem.container.style.transformOrigin = this.animationItem.container.style.mozTransformOrigin = this.animationItem.container.style.webkitTransformOrigin = this.animationItem.container.style['-webkit-transform'] = "0px 0px 0px";
	        this.animationItem.wrapper.appendChild(this.animationItem.container);
	        this.canvasContext = this.animationItem.container.getContext('2d');
	        if(this.renderConfig.className) {
	            this.animationItem.container.setAttribute('class', this.renderConfig.className);
	        }
	    }else{
	        this.canvasContext = this.renderConfig.context;
	    }
	    this.data = animData;
	    this.globalData.canvasContext = this.canvasContext;
	    this.globalData.renderer = this;
	    this.globalData.isDashed = false;
	    this.globalData.totalFrames = Math.floor(animData.tf);
	    this.globalData.compWidth = animData.w;
	    this.globalData.compHeight = animData.h;
	    this.globalData.frameRate = animData.fr;
	    this.globalData.frameId = 0;
	    this.globalData.compSize = {
	        w: animData.w,
	        h: animData.h
	    };
	    this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
	    this.layers = animData.layers;
	    this.transformCanvas = {
	        w: animData.w,
	        h:animData.h,
	        sx:0,
	        sy:0,
	        tx:0,
	        ty:0
	    };
	    this.globalData.fontManager = new FontManager();
	    this.globalData.fontManager.addChars(animData.chars);
	    this.globalData.fontManager.addFonts(animData.fonts,document.body);
	    this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
	    this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
	    this.globalData.elementLoaded = this.animationItem.elementLoaded.bind(this.animationItem);
	    this.globalData.addPendingElement = this.animationItem.addPendingElement.bind(this.animationItem);
	    this.globalData.transformCanvas = this.transformCanvas;
	    this.elements = createSizedArray(animData.layers.length);
	
	    this.updateContainerSize();
	};
	
	CanvasRenderer.prototype.updateContainerSize = function () {
	    this.reset();
	    var elementWidth,elementHeight;
	    if(this.animationItem.wrapper && this.animationItem.container){
	        elementWidth = this.animationItem.wrapper.offsetWidth;
	        elementHeight = this.animationItem.wrapper.offsetHeight;
	        this.animationItem.container.setAttribute('width',elementWidth * this.renderConfig.dpr );
	        this.animationItem.container.setAttribute('height',elementHeight * this.renderConfig.dpr);
	    }else{
	        elementWidth = this.canvasContext.canvas.width * this.renderConfig.dpr;
	        elementHeight = this.canvasContext.canvas.height * this.renderConfig.dpr;
	    }
	    var elementRel,animationRel;
	    if(this.renderConfig.preserveAspectRatio.indexOf('meet') !== -1 || this.renderConfig.preserveAspectRatio.indexOf('slice') !== -1){
	        var par = this.renderConfig.preserveAspectRatio.split(' ');
	        var fillType = par[1] || 'meet';
	        var pos = par[0] || 'xMidYMid';
	        var xPos = pos.substr(0,4);
	        var yPos = pos.substr(4);
	        elementRel = elementWidth/elementHeight;
	        animationRel = this.transformCanvas.w/this.transformCanvas.h;
	        if(animationRel>elementRel && fillType === 'meet' || animationRel<elementRel && fillType === 'slice'){
	            this.transformCanvas.sx = elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);
	            this.transformCanvas.sy = elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);
	        }else{
	            this.transformCanvas.sx = elementHeight/(this.transformCanvas.h / this.renderConfig.dpr);
	            this.transformCanvas.sy = elementHeight/(this.transformCanvas.h / this.renderConfig.dpr);
	        }
	
	        if(xPos === 'xMid' && ((animationRel<elementRel && fillType==='meet') || (animationRel>elementRel && fillType === 'slice'))){
	            this.transformCanvas.tx = (elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))/2*this.renderConfig.dpr;
	        } else if(xPos === 'xMax' && ((animationRel<elementRel && fillType==='meet') || (animationRel>elementRel && fillType === 'slice'))){
	            this.transformCanvas.tx = (elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))*this.renderConfig.dpr;
	        } else {
	            this.transformCanvas.tx = 0;
	        }
	        if(yPos === 'YMid' && ((animationRel>elementRel && fillType==='meet') || (animationRel<elementRel && fillType === 'slice'))){
	            this.transformCanvas.ty = ((elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w))/2)*this.renderConfig.dpr;
	        } else if(yPos === 'YMax' && ((animationRel>elementRel && fillType==='meet') || (animationRel<elementRel && fillType === 'slice'))){
	            this.transformCanvas.ty = ((elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w)))*this.renderConfig.dpr;
	        } else {
	            this.transformCanvas.ty = 0;
	        }
	
	    }else if(this.renderConfig.preserveAspectRatio == 'none'){
	        this.transformCanvas.sx = elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);
	        this.transformCanvas.sy = elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);
	        this.transformCanvas.tx = 0;
	        this.transformCanvas.ty = 0;
	    }else{
	        this.transformCanvas.sx = this.renderConfig.dpr;
	        this.transformCanvas.sy = this.renderConfig.dpr;
	        this.transformCanvas.tx = 0;
	        this.transformCanvas.ty = 0;
	    }
	    this.transformCanvas.props = [this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1];
	    /*var i, len = this.elements.length;
	    for(i=0;i<len;i+=1){
	        if(this.elements[i] && this.elements[i].data.ty === 0){
	            this.elements[i].resize(this.globalData.transformCanvas);
	        }
	    }*/
	    this.ctxTransform(this.transformCanvas.props);
	    this.canvasContext.beginPath();
	    this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h);
	    this.canvasContext.closePath();
	    this.canvasContext.clip();
	};
	
	CanvasRenderer.prototype.destroy = function () {
	    if(this.renderConfig.clearCanvas) {
	        this.animationItem.wrapper.innerHTML = '';
	    }
	    var i, len = this.layers ? this.layers.length : 0;
	    for (i = len - 1; i >= 0; i-=1) {
	        if(this.elements[i]) {
	            this.elements[i].destroy();
	        }
	    }
	    this.elements.length = 0;
	    this.globalData.canvasContext = null;
	    this.animationItem.container = null;
	    this.destroyed = true;
	};
	
	CanvasRenderer.prototype.renderFrame = function(num){
	    if((this.renderedFrame == num && this.renderConfig.clearCanvas === true) || this.destroyed || num === -1){
	        return;
	    }
	    this.renderedFrame = num;
	    this.globalData.frameNum = num - this.animationItem._isFirstFrame;
	    this.globalData.frameId += 1;
	    this.globalData._mdf = false;
	    this.globalData.projectInterface.currentFrame = num;
	
	     // console.log('--------');
	     // console.log('NEW: ',num);
	    var i, len = this.layers.length;
	    if(!this.completeLayers){
	        this.checkLayers(num);
	    }
	
	    for (i = 0; i < len; i++) {
	        if(this.completeLayers || this.elements[i]){
	            this.elements[i].prepareFrame(num - this.layers[i].st);
	        }
	    }
	    if(this.globalData._mdf) {
	        if(this.renderConfig.clearCanvas === true){
	            this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
	        }else{
	            this.save();
	        }
	        for (i = len - 1; i >= 0; i-=1) {
	            if(this.completeLayers || this.elements[i]){
	                this.elements[i].renderFrame();
	            }
	        }
	        if(this.renderConfig.clearCanvas !== true){
	            this.restore();
	        }
	    }
	};
	
	CanvasRenderer.prototype.buildItem = function(pos){
	    var elements = this.elements;
	    if(elements[pos] || this.layers[pos].ty == 99){
	        return;
	    }
	    var element = this.createItem(this.layers[pos], this,this.globalData);
	    elements[pos] = element;
	    element.initExpressions();
	    /*if(this.layers[pos].ty === 0){
	        element.resize(this.globalData.transformCanvas);
	    }*/
	};
	
	CanvasRenderer.prototype.checkPendingElements  = function(){
	    while(this.pendingElements.length){
	        var element = this.pendingElements.pop();
	        element.checkParenting();
	    }
	};
	
	CanvasRenderer.prototype.hide = function(){
	    this.animationItem.container.style.display = 'none';
	};
	
	CanvasRenderer.prototype.show = function(){
	    this.animationItem.container.style.display = 'block';
	};
	
	function HybridRenderer(animationItem, config){
	    this.animationItem = animationItem;
	    this.layers = null;
	    this.renderedFrame = -1;
	    this.renderConfig = {
	        className: (config && config.className) || '',
	        hideOnTransparent: (config && config.hideOnTransparent === false) ? false : true
	    };
	    this.globalData = {
	        _mdf: false,
	        frameNum: -1,
	        renderConfig: this.renderConfig
	    };
	    this.pendingElements = [];
	    this.elements = [];
	    this.threeDElements = [];
	    this.destroyed = false;
	    this.camera = null;
	    this.supports3d = true;
	
	}
	
	extendPrototype([BaseRenderer],HybridRenderer);
	
	HybridRenderer.prototype.buildItem = SVGRenderer.prototype.buildItem;
	
	HybridRenderer.prototype.checkPendingElements  = function(){
	    while(this.pendingElements.length){
	        var element = this.pendingElements.pop();
	        element.checkParenting();
	    }
	};
	
	HybridRenderer.prototype.appendElementInPos = function(element, pos){
	    var newDOMElement = element.getBaseElement();
	    if(!newDOMElement){
	        return;
	    }
	    var layer = this.layers[pos];
	    if(!layer.ddd || !this.supports3d){
	        if(this.threeDElements) {
	            this.addTo3dContainer(newDOMElement,pos);
	        } else {
	            var i = 0;
	            var nextDOMElement, nextLayer, tmpDOMElement;
	            while(i<pos){
	                if(this.elements[i] && this.elements[i]!== true && this.elements[i].getBaseElement){
	                    nextLayer = this.elements[i];
	                    tmpDOMElement = this.layers[i].ddd ? this.getThreeDContainerByPos(i) : nextLayer.getBaseElement();
	                    nextDOMElement = tmpDOMElement || nextDOMElement;
	                }
	                i += 1;
	            }
	            if(nextDOMElement){
	                if(!layer.ddd || !this.supports3d){
	                    this.layerElement.insertBefore(newDOMElement, nextDOMElement);
	                }
	            } else {
	                if(!layer.ddd || !this.supports3d){
	                    this.layerElement.appendChild(newDOMElement);
	                }
	            }
	        }
	        
	    } else {
	        this.addTo3dContainer(newDOMElement,pos);
	    }
	};
	
	HybridRenderer.prototype.createShape = function (data) {
	    if(!this.supports3d){
	        return new SVGShapeElement(data, this.globalData, this);
	    }
	    return new HShapeElement(data, this.globalData, this);
	};
	
	HybridRenderer.prototype.createText = function (data) {
	    if(!this.supports3d){
	        return new SVGTextElement(data, this.globalData, this);
	    }
	    return new HTextElement(data, this.globalData, this);
	};
	
	HybridRenderer.prototype.createCamera = function (data) {
	    this.camera = new HCameraElement(data, this.globalData, this);
	    return this.camera;
	};
	
	HybridRenderer.prototype.createImage = function (data) {
	    if(!this.supports3d){
	        return new IImageElement(data, this.globalData, this);
	    }
	    return new HImageElement(data, this.globalData, this);
	};
	
	HybridRenderer.prototype.createComp = function (data) {
	    if(!this.supports3d){
	        return new SVGCompElement(data, this.globalData, this);
	    }
	    return new HCompElement(data, this.globalData, this);
	
	};
	
	HybridRenderer.prototype.createSolid = function (data) {
	    if(!this.supports3d){
	        return new ISolidElement(data, this.globalData, this);
	    }
	    return new HSolidElement(data, this.globalData, this);
	};
	
	HybridRenderer.prototype.createNull = SVGRenderer.prototype.createNull;
	
	HybridRenderer.prototype.getThreeDContainerByPos = function(pos){
	    var i = 0, len = this.threeDElements.length;
	    while(i<len) {
	        if(this.threeDElements[i].startPos <= pos && this.threeDElements[i].endPos >= pos) {
	            return this.threeDElements[i].perspectiveElem;
	        }
	        i += 1;
	    }
	};
	
	HybridRenderer.prototype.createThreeDContainer = function(pos, type){
	    var perspectiveElem = createTag('div');
	    styleDiv(perspectiveElem);
	    var container = createTag('div');
	    styleDiv(container);
	    if(type === '3d') {
	        perspectiveElem.style.width = this.globalData.compSize.w+'px';
	        perspectiveElem.style.height = this.globalData.compSize.h+'px';
	        perspectiveElem.style.transformOrigin = perspectiveElem.style.mozTransformOrigin = perspectiveElem.style.webkitTransformOrigin = "50% 50%";
	        container.style.transform = container.style.webkitTransform = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
	    }
	    
	    perspectiveElem.appendChild(container);
	    //this.resizerElem.appendChild(perspectiveElem);
	    var threeDContainerData = {
	        container:container,
	        perspectiveElem:perspectiveElem,
	        startPos: pos,
	        endPos: pos,
	        type: type
	    };
	    this.threeDElements.push(threeDContainerData);
	    return threeDContainerData;
	};
	
	HybridRenderer.prototype.build3dContainers = function(){
	    var i, len = this.layers.length;
	    var lastThreeDContainerData;
	    var currentContainer = '';
	    for(i=0;i<len;i+=1){
	        if(this.layers[i].ddd && this.layers[i].ty !== 3){
	            if(currentContainer !== '3d'){
	                currentContainer = '3d';
	                lastThreeDContainerData = this.createThreeDContainer(i,'3d');
	            }
	            lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos,i);
	        } else {
	            if(currentContainer !== '2d'){
	                currentContainer = '2d';
	                lastThreeDContainerData = this.createThreeDContainer(i,'2d');
	            }
	            lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos,i);
	        }
	    }
	    len = this.threeDElements.length;
	    for(i = len - 1; i >= 0; i --) {
	        this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);
	    }
	};
	
	HybridRenderer.prototype.addTo3dContainer = function(elem,pos){
	    var i = 0, len = this.threeDElements.length;
	    while(i<len){
	        if(pos <= this.threeDElements[i].endPos){
	            var j = this.threeDElements[i].startPos;
	            var nextElement;
	            while(j<pos){
	                if(this.elements[j] && this.elements[j].getBaseElement){
	                    nextElement = this.elements[j].getBaseElement();
	                }
	                j += 1;
	            }
	            if(nextElement){
	                this.threeDElements[i].container.insertBefore(elem, nextElement);
	            } else {
	                this.threeDElements[i].container.appendChild(elem);
	            }
	            break;
	        }
	        i += 1;
	    }
	};
	
	HybridRenderer.prototype.configAnimation = function(animData){
	    var resizerElem = createTag('div');
	    var wrapper = this.animationItem.wrapper;
	    resizerElem.style.width = animData.w+'px';
	    resizerElem.style.height = animData.h+'px';
	    this.resizerElem = resizerElem;
	    styleDiv(resizerElem);
	    resizerElem.style.transformStyle = resizerElem.style.webkitTransformStyle = resizerElem.style.mozTransformStyle = "flat";
	    if(this.renderConfig.className) {
	      resizerElem.setAttribute('class', this.renderConfig.className);
	    }
	    wrapper.appendChild(resizerElem);
	
	    resizerElem.style.overflow = 'hidden';
	    var svg = createNS('svg');
	    svg.setAttribute('width','1');
	    svg.setAttribute('height','1');
	    styleDiv(svg);
	    this.resizerElem.appendChild(svg);
	    var defs = createNS('defs');
	    svg.appendChild(defs);
	    this.globalData.defs = defs;
	    this.data = animData;
	    //Mask animation
	    this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
	    this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
	    this.globalData.elementLoaded = this.animationItem.elementLoaded.bind(this.animationItem);
	    this.globalData.frameId = 0;
	    this.globalData.compSize = {
	        w: animData.w,
	        h: animData.h
	    };
	    this.globalData.frameRate = animData.fr;
	    this.layers = animData.layers;
	    this.globalData.fontManager = new FontManager();
	    this.globalData.fontManager.addChars(animData.chars);
	    this.globalData.fontManager.addFonts(animData.fonts,svg);
	    this.layerElement = this.resizerElem;
	    this.build3dContainers();
	    this.updateContainerSize();
	};
	
	HybridRenderer.prototype.destroy = function () {
	    this.animationItem.wrapper.innerHTML = '';
	    this.animationItem.container = null;
	    this.globalData.defs = null;
	    var i, len = this.layers ? this.layers.length : 0;
	    for (i = 0; i < len; i++) {
	        this.elements[i].destroy();
	    }
	    this.elements.length = 0;
	    this.destroyed = true;
	    this.animationItem = null;
	};
	
	HybridRenderer.prototype.updateContainerSize = function () {
	    var elementWidth = this.animationItem.wrapper.offsetWidth;
	    var elementHeight = this.animationItem.wrapper.offsetHeight;
	    var elementRel = elementWidth/elementHeight;
	    var animationRel = this.globalData.compSize.w/this.globalData.compSize.h;
	    var sx,sy,tx,ty;
	    if(animationRel>elementRel){
	        sx = elementWidth/(this.globalData.compSize.w);
	        sy = elementWidth/(this.globalData.compSize.w);
	        tx = 0;
	        ty = ((elementHeight-this.globalData.compSize.h*(elementWidth/this.globalData.compSize.w))/2);
	    }else{
	        sx = elementHeight/(this.globalData.compSize.h);
	        sy = elementHeight/(this.globalData.compSize.h);
	        tx = (elementWidth-this.globalData.compSize.w*(elementHeight/this.globalData.compSize.h))/2;
	        ty = 0;
	    }
	    this.resizerElem.style.transform = this.resizerElem.style.webkitTransform = 'matrix3d(' + sx + ',0,0,0,0,'+sy+',0,0,0,0,1,0,'+tx+','+ty+',0,1)';
	};
	
	HybridRenderer.prototype.renderFrame = SVGRenderer.prototype.renderFrame;
	
	HybridRenderer.prototype.hide = function(){
	    this.resizerElem.style.display = 'none';
	};
	
	HybridRenderer.prototype.show = function(){
	    this.resizerElem.style.display = 'block';
	};
	
	HybridRenderer.prototype.initItems = function(){
	    this.buildAllItems();
	    if(this.camera){
	        this.camera.setup();
	    } else {
	        var cWidth = this.globalData.compSize.w;
	        var cHeight = this.globalData.compSize.h;
	        var i, len = this.threeDElements.length;
	        for(i=0;i<len;i+=1){
	            this.threeDElements[i].perspectiveElem.style.perspective = this.threeDElements[i].perspectiveElem.style.webkitPerspective = Math.sqrt(Math.pow(cWidth,2) + Math.pow(cHeight,2)) + 'px';
	        }
	    }
	};
	
	HybridRenderer.prototype.searchExtraCompositions = function(assets){
	    var i, len = assets.length;
	    var floatingContainer = createTag('div');
	    for(i=0;i<len;i+=1){
	        if(assets[i].xt){
	            var comp = this.createComp(assets[i],floatingContainer,this.globalData.comp,null);
	            comp.initExpressions();
	            this.globalData.projectInterface.registerComposition(comp);
	        }
	    }
	};
	
	function CVContextData() {
		this.saved = [];
	    this.cArrPos = 0;
	    this.cTr = new Matrix();
	    this.cO = 1;
	    var i, len = 15;
	    this.savedOp = createTypedArray('float32', len);
	    for(i=0;i<len;i+=1){
	        this.saved[i] = createTypedArray('float32', 16);
	    }
	    this._length = len;
	}
	
	CVContextData.prototype.duplicate = function() {
		var newLength = this._length * 2;
		var currentSavedOp = this.savedOp;
	    this.savedOp = createTypedArray('float32', newLength);
	    this.savedOp.set(currentSavedOp);
	    var i = 0;
	    for(i = this._length; i < newLength; i += 1) {
	        this.saved[i] = createTypedArray('float32', 16);
	    }
	    this._length = newLength;
	};
	
	CVContextData.prototype.reset = function() {
		this.cArrPos = 0;
		this.cTr.reset();
	    this.cO = 1;
	};
	function CVBaseElement(){
	}
	
	CVBaseElement.prototype = {
	    createElements: function(){},
	    initRendererElement: function(){},
	    createContainerElements: function(){
	        this.canvasContext = this.globalData.canvasContext;
	        this.renderableEffectsManager = new CVEffects(this);
	    },
	    createContent: function(){},
	    setBlendMode: function(){
	        var globalData = this.globalData;
	        if(globalData.blendMode !== this.data.bm) {
	            globalData.blendMode = this.data.bm;
	            var blendModeValue = this.getBlendMode();
	            globalData.canvasContext.globalCompositeOperation = blendModeValue;
	        }
	    },
	    addMasks: function(){
	        this.maskManager = new CVMaskElement(this.data, this);
	    },
	    hideElement: function(){
	        if (!this.hidden && (!this.isInRange || this.isTransparent)) {
	            this.hidden = true;
	        }
	    },
	    showElement: function(){
	        if (this.isInRange && !this.isTransparent){
	            this.hidden = false;
	            this._isFirstFrame = true;
	            this.maskManager._isFirstFrame = true;
	        }
	    },
	    renderFrame: function() {
	        if (this.hidden) {
	            return;
	        }
	        this.renderTransform();
	        this.renderRenderable();
	        this.setBlendMode();
	        this.globalData.renderer.save();
	        this.globalData.renderer.ctxTransform(this.finalTransform.mat.props);
	        this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v);
	        this.renderInnerContent();
	        this.globalData.renderer.restore();
	        if(this.maskManager.hasMasks) {
	            this.globalData.renderer.restore(true);
	        }
	        if (this._isFirstFrame) {
	            this._isFirstFrame = false;
	        }
	    },
	    destroy: function(){
	        this.canvasContext = null;
	        this.data = null;
	        this.globalData = null;
	        this.maskManager.destroy();
	    },
	    mHelper: new Matrix()
	};
	CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
	CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;
	
	function CVImageElement(data, globalData, comp){
	    this.failed = false;
	    this.img = new Image();
	    this.assetData = globalData.getAssetData(data.refId);
	    this.initElement(data,globalData,comp);
	    this.globalData.addPendingElement();
	}
	extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);
	
	CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
	CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
	
	CVImageElement.prototype.imageLoaded = function() {
	    this.globalData.elementLoaded();
	    if(this.assetData.w !== this.img.width || this.assetData.h !== this.img.height){
	        var canvas = createTag('canvas');
	        canvas.width = this.assetData.w;
	        canvas.height = this.assetData.h;
	        var ctx = canvas.getContext('2d');
	
	        var imgW = this.img.width;
	        var imgH = this.img.height;
	        var imgRel = imgW / imgH;
	        var canvasRel = this.assetData.w/this.assetData.h;
	        var widthCrop, heightCrop;
	        if(imgRel>canvasRel){
	            heightCrop = imgH;
	            widthCrop = heightCrop*canvasRel;
	        } else {
	            widthCrop = imgW;
	            heightCrop = widthCrop/canvasRel;
	        }
	        ctx.drawImage(this.img,(imgW-widthCrop)/2,(imgH-heightCrop)/2,widthCrop,heightCrop,0,0,this.assetData.w,this.assetData.h);
	        this.img = canvas;
	    }
	};
	
	CVImageElement.prototype.imageFailed = function() {
	    this.failed = true;
	    this.globalData.elementLoaded();
	};
	
	CVImageElement.prototype.createContent = function(){
	    var img = this.img;
	    img.addEventListener('load', this.imageLoaded.bind(this), false);
	    img.addEventListener('error', this.imageFailed.bind(this), false);
	    var assetPath = this.globalData.getAssetsPath(this.assetData);
	    img.src = assetPath;
	
	};
	
	CVImageElement.prototype.renderInnerContent = function(parentMatrix){
	    if (this.failed) {
	        return;
	    }
	    this.canvasContext.drawImage(this.img, 0, 0);
	};
	
	CVImageElement.prototype.destroy = function(){
	    this.img = null;
	};
	function CVCompElement(data, globalData, comp) {
	    this.completeLayers = false;
	    this.layers = data.layers;
	    this.pendingElements = [];
	    this.elements = createSizedArray(this.layers.length);
	    this.initElement(data, globalData, comp);
	    this.tm = data.tm ? PropertyFactory.getProp(this,data.tm,0,globalData.frameRate, this) : {_placeholder:true};
	}
	
	extendPrototype([CanvasRenderer, ICompElement, CVBaseElement], CVCompElement);
	
	CVCompElement.prototype.renderInnerContent = function() {
	    var i,len = this.layers.length;
	    for( i = len - 1; i >= 0; i -= 1 ){
	        if(this.completeLayers || this.elements[i]){
	            this.elements[i].renderFrame();
	        }
	    }
	};
	
	CVCompElement.prototype.destroy = function(){
	    var i,len = this.layers.length;
	    for( i = len - 1; i >= 0; i -= 1 ){
	        if(this.elements[i]) {
	            this.elements[i].destroy();
	        }
	    }
	    this.layers = null;
	    this.elements = null;
	};
	
	function CVMaskElement(data,element){
	    this.data = data;
	    this.element = element;
	    this.masksProperties = this.data.masksProperties || [];
	    this.viewData = createSizedArray(this.masksProperties.length);
	    var i, len = this.masksProperties.length, hasMasks = false;
	    for (i = 0; i < len; i++) {
	        if(this.masksProperties[i].mode !== 'n'){
	            hasMasks = true;
	        }
	        this.viewData[i] = ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[i],3);
	    }
	    this.hasMasks = hasMasks;
	}
	
	CVMaskElement.prototype.renderFrame = function (transform) {
	    if(!this.hasMasks){
	        return;
	    }
	    var ctx = this.element.canvasContext;
	    var i, len = this.masksProperties.length;
	    var pt,pts,data;
	    ctx.beginPath();
	    for (i = 0; i < len; i++) {
	        if(this.masksProperties[i].mode !== 'n'){
	            if (this.masksProperties[i].inv) {
	                ctx.moveTo(0, 0);
	                ctx.lineTo(this.element.globalData.compWidth, 0);
	                ctx.lineTo(this.element.globalData.compWidth, this.element.globalData.compHeight);
	                ctx.lineTo(0, this.element.globalData.compHeight);
	                ctx.lineTo(0, 0);
	            }
	            data = this.viewData[i].v;
	            pt = transform.applyToPointArray(data.v[0][0],data.v[0][1],0);
	            ctx.moveTo(pt[0], pt[1]);
	            var j, jLen = data._length;
	            for (j = 1; j < jLen; j++) {
	                pts = transform.applyToTriplePoints(data.o[j - 1], data.i[j], data.v[j]);
	                ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
	            }
	            pts = transform.applyToTriplePoints(data.o[j - 1], data.i[0], data.v[0]);
	            ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
	        }
	    }
	    this.element.globalData.renderer.save(true);
	    ctx.clip();
	};
	
	CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;
	
	CVMaskElement.prototype.destroy = function(){
	    this.element = null;
	};
	function CVShapeElement(data, globalData, comp) {
	    this.shapes = [];
	    this.shapesData = data.shapes;
	    this.stylesList = [];
	    this.itemsData = [];
	    this.prevViewData = [];
	    this.shapeModifiers = [];
	    this.processedElements = [];
	    this.initElement(data, globalData, comp);
	}
	
	extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement], CVShapeElement);
	
	CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;
	
	CVShapeElement.prototype.transformHelper = {opacity:1,mat:new Matrix(),_matMdf:false,_opMdf:false};
	
	CVShapeElement.prototype.dashResetter = [];
	
	CVShapeElement.prototype.createContent = function(){
	    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData, true);
	};
	
	CVShapeElement.prototype.createStyleElement = function(data){
	    var styleElem = {
	        data: data,
	        type: data.ty,
	        elements: []
	    };
	    var elementData = {};
	    if(data.ty == 'fl' || data.ty == 'st'){
	        elementData.c = PropertyFactory.getProp(this,data.c,1,255,this);
	        if(!elementData.c.k){
	            styleElem.co = 'rgb('+bm_floor(elementData.c.v[0])+','+bm_floor(elementData.c.v[1])+','+bm_floor(elementData.c.v[2])+')';
	        }
	    }
	    elementData.o = PropertyFactory.getProp(this,data.o,0,0.01,this);
	    if(data.ty == 'st') {
	        styleElem.lc = this.lcEnum[data.lc] || 'round';
	        styleElem.lj = this.ljEnum[data.lj] || 'round';
	        if(data.lj == 1) {
	            styleElem.ml = data.ml;
	        }
	        elementData.w = PropertyFactory.getProp(this,data.w,0,null,this);
	        if(!elementData.w.k){
	            styleElem.wi = elementData.w.v;
	        }
	        if(data.d){
	            var d = new DashProperty(this,data.d,'canvas');
	            elementData.d = d;
	            if(!elementData.d.k){
	                styleElem.da = elementData.d.dashArray;
	                styleElem.do = elementData.d.dashoffset[0];
	            }
	        }
	
	    } else {
	
	        styleElem.r = data.r === 2 ? 'evenodd' : 'nonzero';
	    }
	    this.stylesList.push(styleElem);
	    elementData.style = styleElem;
	    return elementData;
	};
	
	CVShapeElement.prototype.createGroupElement = function(data) {
	    var elementData = {
	        it: [],
	        prevViewData: []
	    };
	    return elementData;
	};
	
	CVShapeElement.prototype.createTransformElement = function(data) {
	    var elementData = {
	        transform : {
	            mat: new Matrix(),
	            opacity: 1,
	            _matMdf:false,
	            _opMdf:false,
	            op: PropertyFactory.getProp(this,data.o,0,0.01,this),
	            mProps: TransformPropertyFactory.getTransformProperty(this,data,this)
	        },
	        elements: []
	    };
	    return elementData;
	};
	
	CVShapeElement.prototype.createShapeElement = function(data) {
	    var elementData = {
	        nodes:[],
	        trNodes:[],
	        tr:[0,0,0,0,0,0]
	    };
	    var ty = 4;
	    if(data.ty == 'rc'){
	        ty = 5;
	    }else if(data.ty == 'el'){
	        ty = 6;
	    }else if(data.ty == 'sr'){
	        ty = 7;
	    }
	    elementData.sh = ShapePropertyFactory.getShapeProp(this,data,ty,this);
	    this.shapes.push(elementData.sh);
	    this.addShapeToModifiers(elementData);
	    var j, jLen = this.stylesList.length;
	    var hasStrokes = false, hasFills = false;
	    for(j=0;j<jLen;j+=1){
	        if(!this.stylesList[j].closed){
	            this.stylesList[j].elements.push(elementData);
	            if(this.stylesList[j].type === 'st'){
	                hasStrokes = true;
	            }else{
	                hasFills = true;
	            }
	        }
	    }
	    elementData.st = hasStrokes;
	    elementData.fl = hasFills;
	    return elementData;
	};
	
	CVShapeElement.prototype.reloadShapes = function(){
	    this._isFirstFrame = true;
	    var i, len = this.itemsData.length;
	    for(i=0;i<len;i+=1){
	        this.prevViewData[i] = this.itemsData[i];
	    }
	    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData, true);
	    len = this.dynamicProperties.length;
	    for(i=0;i<len;i+=1){
	        this.dynamicProperties[i].getValue();
	    }
	    this.renderModifiers();
	};
	
	CVShapeElement.prototype.searchShapes = function(arr,itemsData, prevViewData, render){
	    var i, len = arr.length - 1;
	    var j, jLen;
	    var ownArrays = [], ownModifiers = [], processedPos, modifier;
	    for(i=len;i>=0;i-=1){
	        processedPos = this.searchProcessedElement(arr[i]);
	        if(!processedPos){
	            arr[i]._render = render;
	        } else {
	            itemsData[i] = prevViewData[processedPos - 1];
	        }
	        if(arr[i].ty == 'fl' || arr[i].ty == 'st'){
	            if(!processedPos){
	                itemsData[i] = this.createStyleElement(arr[i]);
	            } else {
	                itemsData[i].style.closed = false;
	            }
	            
	            ownArrays.push(itemsData[i].style);
	        }else if(arr[i].ty == 'gr'){
	            if(!processedPos){
	                itemsData[i] = this.createGroupElement(arr[i]);
	            } else {
	                jLen = itemsData[i].it.length;
	                for(j=0;j<jLen;j+=1){
	                    itemsData[i].prevViewData[j] = itemsData[i].it[j];
	                }
	            }
	            this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData, render);
	        }else if(arr[i].ty == 'tr'){
	            if(!processedPos){
	                itemsData[i] = this.createTransformElement(arr[i]);
	            }
	        }else if(arr[i].ty == 'sh' || arr[i].ty == 'rc' || arr[i].ty == 'el' || arr[i].ty == 'sr'){
	            if(!processedPos){
	                itemsData[i] = this.createShapeElement(arr[i]);
	            }
	            
	        }else if(arr[i].ty == 'tm' || arr[i].ty == 'rd'){
	            if(!processedPos){
	                modifier = ShapeModifiers.getModifier(arr[i].ty);
	                modifier.init(this,arr[i]);
	                itemsData[i] = modifier;
	                this.shapeModifiers.push(modifier);
	            } else {
	                modifier = itemsData[i];
	                modifier.closed = false;
	            }
	            ownModifiers.push(modifier);
	        } else if(arr[i].ty == 'rp'){
	            if(!processedPos){
	                modifier = ShapeModifiers.getModifier(arr[i].ty);
	                itemsData[i] = modifier;
	                modifier.init(this,arr,i,itemsData);
	                this.shapeModifiers.push(modifier);
	                render = false;
	            }else{
	                modifier = itemsData[i];
	                modifier.closed = true;
	            }
	            ownModifiers.push(modifier);
	        }
	        this.addProcessedElement(arr[i], i + 1);
	    }
	    len = ownArrays.length;
	    for(i=0;i<len;i+=1){
	        ownArrays[i].closed = true;
	    }
	    len = ownModifiers.length;
	    for(i=0;i<len;i+=1){
	        ownModifiers[i].closed = true;
	    }
	};
	
	CVShapeElement.prototype.renderInnerContent = function() {
	
	    this.transformHelper.mat.reset();
	    this.transformHelper.opacity = 1;
	    this.transformHelper._matMdf = false;
	    this.transformHelper._opMdf = false;
	    this.renderModifiers();
	    this.renderShape(this.transformHelper,this.shapesData,this.itemsData,true);
	};
	
	CVShapeElement.prototype.renderShapeTransform = function(parentTransform, groupTransform) {
	    var props, groupMatrix;
	    if(parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
	        groupTransform.opacity = parentTransform.opacity;
	        groupTransform.opacity *= groupTransform.op.v;
	        groupTransform._opMdf = true;
	    }
	    if(parentTransform._matMdf || groupTransform.mProps._mdf || this._isFirstFrame) {
	        groupMatrix = groupTransform.mat;
	        groupMatrix.cloneFromProps(groupTransform.mProps.v.props);
	        groupTransform._matMdf = true;
	        props = parentTransform.mat.props;
	        groupMatrix.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
	    }
	};
	
	CVShapeElement.prototype.drawLayer = function() {
	    var i, len = this.stylesList.length;
	    var j, jLen, k, kLen,elems,nodes, renderer = this.globalData.renderer, ctx = this.globalData.canvasContext, type, currentStyle;
	    for(i=0;i<len;i+=1){
	        currentStyle = this.stylesList[i];
	        type = currentStyle.type;
	        if((type === 'st' && currentStyle.wi === 0) || !currentStyle.data._render || currentStyle.coOp === 0){
	            continue;
	        }
	        renderer.save();
	        elems = currentStyle.elements;
	        if(type === 'st'){
	            ctx.strokeStyle = currentStyle.co;
	            ctx.lineWidth = currentStyle.wi;
	            ctx.lineCap = currentStyle.lc;
	            ctx.lineJoin = currentStyle.lj;
	            ctx.miterLimit = currentStyle.ml || 0;
	        }else{
	            ctx.fillStyle = currentStyle.co;
	        }
	        renderer.ctxOpacity(currentStyle.coOp);
	        if(type !== 'st'){
	            ctx.beginPath();
	        }
	        jLen = elems.length;
	        for(j=0;j<jLen;j+=1){
	            if(type === 'st'){
	                ctx.beginPath();
	                if(currentStyle.da){
	                    ctx.setLineDash(currentStyle.da);
	                    ctx.lineDashOffset = currentStyle.do;
	                    this.globalData.isDashed = true;
	                }else if(this.globalData.isDashed){
	                    ctx.setLineDash(this.dashResetter);
	                    this.globalData.isDashed = false;
	                }
	            }
	            nodes = elems[j].trNodes;
	            kLen = nodes.length;
	
	            for(k=0;k<kLen;k+=1){
	                if(nodes[k].t == 'm'){
	                    ctx.moveTo(nodes[k].p[0],nodes[k].p[1]);
	                }else if(nodes[k].t == 'c'){
	                    ctx.bezierCurveTo(nodes[k].pts[0],nodes[k].pts[1],nodes[k].pts[2],nodes[k].pts[3],nodes[k].pts[4],nodes[k].pts[5]);
	                }else{
	                    ctx.closePath();
	                }
	            }
	            if(type === 'st'){
	                ctx.stroke();
	            }
	        }
	        if(type !== 'st'){
	            ctx.fill(currentStyle.r);
	        }
	        renderer.restore();
	    }
	};
	
	CVShapeElement.prototype.renderShape = function(parentTransform,items,data,isMain){
	    var i, len = items.length - 1;
	    var groupTransform;
	    groupTransform = parentTransform;
	    for(i=len;i>=0;i-=1){
	        if(items[i].ty == 'tr'){
	            groupTransform = data[i].transform;
	            this.renderShapeTransform(parentTransform, groupTransform);
	        }else if(items[i].ty == 'sh' || items[i].ty == 'el' || items[i].ty == 'rc' || items[i].ty == 'sr'){
	            this.renderPath(items[i],data[i],groupTransform);
	        }else if(items[i].ty == 'fl'){
	            this.renderFill(items[i],data[i],groupTransform);
	        }else if(items[i].ty == 'st'){
	            this.renderStroke(items[i],data[i],groupTransform);
	        }else if(items[i].ty == 'gr'){
	            this.renderShape(groupTransform,items[i].it,data[i].it);
	        }else if(items[i].ty == 'tm'){
	            //
	        }
	    }
	    if(isMain){
	        this.drawLayer();
	    }
	    
	};
	CVShapeElement.prototype.renderPath = function(pathData,itemData,groupTransform){
	    var len, i, j,jLen;
	    var redraw = groupTransform._matMdf || itemData.sh._mdf || this._isFirstFrame;
	    if(redraw) {
	        var paths = itemData.sh.paths, groupTransformMat = groupTransform.mat;
	        jLen = pathData._render === false ? 0 : paths._length;
	        var pathStringTransformed = itemData.trNodes;
	        pathStringTransformed.length = 0;
	        for(j=0;j<jLen;j+=1){
	            var pathNodes = paths.shapes[j];
	            if(pathNodes && pathNodes.v){
	                len = pathNodes._length;
	                for (i = 1; i < len; i += 1) {
	                    if (i == 1) {
	                        pathStringTransformed.push({
	                            t: 'm',
	                            p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
	                        });
	                    }
	                    pathStringTransformed.push({
	                        t: 'c',
	                        pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[i], pathNodes.v[i])
	                    });
	                }
	                if (len == 1) {
	                    pathStringTransformed.push({
	                        t: 'm',
	                        p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
	                    });
	                }
	                if (pathNodes.c && len) {
	                    pathStringTransformed.push({
	                        t: 'c',
	                        pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[0], pathNodes.v[0])
	                    });
	                    pathStringTransformed.push({
	                        t: 'z'
	                    });
	                }
	                itemData.lStr = pathStringTransformed;
	            }
	
	        }
	
	        if (itemData.st) {
	            for (i = 0; i < 16; i += 1) {
	                itemData.tr[i] = groupTransform.mat.props[i];
	            }
	        }
	        itemData.trNodes = pathStringTransformed;
	
	    }
	};
	
	
	
	CVShapeElement.prototype.renderFill = function(styleData,itemData, groupTransform){
	    var styleElem = itemData.style;
	
	    if(itemData.c._mdf || this._isFirstFrame){
	        styleElem.co = 'rgb('+bm_floor(itemData.c.v[0])+','+bm_floor(itemData.c.v[1])+','+bm_floor(itemData.c.v[2])+')';
	    }
	    if(itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame){
	        styleElem.coOp = itemData.o.v*groupTransform.opacity;
	    }
	};
	
	CVShapeElement.prototype.renderStroke = function(styleData,itemData, groupTransform){
	    var styleElem = itemData.style;
	    var d = itemData.d;
	    if(d && (d._mdf  || this._isFirstFrame)){
	        styleElem.da = d.dashArray;
	        styleElem.do = d.dashoffset[0];
	    }
	    if(itemData.c._mdf || this._isFirstFrame){
	        styleElem.co = 'rgb('+bm_floor(itemData.c.v[0])+','+bm_floor(itemData.c.v[1])+','+bm_floor(itemData.c.v[2])+')';
	    }
	    if(itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame){
	        styleElem.coOp = itemData.o.v*groupTransform.opacity;
	    }
	    if(itemData.w._mdf || this._isFirstFrame){
	        styleElem.wi = itemData.w.v;
	    }
	};
	
	
	CVShapeElement.prototype.destroy = function(){
	    this.shapesData = null;
	    this.globalData = null;
	    this.canvasContext = null;
	    this.stylesList.length = 0;
	    this.itemsData.length = 0;
	};
	
	
	function CVSolidElement(data, globalData, comp) {
	    this.initElement(data,globalData,comp);
	}
	extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);
	
	CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
	CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
	
	CVSolidElement.prototype.renderInnerContent = function() {
	    var ctx = this.canvasContext;
	    ctx.fillStyle = this.data.sc;
	    ctx.fillRect(0, 0, this.data.sw, this.data.sh);
	    //
	};
	function CVTextElement(data, globalData, comp){
	    this.textSpans = [];
	    this.yOffset = 0;
	    this.fillColorAnim = false;
	    this.strokeColorAnim = false;
	    this.strokeWidthAnim = false;
	    this.stroke = false;
	    this.fill = false;
	    this.justifyOffset = 0;
	    this.currentRender = null;
	    this.renderType = 'canvas';
	    this.values = {
	        fill: 'rgba(0,0,0,0)',
	        stroke: 'rgba(0,0,0,0)',
	        sWidth: 0,
	        fValue: ''
	    };
	    this.initElement(data,globalData,comp);
	}
	extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement], CVTextElement);
	
	CVTextElement.prototype.tHelper = createTag('canvas').getContext('2d');
	
	CVTextElement.prototype.buildNewText = function(){
	    var documentData = this.textProperty.currentData;
	    this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
	
	    var hasFill = false;
	    if(documentData.fc) {
	        hasFill = true;
	        this.values.fill = this.buildColor(documentData.fc);
	    }else{
	        this.values.fill = 'rgba(0,0,0,0)';
	    }
	    this.fill = hasFill;
	    var hasStroke = false;
	    if(documentData.sc){
	        hasStroke = true;
	        this.values.stroke = this.buildColor(documentData.sc);
	        this.values.sWidth = documentData.sw;
	    }
	    var fontData = this.globalData.fontManager.getFontByName(documentData.f);
	    var i, len;
	    var letters = documentData.l;
	    var matrixHelper = this.mHelper;
	    this.stroke = hasStroke;
	    this.values.fValue = documentData.finalSize + 'px '+ this.globalData.fontManager.getFontByName(documentData.f).fFamily;
	    len = documentData.finalText.length;
	    //this.tHelper.font = this.values.fValue;
	    var charData, shapeData, k, kLen, shapes, j, jLen, pathNodes, commands, pathArr, singleShape = this.data.singleShape;
	    var trackingOffset = documentData.tr/1000*documentData.finalSize;
	    var xPos = 0, yPos = 0, firstLine = true;
	    var cnt = 0;
	    for (i = 0; i < len; i += 1) {
	        charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
	        shapeData = charData && charData.data || {};
	        matrixHelper.reset();
	        if(singleShape && letters[i].n) {
	            xPos = -trackingOffset;
	            yPos += documentData.yOffset;
	            yPos += firstLine ? 1 : 0;
	            firstLine = false;
	        }
	
	        shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
	        jLen = shapes.length;
	        matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);
	        if(singleShape){
	            this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
	        }
	        commands = createSizedArray(jLen);
	        for(j=0;j<jLen;j+=1){
	            kLen = shapes[j].ks.k.i.length;
	            pathNodes = shapes[j].ks.k;
	            pathArr = [];
	            for(k=1;k<kLen;k+=1){
	                if(k==1){
	                    pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));
	                }
	                pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToY(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToX(pathNodes.v[k][0],pathNodes.v[k][1],0),matrixHelper.applyToY(pathNodes.v[k][0],pathNodes.v[k][1],0));
	            }
	            pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToY(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));
	            commands[j] = pathArr;
	        }
	        if(singleShape){
	            xPos += letters[i].l;
	            xPos += trackingOffset;
	        }
	        if(this.textSpans[cnt]){
	            this.textSpans[cnt].elem = commands;
	        } else {
	            this.textSpans[cnt] = {elem: commands};
	        }
	        cnt +=1;
	    }
	};
	
	CVTextElement.prototype.renderInnerContent = function(){
	    var ctx = this.canvasContext;
	    var finalMat = this.finalTransform.mat.props;
	    ctx.font = this.values.fValue;
	    ctx.lineCap = 'butt';
	    ctx.lineJoin = 'miter';
	    ctx.miterLimit = 4;
	
	    if(!this.data.singleShape){
	        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
	    }
	
	    var  i,len, j, jLen, k, kLen;
	    var renderedLetters = this.textAnimator.renderedLetters;
	
	    var letters = this.textProperty.currentData.l;
	
	    len = letters.length;
	    var renderedLetter;
	    var lastFill = null, lastStroke = null, lastStrokeW = null, commands, pathArr;
	    for(i=0;i<len;i+=1){
	        if(letters[i].n){
	            continue;
	        }
	        renderedLetter = renderedLetters[i];
	        if(renderedLetter){
	            this.globalData.renderer.save();
	            this.globalData.renderer.ctxTransform(renderedLetter.p);
	            this.globalData.renderer.ctxOpacity(renderedLetter.o);
	        }
	        if(this.fill){
	            if(renderedLetter && renderedLetter.fc){
	                if(lastFill !== renderedLetter.fc){
	                    lastFill = renderedLetter.fc;
	                    ctx.fillStyle = renderedLetter.fc;
	                }
	            }else if(lastFill !== this.values.fill){
	                lastFill = this.values.fill;
	                ctx.fillStyle = this.values.fill;
	            }
	            commands = this.textSpans[i].elem;
	            jLen = commands.length;
	            this.globalData.canvasContext.beginPath();
	            for(j=0;j<jLen;j+=1) {
	                pathArr = commands[j];
	                kLen = pathArr.length;
	                this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
	                for (k = 2; k < kLen; k += 6) {
	                    this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
	                }
	            }
	            this.globalData.canvasContext.closePath();
	            this.globalData.canvasContext.fill();
	            ///ctx.fillText(this.textSpans[i].val,0,0);
	        }
	        if(this.stroke){
	            if(renderedLetter && renderedLetter.sw){
	                if(lastStrokeW !== renderedLetter.sw){
	                    lastStrokeW = renderedLetter.sw;
	                    ctx.lineWidth = renderedLetter.sw;
	                }
	            }else if(lastStrokeW !== this.values.sWidth){
	                lastStrokeW = this.values.sWidth;
	                ctx.lineWidth = this.values.sWidth;
	            }
	            if(renderedLetter && renderedLetter.sc){
	                if(lastStroke !== renderedLetter.sc){
	                    lastStroke = renderedLetter.sc;
	                    ctx.strokeStyle = renderedLetter.sc;
	                }
	            }else if(lastStroke !== this.values.stroke){
	                lastStroke = this.values.stroke;
	                ctx.strokeStyle = this.values.stroke;
	            }
	            commands = this.textSpans[i].elem;
	            jLen = commands.length;
	            this.globalData.canvasContext.beginPath();
	            for(j=0;j<jLen;j+=1) {
	                pathArr = commands[j];
	                kLen = pathArr.length;
	                this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
	                for (k = 2; k < kLen; k += 6) {
	                    this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
	                }
	            }
	            this.globalData.canvasContext.closePath();
	            this.globalData.canvasContext.stroke();
	            ///ctx.strokeText(letters[i].val,0,0);
	        }
	        if(renderedLetter) {
	            this.globalData.renderer.restore();
	        }
	    }
	    /*if(this.data.hasMask){
	     this.globalData.renderer.restore(true);
	     }*/
	};
	function CVEffects() {
	
	}
	CVEffects.prototype.renderFrame = function(){};
	function HBaseElement(data,globalData,comp){}
	HBaseElement.prototype = {
	    checkBlendMode: function(){},
	    initRendererElement: function(){
	        this.baseElement = createTag(this.data.tg || 'div');
	        if(this.data.hasMask) {
	            this.svgElement = createNS('svg');
	            this.layerElement = createNS('g');
	            this.maskedElement = this.layerElement;
	            this.svgElement.appendChild(this.layerElement);
	            this.baseElement.appendChild(this.svgElement);
	        } else {
	            this.layerElement = this.baseElement;
	        }
	        styleDiv(this.baseElement);
	    },
	    createContainerElements: function(){
	        this.renderableEffectsManager = new CVEffects(this);
	        this.transformedElement = this.baseElement;
	        this.maskedElement = this.layerElement;
	        if (this.data.ln) {
	            this.layerElement.setAttribute('id',this.data.ln);
	        }
	        if (this.data.cl) {
	            this.layerElement.setAttribute('class', this.data.cl);
	        }
	        if (this.data.bm !== 0) {
	            this.setBlendMode();
	        }
	    },
	    renderElement: function() {
	        if(this.finalTransform._matMdf){
	            this.transformedElement.style.transform = this.transformedElement.style.webkitTransform = this.finalTransform.mat.toCSS();
	        }
	        if(this.finalTransform._opMdf){
	            this.transformedElement.style.opacity = this.finalTransform.mProp.o.v;
	        }
	    },
	    renderFrame: function() {
	        //If it is exported as hidden (data.hd === true) no need to render
	        //If it is not visible no need to render
	        if (this.data.hd || this.hidden) {
	            return;
	        }
	        this.renderTransform();
	        this.renderRenderable();
	        this.renderElement();
	        this.renderInnerContent();
	        if (this._isFirstFrame) {
	            this._isFirstFrame = false;
	        }
	    },
	    destroy: function(){
	        this.layerElement = null;
	        this.transformedElement = null;
	        if(this.matteElement) {
	            this.matteElement = null;
	        }
	        if(this.maskManager) {
	            this.maskManager.destroy();
	            this.maskManager = null;
	        }
	    },
	    addMasks: function(){
	        this.maskManager = new MaskElement(this.data, this, this.globalData);
	    },
	    setMatte: function(){}
	};
	HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
	HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
	HBaseElement.prototype.buildElementParenting = HybridRenderer.prototype.buildElementParenting;
	function HSolidElement(data,globalData,comp){
	    this.initElement(data,globalData,comp);
	}
	extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement], HSolidElement);
	
	HSolidElement.prototype.createContent = function(){
	    var rect;
	    if(this.data.hasMask){
	        rect = createNS('rect');
	        rect.setAttribute('width',this.data.sw);
	        rect.setAttribute('height',this.data.sh);
	        rect.setAttribute('fill',this.data.sc);
	        this.svgElement.setAttribute('width',this.data.sw);
	        this.svgElement.setAttribute('height',this.data.sh);
	    } else {
	        rect = createTag('div');
	        rect.style.width = this.data.sw + 'px';
	        rect.style.height = this.data.sh + 'px';
	        rect.style.backgroundColor = this.data.sc;
	    }
	    this.layerElement.appendChild(rect);
	};
	
	function HCompElement(data,globalData,comp){
	    this.layers = data.layers;
	    this.supports3d = !data.hasMask;
	    this.completeLayers = false;
	    this.pendingElements = [];
	    this.elements = this.layers ? createSizedArray(this.layers.length) : [];
	    this.initElement(data,globalData,comp);
	    this.tm = data.tm ? PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this) : {_placeholder:true};
	}
	
	extendPrototype([HybridRenderer, ICompElement, HBaseElement], HCompElement);
	HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;
	
	HCompElement.prototype.createContainerElements = function(){
	    this._createBaseContainerElements();
	    //divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';
	    if(this.data.hasMask){
	        this.svgElement.setAttribute('width',this.data.w);
	        this.svgElement.setAttribute('height',this.data.h);
	        this.transformedElement = this.baseElement;
	    } else {
	        this.transformedElement = this.layerElement;
	    }
	};
	
	HCompElement.prototype.addTo3dContainer = function(elem,pos) {
	    var j = 0;
	    var nextElement;
	    while(j<pos){
	        if(this.elements[j] && this.elements[j].getBaseElement){
	            nextElement = this.elements[j].getBaseElement();
	        }
	        j += 1;
	    }
	    if(nextElement){
	        this.layerElement.insertBefore(elem, nextElement);
	    } else {
	        this.layerElement.appendChild(elem);
	    }
	}
	
	function HShapeElement(data,globalData,comp){
	    //List of drawable elements
	    this.shapes = [];
	    // Full shape data
	    this.shapesData = data.shapes;
	    //List of styles that will be applied to shapes
	    this.stylesList = [];
	    //List of modifiers that will be applied to shapes
	    this.shapeModifiers = [];
	    //List of items in shape tree
	    this.itemsData = [];
	    //List of items in previous shape tree
	    this.processedElements = [];
	    this.shapesContainer = createNS('g');
	    this.initElement(data,globalData,comp);
	    //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
	    // List of elements that have been created
	    this.prevViewData = [];
	    this.currentBBox = {
	        x:999999,
	        y: -999999,
	        h: 0,
	        w: 0
	    };
	}
	extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement], HShapeElement);
	HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;
	
	HShapeElement.prototype.createContent = function(){
	    var cont;
	    this.baseElement.style.fontSize = 0;
	    if (this.data.hasMask) {
	        this.layerElement.appendChild(this.shapesContainer);
	        cont = this.svgElement;
	    } else {
	        cont = createNS('svg');
	        var size = this.comp.data ? this.comp.data : this.globalData.compSize;
	        cont.setAttribute('width',size.w);
	        cont.setAttribute('height',size.h);
	        cont.appendChild(this.shapesContainer);
	        this.layerElement.appendChild(cont);
	    }
	
	    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0, [], true);
	    this.shapeCont = cont;
	};
	
	HShapeElement.prototype.getTransformedPoint = function(transformers, point) {
	    var i, len = transformers.length;
	    for(i = 0; i < len; i += 1) {
	        point = transformers[i].mProps.v.applyToPointArray(point[0], point[1], 0);
	    }
	    return point;
	}
	
	HShapeElement.prototype.calculateShapeBoundingBox = function(item, boundingBox) {
	    var shape = item.sh.v;
	    var transformers = item.transformers;
	    var i, len = shape._length, vPoint, oPoint, nextIPoint, nextVPoint, bounds;
	    if (len <= 1) {
	        return;
	    }
	    for (i = 0; i < len - 1; i += 1) {
	        vPoint = this.getTransformedPoint(transformers, shape.v[i]);
	        oPoint = this.getTransformedPoint(transformers, shape.o[i]);
	        nextIPoint = this.getTransformedPoint(transformers, shape.i[i + 1]);
	        nextVPoint = this.getTransformedPoint(transformers, shape.v[i + 1]);
	        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
	    }
	    if(shape.c) {
	        vPoint = this.getTransformedPoint(transformers, shape.v[i]);
	        oPoint = this.getTransformedPoint(transformers, shape.o[i]);
	        nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
	        nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
	        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
	    }
	}
	
	HShapeElement.prototype.checkBounds = function(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
	    this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
	    var bounds = this.shapeBoundingBox;
	    boundingBox.x = bm_min(bounds.left, boundingBox.x);
	    boundingBox.xMax = bm_max(bounds.right, boundingBox.xMax);
	    boundingBox.y = bm_min(bounds.top, boundingBox.y);
	    boundingBox.yMax = bm_max(bounds.bottom, boundingBox.yMax);
	}
	
	HShapeElement.prototype.shapeBoundingBox = {
	    left:0,
	    right:0,
	    top:0,
	    bottom:0,
	}
	
	HShapeElement.prototype.tempBoundingBox = {
	    x:0,
	    xMax:0,
	    y:0,
	    yMax:0,
	    width:0,
	    height:0
	}
	
	HShapeElement.prototype.getBoundsOfCurve = function(p0, p1, p2, p3) {
	
	    var bounds = [[p0[0],p3[0]], [p0[1],p3[1]]];
	
	    for (var a, b, c, t, b2ac, t1, t2, i = 0; i < 2; ++i) {
	
	      b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
	      a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
	      c = 3 * p1[i] - 3 * p0[i];
	
	      b = b | 0;
	      a = a | 0;
	      c = c | 0;
	
	      if (a === 0) {
	
	        if (b === 0) {
	          continue;
	        }
	
	        t = -c / b;
	
	        if (0 < t && t < 1) {
	          bounds[i].push(this.calculateF(t,p0,p1,p2,p3,i));
	        }
	        continue;
	      }
	
	      b2ac = b * b - 4 * c * a;
	
	      if (b2ac < 0) {
	        continue;
	      }
	
	      t1 = (-b + bm_sqrt(b2ac))/(2 * a);
	      if (0 < t1 && t1 < 1) bounds[i].push(this.calculateF(t1,p0,p1,p2,p3,i));
	
	      t2 = (-b - bm_sqrt(b2ac))/(2 * a);
	      if (0 < t2 && t2 < 1) bounds[i].push(this.calculateF(t2,p0,p1,p2,p3,i));
	
	    }
	
	    this.shapeBoundingBox.left = bm_min.apply(null, bounds[0]);
	    this.shapeBoundingBox.top = bm_min.apply(null, bounds[1]);
	    this.shapeBoundingBox.right = bm_max.apply(null, bounds[0]);
	    this.shapeBoundingBox.bottom = bm_max.apply(null, bounds[1]);
	  };
	
	  HShapeElement.prototype.calculateF = function(t, p0, p1, p2, p3, i) {
	    return bm_pow(1-t, 3) * p0[i]
	        + 3 * bm_pow(1-t, 2) * t * p1[i]
	        + 3 * (1-t) * bm_pow(t, 2) * p2[i]
	        + bm_pow(t, 3) * p3[i];
	  }
	
	HShapeElement.prototype.calculateBoundingBox = function(itemsData, boundingBox) {
	    var i, len = itemsData.length, path;
	    for(i = 0; i < len; i += 1) {
	        if(itemsData[i] && itemsData[i].sh) {
	            this.calculateShapeBoundingBox(itemsData[i], boundingBox)
	        } else if(itemsData[i] && itemsData[i].it) {
	            this.calculateBoundingBox(itemsData[i].it, boundingBox)
	        }
	    }
	}
	
	HShapeElement.prototype.renderInnerContent = function() {
	    this._renderShapeFrame();
	
	    if(!this.hidden && (this._isFirstFrame || this._mdf)) {
	        var tempBoundingBox = this.tempBoundingBox;
	        var max = 999999;
	        tempBoundingBox.x = max;
	        tempBoundingBox.xMax = -max;
	        tempBoundingBox.y = max;
	        tempBoundingBox.yMax = -max;
	        this.calculateBoundingBox(this.itemsData, tempBoundingBox);
	        tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
	        tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y;
	        //var tempBoundingBox = this.shapeCont.getBBox();
	        var changed = false;
	        if(this.currentBBox.w !== tempBoundingBox.width){
	            this.currentBBox.w = tempBoundingBox.width;
	            this.shapeCont.setAttribute('width',tempBoundingBox.width);
	            changed = true;
	        }
	        if(this.currentBBox.h !== tempBoundingBox.height){
	            this.currentBBox.h = tempBoundingBox.height;
	            this.shapeCont.setAttribute('height',tempBoundingBox.height);
	            changed = true;
	        }
	        if(changed  || this.currentBBox.x !== tempBoundingBox.x  || this.currentBBox.y !== tempBoundingBox.y){
	            this.currentBBox.w = tempBoundingBox.width;
	            this.currentBBox.h = tempBoundingBox.height;
	            this.currentBBox.x = tempBoundingBox.x;
	            this.currentBBox.y = tempBoundingBox.y;
	
	            this.shapeCont.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);
	            this.shapeCont.style.transform = this.shapeCont.style.webkitTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
	        }
	    }
	
	};
	function HTextElement(data,globalData,comp){
	    this.textSpans = [];
	    this.textPaths = [];
	    this.currentBBox = {
	        x:999999,
	        y: -999999,
	        h: 0,
	        w: 0
	    };
	    this.renderType = 'svg';
	    this.isMasked = false;
	    this.initElement(data,globalData,comp);
	
	}
	extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement], HTextElement);
	
	HTextElement.prototype.createContent = function(){
	    this.isMasked = this.checkMasks();
	    if(this.isMasked){
	        this.renderType = 'svg';
	        this.compW = this.comp.data.w;
	        this.compH = this.comp.data.h;
	        this.svgElement.setAttribute('width',this.compW);
	        this.svgElement.setAttribute('height',this.compH);
	        var g = createNS('g');
	        this.maskedElement.appendChild(g);
	        this.innerElem = g;
	    } else {
	        this.renderType = 'html';
	        this.innerElem = this.layerElement;
	    }
	
	    this.checkParenting();
	
	};
	
	HTextElement.prototype.buildNewText = function(){
	    var documentData = this.textProperty.currentData;
	    this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
	    var innerElemStyle = this.innerElem.style;
	    innerElemStyle.color = innerElemStyle.fill = documentData.fc ? this.buildColor(documentData.fc) : 'rgba(0,0,0,0)';
	    if(documentData.sc){
	        innerElemStyle.stroke = this.buildColor(documentData.sc);
	        innerElemStyle.strokeWidth = documentData.sw+'px';
	    }
	    var fontData = this.globalData.fontManager.getFontByName(documentData.f);
	    if(!this.globalData.fontManager.chars){
	        innerElemStyle.fontSize = documentData.finalSize+'px';
	        innerElemStyle.lineHeight = documentData.finalSize+'px';
	        if(fontData.fClass){
	            this.innerElem.className = fontData.fClass;
	        } else {
	            innerElemStyle.fontFamily = fontData.fFamily;
	            var fWeight = documentData.fWeight, fStyle = documentData.fStyle;
	            innerElemStyle.fontStyle = fStyle;
	            innerElemStyle.fontWeight = fWeight;
	        }
	    }
	    var i, len;
	
	    var letters = documentData.l;
	    len = letters.length;
	    var tSpan,tParent,tCont;
	    var matrixHelper = this.mHelper;
	    var shapes, shapeStr = '';
	    var cnt = 0;
	    for (i = 0;i < len ;i += 1) {
	        if(this.globalData.fontManager.chars){
	            if(!this.textPaths[cnt]){
	                tSpan = createNS('path');
	                tSpan.setAttribute('stroke-linecap', 'butt');
	                tSpan.setAttribute('stroke-linejoin','round');
	                tSpan.setAttribute('stroke-miterlimit','4');
	            } else {
	                tSpan = this.textPaths[cnt];
	            }
	            if(!this.isMasked){
	                if(this.textSpans[cnt]){
	                    tParent = this.textSpans[cnt];
	                    tCont = tParent.children[0];
	                } else {
	
	                    tParent = createTag('div');
	                    tCont = createNS('svg');
	                    tCont.appendChild(tSpan);
	                    styleDiv(tParent);
	                }
	            }
	        }else{
	            if(!this.isMasked){
	                if(this.textSpans[cnt]){
	                    tParent = this.textSpans[cnt];
	                    tSpan = this.textPaths[cnt];
	                } else {
	                    tParent = createTag('span');
	                    styleDiv(tParent);
	                    tSpan = createTag('span');
	                    styleDiv(tSpan);
	                    tParent.appendChild(tSpan);
	                }
	            } else {
	                tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS('text');
	            }
	        }
	        //tSpan.setAttribute('visibility', 'hidden');
	        if(this.globalData.fontManager.chars){
	            var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
	            var shapeData;
	            if(charData){
	                shapeData = charData.data;
	            } else {
	                shapeData = null;
	            }
	            matrixHelper.reset();
	            if(shapeData && shapeData.shapes){
	                shapes = shapeData.shapes[0].it;
	                matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);
	                shapeStr = this.createPathShape(matrixHelper,shapes);
	                tSpan.setAttribute('d',shapeStr);
	            }
	            if(!this.isMasked){
	                this.innerElem.appendChild(tParent);
	                if(shapeData && shapeData.shapes){
	
	                    //document.body.appendChild is needed to get exact measure of shape
	                    document.body.appendChild(tCont);
	                    var boundingBox = tCont.getBBox();
	                    tCont.setAttribute('width',boundingBox.width + 2);
	                    tCont.setAttribute('height',boundingBox.height + 2);
	                    tCont.setAttribute('viewBox',(boundingBox.x-1)+' '+ (boundingBox.y-1)+' '+ (boundingBox.width+2)+' '+ (boundingBox.height+2));
	                    tCont.style.transform = tCont.style.webkitTransform = 'translate(' + (boundingBox.x-1) + 'px,' + (boundingBox.y-1) + 'px)';
	
	                    letters[i].yOffset = boundingBox.y-1;
	
	                } else{
	                    tCont.setAttribute('width',1);
	                    tCont.setAttribute('height',1);
	                }
	                    tParent.appendChild(tCont);
	            }else{
	                this.innerElem.appendChild(tSpan);
	            }
	        }else{
	            tSpan.textContent = letters[i].val;
	            tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space","preserve");
	            if(!this.isMasked){
	                this.innerElem.appendChild(tParent);
	                //
	                tSpan.style.transform = tSpan.style.webkitTransform = 'translate3d(0,'+ -documentData.finalSize/1.2+'px,0)';
	            } else {
	                this.innerElem.appendChild(tSpan);
	            }
	        }
	        //
	        if(!this.isMasked){
	            this.textSpans[cnt] = tParent;
	        }else{
	            this.textSpans[cnt] = tSpan;
	        }
	        this.textSpans[cnt].style.display = 'block';
	        this.textPaths[cnt] = tSpan;
	        cnt += 1;
	    }
	    while(cnt < this.textSpans.length){
	        this.textSpans[cnt].style.display = 'none';
	        cnt += 1;
	    }
	};
	
	HTextElement.prototype.renderInnerContent = function() {
	
	    if(this.data.singleShape){
	        if(!this._isFirstFrame && !this.lettersChangedFlag){
	            return;
	        } else {
	            // Todo Benchmark if using this is better than getBBox
	             if(this.isMasked && this.finalTransform._matMdf){
	                 this.svgElement.setAttribute('viewBox',-this.finalTransform.mProp.p.v[0]+' '+ -this.finalTransform.mProp.p.v[1]+' '+this.compW+' '+this.compH);
	                this.svgElement.style.transform = this.svgElement.style.webkitTransform = 'translate(' + -this.finalTransform.mProp.p.v[0] + 'px,' + -this.finalTransform.mProp.p.v[1] + 'px)';
	             }
	        }
	    }
	
	    this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
	    if(!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag){
	        return;
	    }
	    var  i,len, count = 0;
	    var renderedLetters = this.textAnimator.renderedLetters;
	
	    var letters = this.textProperty.currentData.l;
	
	    len = letters.length;
	    var renderedLetter, textSpan, textPath;
	    for(i=0;i<len;i+=1){
	        if(letters[i].n){
	            count += 1;
	            continue;
	        }
	        textSpan = this.textSpans[i];
	        textPath = this.textPaths[i];
	        renderedLetter = renderedLetters[count];
	        count += 1;
	        if(renderedLetter._mdf.m) {
	            if(!this.isMasked){
	                textSpan.style.transform = textSpan.style.webkitTransform = renderedLetter.m;
	            }else{
	                textSpan.setAttribute('transform',renderedLetter.m);
	            }
	        }
	        ////textSpan.setAttribute('opacity',renderedLetter.o);
	        textSpan.style.opacity = renderedLetter.o;
	        if(renderedLetter.sw && renderedLetter._mdf.sw){
	            textPath.setAttribute('stroke-width',renderedLetter.sw);
	        }
	        if(renderedLetter.sc && renderedLetter._mdf.sc){
	            textPath.setAttribute('stroke',renderedLetter.sc);
	        }
	        if(renderedLetter.fc && renderedLetter._mdf.fc){
	            textPath.setAttribute('fill',renderedLetter.fc);
	            textPath.style.color = renderedLetter.fc;
	        }
	    }
	
	    if(this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)){
	        var boundingBox = this.innerElem.getBBox();
	
	        if(this.currentBBox.w !== boundingBox.width){
	            this.currentBBox.w = boundingBox.width;
	            this.svgElement.setAttribute('width',boundingBox.width);
	        }
	        if(this.currentBBox.h !== boundingBox.height){
	            this.currentBBox.h = boundingBox.height;
	            this.svgElement.setAttribute('height',boundingBox.height);
	        }
	
	        var margin = 1;
	        if(this.currentBBox.w !== (boundingBox.width + margin*2) || this.currentBBox.h !== (boundingBox.height + margin*2)  || this.currentBBox.x !== (boundingBox.x - margin)  || this.currentBBox.y !== (boundingBox.y - margin)){
	            this.currentBBox.w = boundingBox.width + margin*2;
	            this.currentBBox.h = boundingBox.height + margin*2;
	            this.currentBBox.x = boundingBox.x - margin;
	            this.currentBBox.y = boundingBox.y - margin;
	
	            this.svgElement.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);
	            this.svgElement.style.transform = this.svgElement.style.webkitTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
	        }
	    }
	};
	function HImageElement(data,globalData,comp){
	    this.assetData = globalData.getAssetData(data.refId);
	    this.initElement(data,globalData,comp);
	}
	
	extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement], HImageElement);
	
	
	HImageElement.prototype.createContent = function(){
	    var assetPath = this.globalData.getAssetsPath(this.assetData);
	    var img = new Image();
	
	    if(this.data.hasMask){
	        this.imageElem = createNS('image');
	        this.imageElem.setAttribute('width',this.assetData.w+"px");
	        this.imageElem.setAttribute('height',this.assetData.h+"px");
	        this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);
	        this.layerElement.appendChild(this.imageElem);
	        this.baseElement.setAttribute('width',this.assetData.w);
	        this.baseElement.setAttribute('height',this.assetData.h);
	    } else {
	        this.layerElement.appendChild(img);
	    }
	    img.src = assetPath;
	    if(this.data.ln){
	        this.baseElement.setAttribute('id',this.data.ln);
	    }
	};
	function HCameraElement(data,globalData,comp){
	    this.initFrame();
	    this.initBaseData(data,globalData,comp);
	    this.initHierarchy();
	    var getProp = PropertyFactory.getProp;
	    this.pe = getProp(this,data.pe,0,0,this);
	    if(data.ks.p.s){
	        this.px = getProp(this,data.ks.p.x,1,0,this);
	        this.py = getProp(this,data.ks.p.y,1,0,this);
	        this.pz = getProp(this,data.ks.p.z,1,0,this);
	    }else{
	        this.p = getProp(this,data.ks.p,1,0,this);
	    }
	    if(data.ks.a){
	        this.a = getProp(this,data.ks.a,1,0,this);
	    }
	    if(data.ks.or.k.length && data.ks.or.k[0].to){
	        var i,len = data.ks.or.k.length;
	        for(i=0;i<len;i+=1){
	            data.ks.or.k[i].to = null;
	            data.ks.or.k[i].ti = null;
	        }
	    }
	    this.or = getProp(this,data.ks.or,1,degToRads,this);
	    this.or.sh = true;
	    this.rx = getProp(this,data.ks.rx,0,degToRads,this);
	    this.ry = getProp(this,data.ks.ry,0,degToRads,this);
	    this.rz = getProp(this,data.ks.rz,0,degToRads,this);
	    this.mat = new Matrix();
	    this._prevMat = new Matrix();
	    this._isFirstFrame = true;
	}
	extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);
	
	HCameraElement.prototype.setup = function() {
	    var i, len = this.comp.threeDElements.length, comp;
	    for(i=0;i<len;i+=1){
	        //[perspectiveElem,container]
	        comp = this.comp.threeDElements[i];
	        if(comp.type === '3d') {
	            comp.perspectiveElem.style.perspective = comp.perspectiveElem.style.webkitPerspective = this.pe.v+'px';
	            comp.container.style.transformOrigin = comp.container.style.mozTransformOrigin = comp.container.style.webkitTransformOrigin = "0px 0px 0px";
	            comp.perspectiveElem.style.transform = comp.perspectiveElem.style.webkitTransform = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
	        }
	    }
	};
	
	HCameraElement.prototype.createElements = function(){
	};
	
	HCameraElement.prototype.hide = function(){
	};
	
	HCameraElement.prototype.renderFrame = function(){
	    var _mdf = this._isFirstFrame;
	    var i, len;
	    if(this.hierarchy){
	        len = this.hierarchy.length;
	        for(i=0;i<len;i+=1){
	            _mdf = this.hierarchy[i].finalTransform.mProp._mdf || _mdf;
	        }
	    }
	    if(_mdf || (this.p && this.p._mdf) || (this.px && (this.px._mdf || this.py._mdf || this.pz._mdf)) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || (this.a && this.a._mdf)) {
	        this.mat.reset();
	
	        if(this.hierarchy){
	            var mat;
	            len = this.hierarchy.length - 1;
	            for (i = len; i >= 0; i -= 1) {
	                /*mat = this.hierarchy[i].finalTransform.mProp.v.props;
	                console.log(mat)
	                this.mat.transform(-mat[0],-mat[1],-mat[2],-mat[3],-mat[4],-mat[5],-mat[6],-mat[7],-mat[8],-mat[9],-mat[10],-mat[11],-mat[12],-mat[13],-mat[14],mat[15]);
	                console.log(this.mat.props)*/
	                var mTransf = this.hierarchy[i].finalTransform.mProp;
	                this.mat.translate(-mTransf.p.v[0],-mTransf.p.v[1],mTransf.p.v[2]);
	                this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
	                this.mat.scale(1/mTransf.s.v[0],1/mTransf.s.v[1],1/mTransf.s.v[2]);
	                this.mat.translate(mTransf.a.v[0],mTransf.a.v[1],mTransf.a.v[2]);
	            }
	        }
	
	        if(this.p){
	            this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]);
	        }else{
	            this.mat.translate(-this.px.v,-this.py.v,this.pz.v);
	        }
	        if(this.a){
	            var diffVector = [this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]];
	            var mag = Math.sqrt(Math.pow(diffVector[0],2)+Math.pow(diffVector[1],2)+Math.pow(diffVector[2],2));
	            //var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));
	            var lookDir = [diffVector[0]/mag,diffVector[1]/mag,diffVector[2]/mag];
	            var lookLengthOnXZ = Math.sqrt( lookDir[2]*lookDir[2] + lookDir[0]*lookDir[0] );
	            var m_rotationX = (Math.atan2( lookDir[1], lookLengthOnXZ ));
	            var m_rotationY = (Math.atan2( lookDir[0], -lookDir[2]));
	            this.mat.rotateY(m_rotationY).rotateX(-m_rotationX);
	
	        }
	        this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
	        this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
	        this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0);
	        this.mat.translate(0,0,this.pe.v);
	
	
	        
	
	
	        if(!this._prevMat.equals(this.mat) && this.comp.threeDElements) {
	            len = this.comp.threeDElements.length;
	            var comp;
	            for(i=0;i<len;i+=1){
	                comp = this.comp.threeDElements[i];
	                if(comp.type === '3d') {
	                    comp.container.style.transform = comp.container.style.webkitTransform = this.mat.toCSS();
	                }
	            }
	            this.mat.clone(this._prevMat);
	        }
	    }
	    this._isFirstFrame = false;
	};
	
	HCameraElement.prototype.prepareFrame = function(num) {
	    this.prepareProperties(num, true);
	};
	
	HCameraElement.prototype.destroy = function(){
	};
	HCameraElement.prototype.initExpressions = function(){};
	HCameraElement.prototype.getBaseElement = function(){return null;};
	function HEffects() {
	}
	HEffects.prototype.renderFrame = function(){};
	var Expressions = (function(){
	    var ob = {};
	    ob.initExpressions = initExpressions;
	
	
	    function initExpressions(animation){
	        animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
	        animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
	    }
	   return ob;
	}());
	
	expressionsPlugin = Expressions;
	
	var ExpressionManager = (function(){
	    'use strict';
	    var ob = {};
	    var Math = BMMath;
	    var window = null;
	    var document = null;
	
	    function duplicatePropertyValue(value, mult) {
	        mult = mult || 1;
	
	        if (typeof value === 'number'  || value instanceof Number) {
	            return value * mult;
	        } else if(value.i) {
	            return shape_pool.clone(value);
	        } else {
	            var arr = createTypedArray('float32', value.length);
	            var i, len = value.length;
	            for (i = 0; i < len; i += 1) {
	                arr[i] = value[i] * mult;
	            }
	            return arr;
	        }
	    }
	
	    function isTypeOfArray(arr) {
	        return arr.constructor === Array || arr.constructor === Float32Array;
	    }
	
	    function $bm_neg(a){
	        var tOfA = typeof a;
	        if(tOfA === 'number' || tOfA === 'boolean'  || a instanceof Number ){
	            return -a;
	        }
	        if(isTypeOfArray(a)){
	            var i, lenA = a.length;
	            var retArr = [];
	            for(i=0;i<lenA;i+=1){
	                retArr[i] = -a[i];
	            }
	            return retArr;
	        }
	    }
	
	    function sum(a,b) {
	        var tOfA = typeof a;
	        var tOfB = typeof b;
	        if(tOfA === 'string' || tOfB === 'string'){
	            return a + b;
	        }
	        if((tOfA === 'number' || tOfA === 'boolean' || tOfA === 'string' || a instanceof Number) && (tOfB === 'number' || tOfB === 'boolean' || tOfB === 'string'  || b instanceof Number)) {
	            return a + b;
	        }
	        if(isTypeOfArray(a) && (tOfB === 'number' || tOfB === 'boolean' || tOfB === 'string' || b instanceof Number )){
	            a = a.slice(0);
	            a[0] = a[0] + b;
	            return a;
	        }
	        if((tOfA === 'number' || tOfA === 'boolean' || tOfA === 'string' || a instanceof Number ) && isTypeOfArray(b)){
	            b = b.slice(0);
	            b[0] = a + b[0];
	            return b;
	        }
	        if(isTypeOfArray(a) && isTypeOfArray(b)){
	            
	            var i = 0, lenA = a.length, lenB = b.length;
	            var retArr = [];
	            while(i<lenA || i < lenB){
	                if((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)){
	                    retArr[i] = a[i] + b[i];
	                }else{
	                    retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
	                }
	                i += 1;
	            }
	            return retArr;
	        }
	        return 0;
	    }
	    var add = sum;
	
	    function sub(a,b) {
	        var tOfA = typeof a;
	        var tOfB = typeof b;
	        if((tOfA === 'number' || tOfA === 'boolean' || tOfA === 'string' || a instanceof Number ) && (tOfB === 'number' || tOfB === 'boolean' || tOfB === 'string' || b instanceof Number )) {
	            if(tOfA === 'string') {
	                a = parseInt(a);
	            }
	            if(tOfB === 'string') {
	                b = parseInt(b);
	            }
	            return a - b;
	        }
	        if( isTypeOfArray(a) && (tOfB === 'number' || tOfB === 'boolean' || tOfB === 'string' || b instanceof Number )){
	            a = a.slice(0);
	            a[0] = a[0] - b;
	            return a;
	        }
	        if((tOfA === 'number' || tOfA === 'boolean' || tOfA === 'string' || a instanceof Number ) &&  isTypeOfArray(b)){
	            b = b.slice(0);
	            b[0] = a - b[0];
	            return b;
	        }
	        if(isTypeOfArray(a) && isTypeOfArray(b)){
	            var i = 0, lenA = a.length, lenB = b.length;
	            var retArr = [];
	            while(i<lenA || i < lenB){
	                if((typeof a[i] === 'number' || a[i] instanceof Number) && typeof (typeof b[i] === 'number' || b[i] instanceof Number)){
	                    retArr[i] = a[i] - b[i];
	                }else{
	                    retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
	                }
	                i += 1;
	            }
	            return retArr;
	        }
	        return 0;
	    }
	
	    function mul(a,b) {
	        var tOfA = typeof a;
	        var tOfB = typeof b;
	        var arr;
	        if((tOfA === 'number' || tOfA === 'boolean' || tOfA === 'string' || a instanceof Number ) && (tOfB === 'number' || tOfB === 'boolean' || tOfB === 'string' || b instanceof Number )) {
	            return a * b;
	        }
	
	        var i, len;
	        if(isTypeOfArray(a) && (tOfB === 'number' || tOfB === 'boolean' || tOfB === 'string' || b instanceof Number )){
	            len = a.length;
	            arr = createTypedArray('float32', len);
	            for(i=0;i<len;i+=1){
	                arr[i] = a[i] * b;
	            }
	            return arr;
	        }
	        if((tOfA === 'number' || tOfA === 'boolean' || tOfA === 'string' || a instanceof Number ) && isTypeOfArray(b)){
	            len = b.length;
	            arr = createTypedArray('float32', len);
	            for(i=0;i<len;i+=1){
	                arr[i] = a * b[i];
	            }
	            return arr;
	        }
	        return 0;
	    }
	
	    function div(a,b) {
	        var tOfA = typeof a;
	        var tOfB = typeof b;
	        var arr;
	        if((tOfA === 'number' || tOfA === 'boolean' || tOfA === 'string' || a instanceof Number ) && (tOfB === 'number' || tOfB === 'boolean' || tOfB === 'string' || b instanceof Number )) {
	            return a / b;
	        }
	        var i, len;
	        if(isTypeOfArray(a) && (tOfB === 'number' || tOfB === 'boolean' || tOfB === 'string' || b instanceof Number  )){
	            len = a.length;
	            arr = createTypedArray('float32', len);
	            for(i=0;i<len;i+=1){
	                arr[i] = a[i] / b;
	            }
	            return arr;
	        }
	        if((tOfA === 'number' || tOfA === 'boolean' || tOfA === 'string' || a instanceof Number ) && isTypeOfArray(b)){
	            len = b.length;
	            arr = createTypedArray('float32', len);
	            for(i=0;i<len;i+=1){
	                arr[i] = a / b[i];
	            }
	            return arr;
	        }
	        return 0;
	    }
	    function mod(a,b) {
	        if(typeof a === 'string') {
	            a = parseInt(a);
	        }
	        if(typeof b === 'string') {
	            b = parseInt(b);
	        }
	        return a % b;
	    }
	
	    function clamp(num, min, max) {
	        if(min > max){
	            var mm = max;
	            max = min;
	            min = mm;
	        }
	        return Math.min(Math.max(num, min), max);
	    }
	
	    function radiansToDegrees(val) {
	        return val/degToRads;
	    }
	    var radians_to_degrees = radiansToDegrees;
	
	    function degreesToRadians(val) {
	        return val*degToRads;
	    }
	    var degrees_to_radians = radiansToDegrees;
	
	    var helperLengthArray = [0,0,0,0,0,0];
	
	    function length(arr1, arr2) {
	        if (typeof arr1 === 'number' || arr1 instanceof Number) {
	            arr2 = arr2 || 0;
	            return Math.abs(arr1 - arr2);
	        }
	        if(!arr2) {
	            arr2 = helperLengthArray;
	        }
	        var i, len = Math.min(arr1.length, arr2.length);
	        var addedLength = 0;
	        for (i = 0; i < len; i += 1) {
	            addedLength += Math.pow(arr2[i] - arr1[i], 2);
	        }
	        return Math.sqrt(addedLength);
	    }
	
	    function normalize(vec) {
	        return div(vec, length(vec));
	    }
	
	    function rgbToHsl(val) {
	        var r = val[0]; var g = val[1]; var b = val[2];
	        var max = Math.max(r, g, b), min = Math.min(r, g, b);
	        var h, s, l = (max + min) / 2;
	
	        if(max == min){
	            h = s = 0; // achromatic
	        }else{
	            var d = max - min;
	            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	            switch(max){
	                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	                case g: h = (b - r) / d + 2; break;
	                case b: h = (r - g) / d + 4; break;
	            }
	            h /= 6;
	        }
	
	        return [h, s, l,val[3]];
	    }
	
	    function hue2rgb(p, q, t){
	        if(t < 0) t += 1;
	        if(t > 1) t -= 1;
	        if(t < 1/6) return p + (q - p) * 6 * t;
	        if(t < 1/2) return q;
	        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
	        return p;
	    }
	
	    function hslToRgb(val){
	        var h = val[0];
	        var s = val[1];
	        var l = val[2];
	
	        var r, g, b;
	
	        if(s === 0){
	            r = g = b = l; // achromatic
	        }else{
	
	            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	            var p = 2 * l - q;
	            r = hue2rgb(p, q, h + 1/3);
	            g = hue2rgb(p, q, h);
	            b = hue2rgb(p, q, h - 1/3);
	        }
	
	        return [r, g , b, val[3]];
	    }
	
	    function linear(t, tMin, tMax, value1, value2){
	        if(value1 === undefined || value2 === undefined){
	            return linear(t,0,1,tMin,tMax);
	        }
	        if(t <= tMin) {
	            return value1;
	        }else if(t >= tMax){
	            return value2;
	        }
	        var perc = tMax === tMin ? 0 : (t-tMin)/(tMax-tMin);
	        if(!value1.length){
	            return value1 + (value2-value1)*perc;
	        }
	        var i, len = value1.length;
	        var arr = createTypedArray('float32', len);
	        for(i=0;i<len;i+=1){
	            arr[i] = value1[i] + (value2[i]-value1[i])*perc;
	        }
	        return arr;
	    }
	    function random(min,max){
	        if(max === undefined){
	            if(min === undefined){
	                min = 0;
	                max = 1;
	            } else {
	                max = min;
	                min = undefined;
	            }
	        }
	        if(max.length){
	            var i, len = max.length;
	            if(!min){
	                min = createTypedArray('float32', len);
	            }
	            var arr = createTypedArray('float32', len);
	            var rnd = BMMath.random();
	            for(i=0;i<len;i+=1){
	                arr[i] = min[i] + rnd*(max[i]-min[i]);
	            }
	            return arr;
	        }
	        if(min === undefined){
	            min = 0;
	        }
	        var rndm = BMMath.random();
	        return min + rndm*(max-min);
	    }
	
	    function createPath(points, inTangents, outTangents, closed) {
	        var i, len = points.length;
	        var path = shape_pool.newElement();
	        path.setPathData(!!closed, len);
	        var arrPlaceholder = [0,0], inVertexPoint, outVertexPoint;
	        for(i = 0; i < len; i += 1) {
	            inVertexPoint = inTangents ? inTangents[i] : arrPlaceholder;
	            outVertexPoint = outTangents ? outTangents[i] : arrPlaceholder;
	            path.setTripleAt(points[i][0],points[i][1],outVertexPoint[0] + points[i][0],outVertexPoint[1] + points[i][1],inVertexPoint[0] + points[i][0],inVertexPoint[1] + points[i][1],i,true);
	        }
	        return path;
	    }
	
	    function initiateExpression(elem,data,property){
	        var val = data.x;
	        var needsVelocity = /velocity(?![\w\d])/.test(val);
	        var _needsRandom = val.indexOf('random') !== -1;
	        var elemType = elem.data.ty;
	        var transform,content,effect;
	        var thisProperty = property;
	        elem.comp.frameDuration = 1/elem.comp.globalData.frameRate;
	        var inPoint = elem.data.ip/elem.comp.globalData.frameRate;
	        var outPoint = elem.data.op/elem.comp.globalData.frameRate;
	        var width = elem.data.sw ? elem.data.sw : 0;
	        var height = elem.data.sh ? elem.data.sh : 0;
	        var loopIn, loop_in, loopOut, loop_out;
	        var toWorld,fromWorld,fromComp,fromCompToSurface,anchorPoint,thisLayer,thisComp,mask,valueAtTime,velocityAtTime;
	
	        var scoped_bm_rt;
	        var expression_function = eval('[function _expression_function(){' + val+';scoped_bm_rt=$bm_rt}' + ']')[0];
	        var numKeys = property.kf ? data.k.length : 0;
	
	        var wiggle = function wiggle(freq,amp){
	            var i,j, len = this.pv.length ? this.pv.length : 1;
	            var addedAmps = createTypedArray('float32', len);
	            freq = 5;
	            var iterations = Math.floor(time*freq);
	            i = 0;
	            j = 0;
	            while(i<iterations){
	                //var rnd = BMMath.random();
	                for(j=0;j<len;j+=1){
	                    addedAmps[j] += -amp + amp*2*BMMath.random();
	                    //addedAmps[j] += -amp + amp*2*rnd;
	                }
	                i += 1;
	            }
	            //var rnd2 = BMMath.random();
	            var periods = time*freq;
	            var perc = periods - Math.floor(periods);
	            var arr = createTypedArray('float32', len);
	            if(len>1){
	                for(j=0;j<len;j+=1){
	                    arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*BMMath.random())*perc;
	                    //arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;
	                    //arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);
	                }
	                return arr;
	            } else {
	                return this.pv + addedAmps[0] + (-amp + amp*2*BMMath.random())*perc;
	            }
	        }.bind(this);
	
	        if(thisProperty.loopIn) {
	            loopIn = thisProperty.loopIn.bind(thisProperty);
	            loop_in = loopIn;
	        }
	
	        if(thisProperty.loopOut) {
	            loopOut = thisProperty.loopOut.bind(thisProperty);
	            loop_out = loopOut;
	        }
	
	        function loopInDuration(type,duration){
	            return loopIn(type,duration,true);
	        }
	
	        function loopOutDuration(type,duration){
	            return loopOut(type,duration,true);
	        }
	
	        if(this.getValueAtTime) {
	            valueAtTime = this.getValueAtTime.bind(this);
	        }
	
	        if(this.getVelocityAtTime) {
	            velocityAtTime = this.getVelocityAtTime.bind(this);
	        }
	
	        var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);
	
	        function lookAt(elem1,elem2){
	            var fVec = [elem2[0]-elem1[0],elem2[1]-elem1[1],elem2[2]-elem1[2]];
	            var pitch = Math.atan2(fVec[0],Math.sqrt(fVec[1]*fVec[1]+fVec[2]*fVec[2]))/degToRads;
	            var yaw = -Math.atan2(fVec[1],fVec[2])/degToRads;
	            return [yaw,pitch,0];
	        }
	
	        function easeOut(t, tMin, tMax, val1, val2){
	            if(val1 === undefined){
	                val1 = tMin;
	                val2 = tMax;
	            } else {
	                t = (t - tMin) / (tMax - tMin);
	            }
	            return -(val2-val1) * t*(t-2) + val1;
	        }
	
	        function easeIn(t, tMin, tMax, val1, val2){
	            if(val1 === undefined){
	                val1 = tMin;
	                val2 = tMax;
	            } else {
	                t = (t - tMin) / (tMax - tMin);
	            }
	            return (val2-val1)*t*t + val1;
	        }
	
	        function nearestKey(time){
	            var i, len = data.k.length,index,keyTime;
	            if(!data.k.length || typeof(data.k[0]) === 'number'){
	                index = 0;
	                keyTime = 0;
	            } else {
	                index = -1;
	                time *= elem.comp.globalData.frameRate;
	                if (time < data.k[0].t) {
	                    index = 1;
	                    keyTime = data.k[0].t;
	                } else {
	                    for(i=0;i<len-1;i+=1){
	                        if(time === data.k[i].t){
	                            index = i + 1;
	                            keyTime = data.k[i].t;
	                            break;
	                        }else if(time>data.k[i].t && time<data.k[i+1].t){
	                            if(time-data.k[i].t > data.k[i+1].t - time){
	                                index = i + 2;
	                                keyTime = data.k[i+1].t;
	                            } else {
	                                index = i + 1;
	                                keyTime = data.k[i].t;
	                            }
	                            break;
	                        }
	                    }
	                    if(index === -1){
	                        index = i + 1;
	                        keyTime = data.k[i].t;
	                    }
	                }
	                
	            }
	            var ob = {};
	            ob.index = index;
	            ob.time = keyTime/elem.comp.globalData.frameRate;
	            return ob;
	        }
	
	        function key(ind){
	            var ob, i, len;
	            if(!data.k.length || typeof(data.k[0]) === 'number'){
	                throw new Error('The property has no keyframe at index ' + ind);
	            }
	            ind -= 1;
	            ob = {
	                time: data.k[ind].t/elem.comp.globalData.frameRate
	            };
	            var arr;
	            if(ind === data.k.length - 1 && !data.k[ind].h){
	                arr = data.k[ind-1].e;
	            }else{
	                arr = data.k[ind].s;
	            }
	            len = arr.length;
	            for(i=0;i<len;i+=1){
	                ob[i] = arr[i];
	            }
	            return ob;
	        }
	
	        function framesToTime(frames, fps) { 
	            if (!fps) {
	                fps = elem.comp.globalData.frameRate;
	            }
	            return frames / fps;
	        }
	
	        function timeToFrames(t, fps) {
	            if (!t && t !== 0) {
	                t = time;
	            }
	            if (!fps) {
	                fps = elem.comp.globalData.frameRate;
	            }
	            return t * fps;
	        }
	
	        function seedRandom(seed){
	            BMMath.seedrandom(randSeed + seed);
	        }
	
	        function sourceRectAtTime() {
	            return elem.sourceRectAtTime();
	        }
	
	        var time, velocity, value, textIndex, textTotal, selectorValue;
	        var index = elem.data.ind;
	        var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
	        var parent;
	        var randSeed = Math.floor(Math.random()*1000000);
	        function executeExpression(_value) {
	            value = _value;
	            if (_needsRandom) {
	                seedRandom(randSeed);
	            }
	            if (this.frameExpressionId === elem.globalData.frameId && this.propType !== 'textSelector') {
	                return value;
	            }
	            if(this.propType === 'textSelector'){
	                textIndex = this.textIndex;
	                textTotal = this.textTotal;
	                selectorValue = this.selectorValue;
	            }
	            if (!thisLayer) {
	                thisLayer = elem.layerInterface;
	                thisComp = elem.comp.compInterface;
	                toWorld = thisLayer.toWorld.bind(thisLayer);
	                fromWorld = thisLayer.fromWorld.bind(thisLayer);
	                fromComp = thisLayer.fromComp.bind(thisLayer);
	                mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
	                fromCompToSurface = fromComp;
	            }
	            if (!transform) {
	                transform = elem.layerInterface("ADBE Transform Group");
	                anchorPoint = transform.anchorPoint;
	            }
	            
	            if (elemType === 4 && !content) {
	                content = thisLayer("ADBE Root Vectors Group");
	            }
	            if (!effect) {
	                effect = thisLayer(4);
	            }
	            hasParent = !!(elem.hierarchy && elem.hierarchy.length);
	            if (hasParent && !parent) {
	                parent = elem.hierarchy[0].layerInterface;
	            }
	            time = this.comp.renderedFrame/this.comp.globalData.frameRate;
	            if (needsVelocity) {
	                velocity = velocityAtTime(time);
	            }
	            expression_function();
	            this.frameExpressionId = elem.globalData.frameId;
	
	            //TODO: Check if it's possible to return on ShapeInterface the .v value
	            if (scoped_bm_rt.propType === "shape") {
	                scoped_bm_rt = shape_pool.clone(scoped_bm_rt.v);
	            }
	            return scoped_bm_rt;
	        }
	        return executeExpression;
	    }
	
	    ob.initiateExpression = initiateExpression;
	    return ob;
	}());
	(function addPropertyDecorator() {
	
	    function getStaticValueAtTime() {
	        return this.pv;
	    }
	
	    function loopOut(type,duration,durationFlag){
	        if(!this.k || !this.keyframes){
	            return this.pv;
	        }
	        type = type ? type.toLowerCase() : '';
	        var currentFrame = this.comp.renderedFrame;
	        var keyframes = this.keyframes;
	        var lastKeyFrame = keyframes[keyframes.length - 1].t;
	        if(currentFrame<=lastKeyFrame){
	            return this.pv;
	        }else{
	            var cycleDuration, firstKeyFrame;
	            if(!durationFlag){
	                if(!duration || duration > keyframes.length - 1){
	                    duration = keyframes.length - 1;
	                }
	                firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
	                cycleDuration = lastKeyFrame - firstKeyFrame;
	            } else {
	                if(!duration){
	                    cycleDuration = Math.max(0,lastKeyFrame - this.elem.data.ip);
	                } else {
	                    cycleDuration = Math.abs(lastKeyFrame - elem.comp.globalData.frameRate*duration);
	                }
	                firstKeyFrame = lastKeyFrame - cycleDuration;
	            }
	            var i, len, ret;
	            if(type === 'pingpong') {
	                var iterations = Math.floor((currentFrame - firstKeyFrame)/cycleDuration);
	                if(iterations % 2 !== 0){
	                    return this.getValueAtTime(((cycleDuration - (currentFrame - firstKeyFrame) % cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
	                }
	            } else if(type === 'offset'){
	                var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
	                var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
	                var current = this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration +  firstKeyFrame) / this.comp.globalData.frameRate, 0);
	                var repeats = Math.floor((currentFrame - firstKeyFrame)/cycleDuration);
	                if(this.pv.length){
	                    ret = new Array(initV.length);
	                    len = ret.length;
	                    for(i=0;i<len;i+=1){
	                        ret[i] = (endV[i]-initV[i])*repeats + current[i];
	                    }
	                    return ret;
	                }
	                return (endV-initV)*repeats + current;
	            } else if(type === 'continue'){
	                var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
	                var nextLastValue = this.getValueAtTime((lastKeyFrame - 0.001) / this.comp.globalData.frameRate, 0);
	                if(this.pv.length){
	                    ret = new Array(lastValue.length);
	                    len = ret.length;
	                    for(i=0;i<len;i+=1){
	                        ret[i] = lastValue[i] + (lastValue[i]-nextLastValue[i])*((currentFrame - lastKeyFrame)/ this.comp.globalData.frameRate)/0.0005;
	                    }
	                    return ret;
	                }
	                return lastValue + (lastValue-nextLastValue)*(((currentFrame - lastKeyFrame))/0.001);
	            }
	            return this.getValueAtTime((((currentFrame - firstKeyFrame) % cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
	        }
	    }
	
	    function loopIn(type,duration, durationFlag) {
	        if(!this.k){
	            return this.pv;
	        }
	        type = type ? type.toLowerCase() : '';
	        var currentFrame = this.comp.renderedFrame;
	        var keyframes = this.keyframes;
	        var firstKeyFrame = keyframes[0].t;
	        if(currentFrame>=firstKeyFrame){
	            return this.pv;
	        }else{
	            var cycleDuration, lastKeyFrame;
	            if(!durationFlag){
	                if(!duration || duration > keyframes.length - 1){
	                    duration = keyframes.length - 1;
	                }
	                lastKeyFrame = keyframes[duration].t;
	                cycleDuration = lastKeyFrame - firstKeyFrame;
	            } else {
	                if(!duration){
	                    cycleDuration = Math.max(0,this.elem.data.op - firstKeyFrame);
	                } else {
	                    cycleDuration = Math.abs(elem.comp.globalData.frameRate*duration);
	                }
	                lastKeyFrame = firstKeyFrame + cycleDuration;
	            }
	            var i, len, ret;
	            if(type === 'pingpong') {
	                var iterations = Math.floor((firstKeyFrame - currentFrame)/cycleDuration);
	                if(iterations % 2 === 0){
	                    return this.getValueAtTime((((firstKeyFrame - currentFrame)%cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
	                }
	            } else if(type === 'offset'){
	                var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
	                var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
	                var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame)%cycleDuration +  firstKeyFrame) / this.comp.globalData.frameRate, 0);
	                var repeats = Math.floor((firstKeyFrame - currentFrame)/cycleDuration)+1;
	                if(this.pv.length){
	                    ret = new Array(initV.length);
	                    len = ret.length;
	                    for(i=0;i<len;i+=1){
	                        ret[i] = current[i]-(endV[i]-initV[i])*repeats;
	                    }
	                    return ret;
	                }
	                return current-(endV-initV)*repeats;
	            } else if(type === 'continue'){
	                var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
	                var nextFirstValue = this.getValueAtTime((firstKeyFrame + 0.001) / this.comp.globalData.frameRate, 0);
	                if(this.pv.length){
	                    ret = new Array(firstValue.length);
	                    len = ret.length;
	                    for(i=0;i<len;i+=1){
	                        ret[i] = firstValue[i] + (firstValue[i]-nextFirstValue[i])*(firstKeyFrame - currentFrame)/0.001;
	                    }
	                    return ret;
	                }
	                return firstValue + (firstValue-nextFirstValue)*(firstKeyFrame - currentFrame)/0.001;
	            }
	            return this.getValueAtTime(((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
	        }
	    }
	
	    function getValueAtTime(frameNum) {
	        if(frameNum !== this._cachingAtTime.lastFrame) {
	            frameNum *= this.elem.globalData.frameRate;
	            frameNum -= this.offsetTime;
	            this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
	            this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
	            this._cachingAtTime.lastFrame = frameNum;
	        }
	        return this._cachingAtTime.value;
	
	    }
	
	    function getVelocityAtTime(frameNum) {
	        if(this.vel !== undefined){
	            return this.vel;
	        }
	        var delta = -0.01;
	        //frameNum += this.elem.data.st;
	        var v1 = this.getValueAtTime(frameNum);
	        var v2 = this.getValueAtTime(frameNum + delta);
	        var velocity;
	        if(v1.length){
	            velocity = createTypedArray('float32', v1.length);
	            var i;
	            for(i=0;i<v1.length;i+=1){
	                //removing frameRate
	                //if needed, don't add it here
	                //velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);
	                velocity[i] = (v2[i] - v1[i])/delta;
	            }
	        } else {
	            velocity = (v2 - v1)/delta;
	        }
	        return velocity;
	    }
	
	    function setGroupProperty(propertyGroup){
	        this.propertyGroup = propertyGroup;
	    }
	
	    function searchExpressions(elem,data,prop){
	        if(data.x){
	            prop.k = true;
	            prop.x = true;
	            prop.initiateExpression = ExpressionManager.initiateExpression;
	            prop.effectsSequence.push(prop.initiateExpression(elem,data,prop).bind(prop));
	        }
	    }
	
	    function getTransformValueAtTime(time) {
	        console.warn('Transform at time not supported');
	    }
	
	    function getTransformStaticValueAtTime(time) {
	
	    }
	
	    var TextExpressionSelectorProp = (function(){
	
	        function getValueProxy(index,total){
	            this.textIndex = index+1;
	            this.textTotal = total;
	            this.getValue();
	            return this.v;
	        }
	
	        return function TextExpressionSelectorProp(elem,data){
	            this.pv = 1;
	            this.comp = elem.comp;
	            this.elem = elem;
	            this.mult = 0.01;
	            this.propType = 'textSelector';
	            this.textTotal = data.totalChars;
	            this.selectorValue = 100;
	            this.lastValue = [1,1,1];
	            searchExpressions.bind(this)(elem,data,this);
	            this.getMult = getValueProxy;
	            this.getVelocityAtTime = getVelocityAtTime;
	            if(this.kf){
	                this.getValueAtTime = getValueAtTime.bind(this);
	            } else {
	                this.getValueAtTime = getStaticValueAtTime.bind(this);
	            }
	            this.setGroupProperty = setGroupProperty;
	        };
	    }());
	
	    var getTransformProperty = TransformPropertyFactory.getTransformProperty;
	    TransformPropertyFactory.getTransformProperty = function(elem, data, container) {
	        var prop = getTransformProperty(elem, data, container);
	        if(prop.dynamicProperties.length) {
	            prop.getValueAtTime = getTransformValueAtTime.bind(prop);
	        } else {
	            prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
	        }
	        prop.setGroupProperty = setGroupProperty;
	        return prop;
	    };
	
	    var propertyGetProp = PropertyFactory.getProp;
	    PropertyFactory.getProp = function(elem,data,type, mult, container){
	        var prop = propertyGetProp(elem,data,type, mult, container);
	        //prop.getVelocityAtTime = getVelocityAtTime;
	        //prop.loopOut = loopOut;
	        //prop.loopIn = loopIn;
	        if(prop.kf){
	            prop.getValueAtTime = getValueAtTime.bind(prop);
	        } else {
	            prop.getValueAtTime = getStaticValueAtTime.bind(prop);
	        }
	        prop.setGroupProperty = setGroupProperty;
	        prop.loopOut = loopOut;
	        prop.loopIn = loopIn;
	        prop.getVelocityAtTime = getVelocityAtTime;
	        prop.numKeys = data.a === 1 ? data.k.length : 0;
	        prop.propertyIndex = data.ix;
	        var value = 0;
	        if(type !== 0) {
	            value = createTypedArray('float32', data.a === 1 ?  data.k[0].s.length : data.k.length);
	        }
	        prop._cachingAtTime = {
	            lastFrame: initialDefaultFrame,
	            lastIndex: 0,
	            value: value
	        };
	        searchExpressions(elem,data,prop);
	        if(prop.k){
	            container.addDynamicProperty(prop);
	        }
	
	        return prop;
	    };
	
	    function getShapeValueAtTime(frameNum) {
	        //For now this caching object is created only when needed instead of creating it when the shape is initialized.
	        if (!this._cachingAtTime) {
	            this._cachingAtTime = {
	                shapeValue: shape_pool.clone(this.pv),
	                lastIndex: 0,
	                lastTime: initialDefaultFrame
	            };
	        }
	        if(frameNum !== this._cachingAtTime.lastTime) {
	            this._cachingAtTime.lastTime = frameNum;
	            frameNum *= this.elem.globalData.frameRate;
	            this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
	        }
	        return this._cachingAtTime.shapeValue;
	    }
	
	    var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
	    var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();
	
	    function ShapeExpressions(){}
	    ShapeExpressions.prototype = {
	        vertices: function(prop, time){
	            var shapePath = this.v;
	            if(time !== undefined) {
	                shapePath = this.getValueAtTime(time, 0);
	            }
	            var i, len = shapePath._length;
	            var vertices = shapePath[prop];
	            var points = shapePath.v;
	            var arr = createSizedArray(len);
	            for(i = 0; i < len; i += 1) {
	                if(prop === 'i' || prop === 'o') {
	                    arr[i] = [vertices[i][0] - points[i][0], vertices[i][1] - points[i][1]];
	                } else {
	                    arr[i] = [vertices[i][0], vertices[i][1]];
	                }
	                
	            }
	            return arr;
	        },
	        points: function(time){
	            return this.vertices('v', time);
	        },
	        inTangents: function(time){
	            return this.vertices('i', time);
	        },
	        outTangents: function(time){
	            return this.vertices('o', time);
	        },
	        isClosed: function(){
	            return this.v.c;
	        },
	        pointOnPath: function(perc, time){
	            var shapePath = this.v;
	            if(time !== undefined) {
	                shapePath = this.getValueAtTime(time, 0);
	            }
	            if(!this._segmentsLength) {
	                this._segmentsLength = bez.getSegmentsLength(shapePath);
	            }
	
	            var segmentsLength = this._segmentsLength;
	            var lengths = segmentsLength.lengths;
	            var lengthPos = segmentsLength.totalLength * perc;
	            var i = 0, len = lengths.length;
	            var j = 0, jLen;
	            var accumulatedLength = 0, pt;
	            while(i < len) {
	                if(accumulatedLength + lengths[i].addedLength > lengthPos) {
	                    var initIndex = i;
	                    var endIndex = (shapePath.c && i === len - 1) ? 0 : i + 1;
	                    var segmentPerc = (lengthPos - accumulatedLength)/lengths[i].addedLength;
	                    pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i]);
	                    break;
	                } else {
	                    accumulatedLength += lengths[i].addedLength;
	                }
	                i += 1;
	            }
	            if(!pt){
	                pt = shapePath.c ? [shapePath.v[0][0],shapePath.v[0][1]]:[shapePath.v[shapePath._length-1][0],shapePath.v[shapePath._length-1][1]];
	            }
	            return pt;
	        },
	        vectorOnPath: function(perc, time, vectorType){
	            //perc doesn't use triple equality because it can be a Number object as well as a primitive.
	            perc = perc == 1 ? this.v.c ? 0 : 0.999 : perc;
	            var pt1 = this.pointOnPath(perc, time);
	            var pt2 = this.pointOnPath(perc + 0.001, time);
	            var xLength = pt2[0] - pt1[0];
	            var yLength = pt2[1] - pt1[1];
	            var magnitude = Math.sqrt(Math.pow(xLength,2) + Math.pow(yLength,2));
	            var unitVector = vectorType === 'tangent' ? [xLength/magnitude, yLength/magnitude] : [-yLength/magnitude, xLength/magnitude];
	            return unitVector;
	        },
	        tangentOnPath: function(perc, time){
	            return this.vectorOnPath(perc, time, 'tangent');
	        },
	        normalOnPath: function(perc, time){
	            return this.vectorOnPath(perc, time, 'normal');
	        },
	        setGroupProperty: setGroupProperty,
	        getValueAtTime: getStaticValueAtTime
	    };
	    extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
	    extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
	    KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
	    KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;
	
	    var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
	    ShapePropertyFactory.getShapeProp = function(elem,data,type, arr, trims){
	        var prop = propertyGetShapeProp(elem,data,type, arr, trims);
	        prop.propertyIndex = data.ix;
	        prop.lock = false;
	        if(type === 3){
	            searchExpressions(elem,data.pt,prop);
	        } else if(type === 4){
	            searchExpressions(elem,data.ks,prop);
	        }
	        if(prop.k){
	            elem.addDynamicProperty(prop);
	        }
	        return prop;
	    };
	
	    var propertyGetTextProp = TextSelectorProp.getTextSelectorProp;
	    TextSelectorProp.getTextSelectorProp = function(elem, data,arr){
	        if(data.t === 1){
	            return new TextExpressionSelectorProp(elem, data,arr);
	        } else {
	            return propertyGetTextProp(elem,data,arr);
	        }
	    };
	}());
	(function addDecorator() {
	
	    function searchExpressions(){
	        if(this.data.d.x){
	            this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this);
	            this.addEffect(this.getExpressionValue.bind(this));
	            return true;
	        }
	    }
	
	    TextProperty.prototype.getExpressionValue = function(currentValue) {
	        var newValue = this.calculateExpression(currentValue.t);
	        currentValue.t = newValue;
	        return currentValue;
	    }
	
	    TextProperty.prototype.searchProperty = function(){
	
	        var isKeyframed = this.searchKeyframes();
	        var hasExpressions = this.searchExpressions();
	        this.kf = isKeyframed || hasExpressions;
	        return this.kf;
	    };
	
	    TextProperty.prototype.searchExpressions = searchExpressions;
	    
	}());
	var ShapeExpressionInterface = (function(){
	
	    function iterateElements(shapes,view, propertyGroup){
	        var arr = [];
	        var i, len = shapes ? shapes.length : 0;
	        for(i=0;i<len;i+=1){
	            if(shapes[i].ty == 'gr'){
	                arr.push(groupInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'fl'){
	                arr.push(fillInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'st'){
	                arr.push(strokeInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'tm'){
	                arr.push(trimInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'tr'){
	                //arr.push(transformInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'el'){
	                arr.push(ellipseInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'sr'){
	                arr.push(starInterfaceFactory(shapes[i],view[i],propertyGroup));
	            } else if(shapes[i].ty == 'sh'){
	                arr.push(pathInterfaceFactory(shapes[i],view[i],propertyGroup));
	            } else if(shapes[i].ty == 'rc'){
	                arr.push(rectInterfaceFactory(shapes[i],view[i],propertyGroup));
	            } else if(shapes[i].ty == 'rd'){
	                arr.push(roundedInterfaceFactory(shapes[i],view[i],propertyGroup));
	            } else if(shapes[i].ty == 'rp'){
	                arr.push(repeaterInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }
	        }
	        return arr;
	    }
	
	    function contentsInterfaceFactory(shape,view, propertyGroup){
	       var interfaces;
	       var interfaceFunction = function _interfaceFunction(value){
	           var i = 0, len = interfaces.length;
	            while(i<len){
	                if(interfaces[i]._name === value || interfaces[i].mn === value || interfaces[i].propertyIndex === value || interfaces[i].ix === value || interfaces[i].ind === value){
	                   return interfaces[i];
	                }
	                i+=1;
	            }
	            if(typeof value === 'number'){
	               return interfaces[value-1];
	            }
	       };
	       interfaceFunction.propertyGroup = function(val){
	           if(val === 1){
	               return interfaceFunction;
	           } else{
	               return propertyGroup(val-1);
	           }
	       };
	       interfaces = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
	       interfaceFunction.numProperties = interfaces.length;
	       interfaceFunction.propertyIndex = shape.cix;
	       interfaceFunction._name = shape.nm;
	
	       return interfaceFunction;
	   }
	
	    function groupInterfaceFactory(shape,view, propertyGroup){
	        var interfaceFunction = function _interfaceFunction(value){
	            switch(value){
	                case 'ADBE Vectors Group':
	                case 'Contents':
	                case 2:
	                    return interfaceFunction.content;
	                //Not necessary for now. Keeping them here in case a new case appears
	                //case 'ADBE Vector Transform Group':
	                //case 3:
	                default:
	                    return interfaceFunction.transform;
	            }
	        };
	        interfaceFunction.propertyGroup = function(val){
	            if(val === 1){
	                return interfaceFunction;
	            } else{
	                return propertyGroup(val-1);
	            }
	        };
	        var content = contentsInterfaceFactory(shape,view,interfaceFunction.propertyGroup);
	        var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1],view.it[view.it.length - 1],interfaceFunction.propertyGroup);
	        interfaceFunction.content = content;
	        interfaceFunction.transform = transformInterface;
	        Object.defineProperty(interfaceFunction, '_name', {
	            get: function(){
	                return shape.nm;
	            }
	        });
	        //interfaceFunction.content = interfaceFunction;
	        interfaceFunction.numProperties = shape.np;
	        interfaceFunction.propertyIndex = shape.ix;
	        interfaceFunction.nm = shape.nm;
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }
	
	    function fillInterfaceFactory(shape,view,propertyGroup){
	        function interfaceFunction(val){
	            if(val === 'Color' || val === 'color'){
	                return interfaceFunction.color;
	            } else if(val === 'Opacity' || val === 'opacity'){
	                return interfaceFunction.opacity;
	            }
	        }
	        Object.defineProperties(interfaceFunction, {
	            'color': {
	                get: function() {
	                    return ExpressionValue(view.c, 1 / view.c.mult, 'color');
	                }
	            },
	            'opacity': {
	                get: function() {
	                    return ExpressionValue(view.o, 100);
	                }
	            },
	            '_name': { value: shape.nm },
	            'mn': { value: shape.mn }
	        });
	
	        view.c.setGroupProperty(propertyGroup);
	        view.o.setGroupProperty(propertyGroup);
	        return interfaceFunction;
	    }
	
	    function strokeInterfaceFactory(shape,view,propertyGroup){
	        function _propertyGroup(val){
	            if(val === 1){
	                return ob;
	            } else{
	                return propertyGroup(val-1);
	            }
	        }
	        function _dashPropertyGroup(val){
	            if(val === 1){
	                return dashOb;
	            } else{
	                return _propertyGroup(val-1);
	            }
	        }
	        function addPropertyToDashOb(i) {
	            Object.defineProperty(dashOb, shape.d[i].nm, {
	                get: function(){
	                    return ExpressionValue(view.d.dataProps[i].p);
	                }
	            });
	        }
	        var i, len = shape.d ? shape.d.length : 0;
	        var dashOb = {};
	        for (i = 0; i < len; i += 1) {
	            addPropertyToDashOb(i);
	            view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);
	        }
	
	        function interfaceFunction(val){
	            if(val === 'Color' || val === 'color'){
	                return interfaceFunction.color;
	            } else if(val === 'Opacity' || val === 'opacity'){
	                return interfaceFunction.opacity;
	            } else if(val === 'Stroke Width' || val === 'stroke width'){
	                return interfaceFunction.strokeWidth;
	            }
	        }
	        Object.defineProperties(interfaceFunction, {
	            'color': {
	                get: function() {
	                    return ExpressionValue(view.c, 1 / view.c.mult, 'color');
	                }
	            },
	            'opacity': {
	                get: function() {
	                    return ExpressionValue(view.o, 100);
	                }
	            },
	            'strokeWidth': {
	                get: function() {
	                    return ExpressionValue(view.w);
	                }
	            },
	            'dash': {
	                get: function() {
	                    return dashOb;
	                }
	            },
	            '_name': { value: shape.nm },
	            'mn': { value: shape.mn }
	        });
	
	        view.c.setGroupProperty(_propertyGroup);
	        view.o.setGroupProperty(_propertyGroup);
	        view.w.setGroupProperty(_propertyGroup);
	        return interfaceFunction;
	    }
	
	    function trimInterfaceFactory(shape,view,propertyGroup){
	        function _propertyGroup(val){
	            if(val == 1){
	                return interfaceFunction;
	            } else {
	                return propertyGroup(--val);
	            }
	        }
	        interfaceFunction.propertyIndex = shape.ix;
	
	        view.s.setGroupProperty(_propertyGroup);
	        view.e.setGroupProperty(_propertyGroup);
	        view.o.setGroupProperty(_propertyGroup);
	
	        function interfaceFunction(val){
	            if(val === shape.e.ix || val === 'End' || val === 'end'){
	                return interfaceFunction.end;
	            }
	            if(val === shape.s.ix){
	                return interfaceFunction.start;
	            }
	            if(val === shape.o.ix){
	                return interfaceFunction.offset;
	            }
	        }
	        interfaceFunction.propertyIndex = shape.ix;
	
	        Object.defineProperties(interfaceFunction, {
	            'start': {
	                get: function() {
	                    return ExpressionValue(view.s, 1 / view.s.mult);
	                }
	            },
	            'end': {
	                get: function() {
	                    return ExpressionValue(view.e, 1 / view.e.mult);
	                }
	            },
	            'offset': {
	                get: function() {
	                    return ExpressionValue(view.o);
	                }
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }
	
	    function transformInterfaceFactory(shape,view,propertyGroup){
	        function _propertyGroup(val){
	            if(val == 1){
	                return interfaceFunction;
	            } else {
	                return propertyGroup(--val);
	            }
	        }
	        view.transform.mProps.o.setGroupProperty(_propertyGroup);
	        view.transform.mProps.p.setGroupProperty(_propertyGroup);
	        view.transform.mProps.a.setGroupProperty(_propertyGroup);
	        view.transform.mProps.s.setGroupProperty(_propertyGroup);
	        view.transform.mProps.r.setGroupProperty(_propertyGroup);
	        if(view.transform.mProps.sk){
	            view.transform.mProps.sk.setGroupProperty(_propertyGroup);
	            view.transform.mProps.sa.setGroupProperty(_propertyGroup);
	        }
	        view.transform.op.setGroupProperty(_propertyGroup);
	
	        function interfaceFunction(value){
	            if(shape.a.ix === value || value === 'Anchor Point'){
	                return interfaceFunction.anchorPoint;
	            }
	            if(shape.o.ix === value || value === 'Opacity'){
	                return interfaceFunction.opacity;
	            }
	            if(shape.p.ix === value || value === 'Position'){
	                return interfaceFunction.position;
	            }
	            if(shape.r.ix === value || value === 'Rotation' || value === 'ADBE Vector Rotation'){
	                return interfaceFunction.rotation;
	            }
	            if(shape.s.ix === value || value === 'Scale'){
	                return interfaceFunction.scale;
	            }
	            if(shape.sk && shape.sk.ix === value || value === 'Skew'){
	                return interfaceFunction.skew;
	            }
	            if(shape.sa && shape.sa.ix === value || value === 'Skew Axis'){
	                return interfaceFunction.skewAxis;
	            }
	
	        }
	        Object.defineProperties(interfaceFunction, {
	            'opacity': {
	                get: function(){
	                    return ExpressionValue(view.transform.mProps.o, 1/view.transform.mProps.o.mult);
	                }
	            },
	            'position': {
	                get: function(){
	                    return ExpressionValue(view.transform.mProps.p);
	                }
	            },
	            'anchorPoint': {
	                get: function(){
	                    return ExpressionValue(view.transform.mProps.a);
	                }
	            },
	            'scale': {
	                get: function(){
	                    return ExpressionValue(view.transform.mProps.s, 1 / view.transform.mProps.s.mult);
	                }
	            },
	            'rotation': {
	                get: function(){
	                    return ExpressionValue(view.transform.mProps.r, 1 / view.transform.mProps.r.mult);
	                }
	            },
	            'skew': {
	                get: function(){
	                    return ExpressionValue(view.transform.mProps.sk);
	                }
	            },
	            'skewAxis': {
	                get: function(){
	                    return ExpressionValue(view.transform.mProps.sa);
	                }
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.ty = 'tr';
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }
	
	    function ellipseInterfaceFactory(shape,view,propertyGroup){
	        function _propertyGroup(val){
	            if(val == 1){
	                return interfaceFunction;
	            } else {
	                return propertyGroup(--val);
	            }
	        }
	        interfaceFunction.propertyIndex = shape.ix;
	        var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
	        prop.s.setGroupProperty(_propertyGroup);
	        prop.p.setGroupProperty(_propertyGroup);
	        function interfaceFunction(value){
	            if(shape.p.ix === value){
	                return interfaceFunction.position;
	            }
	            if(shape.s.ix === value){
	                return interfaceFunction.size;
	            }
	        }
	        Object.defineProperties(interfaceFunction, {
	            'size': {
	                get: function(){
	                    return ExpressionValue(prop.s);
	                }
	            },
	            'position': {
	                get: function(){
	                    return ExpressionValue(prop.p);
	                }
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }
	
	    function starInterfaceFactory(shape,view,propertyGroup){
	        function _propertyGroup(val){
	            if(val == 1){
	                return interfaceFunction;
	            } else {
	                return propertyGroup(--val);
	            }
	        }
	        var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
	        interfaceFunction.propertyIndex = shape.ix;
	        prop.or.setGroupProperty(_propertyGroup);
	        prop.os.setGroupProperty(_propertyGroup);
	        prop.pt.setGroupProperty(_propertyGroup);
	        prop.p.setGroupProperty(_propertyGroup);
	        prop.r.setGroupProperty(_propertyGroup);
	        if(shape.ir){
	            prop.ir.setGroupProperty(_propertyGroup);
	            prop.is.setGroupProperty(_propertyGroup);
	        }
	
	        function interfaceFunction(value){
	            if(shape.p.ix === value){
	                return interfaceFunction.position;
	            }
	            if(shape.r.ix === value){
	                return interfaceFunction.rotation;
	            }
	            if(shape.pt.ix === value){
	                return interfaceFunction.points;
	            }
	            if(shape.or.ix === value || 'ADBE Vector Star Outer Radius' === value){
	                return interfaceFunction.outerRadius;
	            }
	            if(shape.os.ix === value){
	                return interfaceFunction.outerRoundness;
	            }
	            if(shape.ir && (shape.ir.ix === value || 'ADBE Vector Star Inner Radius' === value)){
	                return interfaceFunction.innerRadius;
	            }
	            if(shape.is && shape.is.ix === value){
	                return interfaceFunction.innerRoundness;
	            }
	
	        }
	        Object.defineProperties(interfaceFunction, {
	            'position': {
	                get: function() {
	                    return ExpressionValue(prop.p);
	                }
	            },
	            'rotation': {
	                get: function() {
	                    return ExpressionValue(prop.r, 1 / prop.r.mult);
	                }
	            },
	            'points': {
	                get: function() {
	                    return ExpressionValue(prop.pt);
	                }
	            },
	            'outerRadius': {
	                get: function() {
	                    return ExpressionValue(prop.or);
	                }
	            },
	            'outerRoundness': {
	                get: function(){
	                    return ExpressionValue(prop.os);
	                }
	            },
	            'innerRadius': {
	                get: function(){
	                    if(!prop.ir){
	                        return 0;
	                    }
	                    return ExpressionValue(prop.ir);
	                }
	            },
	            'innerRoundness': {
	                get: function(){
	                    if(!prop.is){
	                        return 0;
	                    }
	                    return ExpressionValue(prop.is, 1 / prop.is.mult);
	                }
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }
	
	    function rectInterfaceFactory(shape,view,propertyGroup){
	        function _propertyGroup(val){
	            if(val == 1){
	                return interfaceFunction;
	            } else {
	                return propertyGroup(--val);
	            }
	        }
	        var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
	        interfaceFunction.propertyIndex = shape.ix;
	        prop.p.setGroupProperty(_propertyGroup);
	        prop.s.setGroupProperty(_propertyGroup);
	        prop.r.setGroupProperty(_propertyGroup);
	
	        function interfaceFunction(value){
	            if(shape.p.ix === value){
	                return interfaceFunction.position;
	            }
	            if(shape.r.ix === value){
	                return interfaceFunction.roundness;
	            }
	            if(shape.s.ix === value || value === 'Size' || value === 'ADBE Vector Rect Size'){
	                return interfaceFunction.size;
	            }
	
	        }
	        Object.defineProperties(interfaceFunction, {
	            'position': {
	                get: function(){
	                    return ExpressionValue(prop.p);
	                }
	            },
	            'roundness': {
	                get: function(){
	                    return ExpressionValue(prop.r);
	                }
	            },
	            'size': {
	                get: function(){
	                    return ExpressionValue(prop.s);
	                }
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }
	
	    function roundedInterfaceFactory(shape,view,propertyGroup){
	        function _propertyGroup(val){
	            if(val == 1){
	                return interfaceFunction;
	            } else {
	                return propertyGroup(--val);
	            }
	        }
	        var prop = view;
	        interfaceFunction.propertyIndex = shape.ix;
	        prop.rd.setGroupProperty(_propertyGroup);
	
	        function interfaceFunction(value){
	            if(shape.r.ix === value || 'Round Corners 1' === value){
	                return interfaceFunction.radius;
	            }
	
	        }
	        Object.defineProperties(interfaceFunction, {
	            'radius': {
	                get: function() {
	                    return ExpressionValue(prop.rd);
	                }
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }
	
	    function repeaterInterfaceFactory(shape,view,propertyGroup){
	        function _propertyGroup(val){
	            if(val == 1){
	                return interfaceFunction;
	            } else {
	                return propertyGroup(--val);
	            }
	        }
	        var prop = view;
	        interfaceFunction.propertyIndex = shape.ix;
	        prop.c.setGroupProperty(_propertyGroup);
	        prop.o.setGroupProperty(_propertyGroup);
	
	        function interfaceFunction(value){
	            if(shape.c.ix === value || 'Copies' === value){
	                return interfaceFunction.copies;
	            } else if(shape.o.ix === value || 'Offset' === value){
	                return interfaceFunction.offset;
	            }
	
	        }
	        Object.defineProperties(interfaceFunction, {
	            'copies': {
	                get: function(){
	                    return ExpressionValue(prop.c);
	                }
	            },
	            'offset': {
	                get: function(){
	                    return ExpressionValue(prop.o);
	                }
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }
	
	    function pathInterfaceFactory(shape,view,propertyGroup){
	        var prop = view.sh;
	        function _propertyGroup(val){
	            if(val == 1){
	                return interfaceFunction;
	            } else {
	                return propertyGroup(--val);
	            }
	        }
	        prop.setGroupProperty(_propertyGroup);
	
	        function interfaceFunction(val){
	            if(val === 'Shape' || val === 'shape' || val === 'Path' || val === 'path' || val === 'ADBE Vector Shape' || val === 2){
	                return interfaceFunction.path;
	            }
	        }
	        Object.defineProperties(interfaceFunction, {
	            'path': {
	                get: function(){
	                    if(prop.k){
	                        prop.getValue();
	                    }
	                    return prop;
	                }
	            },
	            'shape': {
	                get: function(){
	                    if(prop.k){
	                        prop.getValue();
	                    }
	                    return prop;
	                }
	            },
	            '_name': { value: shape.nm },
	            'ix': { value: shape.ix },
	            'mn': { value: shape.mn }
	        });
	        return interfaceFunction;
	    }
	
	    return function(shapes,view,propertyGroup) {
	        var interfaces;
	        function _interfaceFunction(value){
	            if(typeof value === 'number'){
	                return interfaces[value-1];
	            } else {
	                var i = 0, len = interfaces.length;
	                while(i<len){
	                    if(interfaces[i]._name === value){
	                        return interfaces[i];
	                    }
	                    i+=1;
	                }
	            }
	        }
	        _interfaceFunction.propertyGroup = propertyGroup;
	        interfaces = iterateElements(shapes, view, _interfaceFunction);
	        return _interfaceFunction;
	    };
	}());
	
	var TextExpressionInterface = (function(){
		return function(elem){
	        var _prevValue, _sourceText;
	        function _thisLayerFunction(){
	        }
	        Object.defineProperty(_thisLayerFunction, "sourceText", {
	            get: function(){
	                var stringValue = elem.textProperty.currentData.t;
	                if(stringValue !== _prevValue) {
	                    elem.textProperty.currentData.t = _prevValue;
	                    _sourceText = new String(stringValue);
	                    //If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive
	                    _sourceText.value = stringValue ? stringValue : new String(stringValue);
	                }
	                return _sourceText;
	            }
	        });
	        return _thisLayerFunction;
	    };
	}());
	var LayerExpressionInterface = (function (){
	    function toWorld(arr, time){
	        var toWorldMat = new Matrix();
	        toWorldMat.reset();
	        var transformMat;
	        if(time) {
	            //Todo implement value at time on transform properties
	            //transformMat = this._elem.finalTransform.mProp.getValueAtTime(time);
	            transformMat = this._elem.finalTransform.mProp;
	        } else {
	            transformMat = this._elem.finalTransform.mProp;
	        }
	        transformMat.applyToMatrix(toWorldMat);
	        if(this._elem.hierarchy && this._elem.hierarchy.length){
	            var i, len = this._elem.hierarchy.length;
	            for(i=0;i<len;i+=1){
	                this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
	            }
	            return toWorldMat.applyToPointArray(arr[0],arr[1],arr[2]||0);
	        }
	        return toWorldMat.applyToPointArray(arr[0],arr[1],arr[2]||0);
	    }
	    function fromWorld(arr, time){
	        var toWorldMat = new Matrix();
	        toWorldMat.reset();
	        var transformMat;
	        if(time) {
	            //Todo implement value at time on transform properties
	            //transformMat = this._elem.finalTransform.mProp.getValueAtTime(time);
	            transformMat = this._elem.finalTransform.mProp;
	        } else {
	            transformMat = this._elem.finalTransform.mProp;
	        }
	        transformMat.applyToMatrix(toWorldMat);
	        if(this._elem.hierarchy && this._elem.hierarchy.length){
	            var i, len = this._elem.hierarchy.length;
	            for(i=0;i<len;i+=1){
	                this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
	            }
	            return toWorldMat.inversePoint(arr);
	        }
	        return toWorldMat.inversePoint(arr);
	    }
	    function fromComp(arr){
	        var toWorldMat = new Matrix();
	        toWorldMat.reset();
	        this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
	        if(this._elem.hierarchy && this._elem.hierarchy.length){
	            var i, len = this._elem.hierarchy.length;
	            for(i=0;i<len;i+=1){
	                this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
	            }
	            return toWorldMat.inversePoint(arr);
	        }
	        return toWorldMat.inversePoint(arr);
	    }
	
	
	    return function(elem){
	
	        var transformInterface;
	
	        function _registerMaskInterface(maskManager){
	            _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem);
	        }
	        function _registerEffectsInterface(effects){
	            _thisLayerFunction.effect = effects;
	        }
	
	        function _thisLayerFunction(name){
	            switch(name){
	                case "ADBE Root Vectors Group":
	                case "Contents":
	                case 2:
	                    return _thisLayerFunction.shapeInterface;
	                case 1:
	                case 6:
	                case "Transform":
	                case "transform":
	                case "ADBE Transform Group":
	                    return transformInterface;
	                case 4:
	                case "ADBE Effect Parade":
	                    return _thisLayerFunction.effect;
	            }
	        }
	        _thisLayerFunction.toWorld = toWorld;
	        _thisLayerFunction.fromWorld = fromWorld;
	        _thisLayerFunction.toComp = toWorld;
	        _thisLayerFunction.fromComp = fromComp;
	        _thisLayerFunction.sourceRectAtTime = elem.sourceRectAtTime.bind(elem);
	        _thisLayerFunction._elem = elem;
	        transformInterface = TransformExpressionInterface(elem.finalTransform.mProp);
	        var anchorPointDescriptor = getDescriptor(transformInterface, 'anchorPoint');
	        Object.defineProperties(_thisLayerFunction,{
	            hasParent: {
	                get: function(){
	                    return elem.hierarchy.length;
	                }
	            },
	            parent: {
	                get: function(){
	                    return elem.hierarchy[0].layerInterface;
	                }
	            },
	            rotation: getDescriptor(transformInterface, 'rotation'),
	            scale: getDescriptor(transformInterface, 'scale'),
	            position: getDescriptor(transformInterface, 'position'),
	            opacity: getDescriptor(transformInterface, 'opacity'),
	            anchorPoint: anchorPointDescriptor,
	            anchor_point: anchorPointDescriptor,
	            transform: {
	                get: function () {
	                    return transformInterface;
	                }
	            },
	            active: {
	                get: function(){
	                    return elem.isInRange;
	                }
	            }
	        });
	
	        _thisLayerFunction.startTime = elem.data.st;
	        _thisLayerFunction.index = elem.data.ind;
	        _thisLayerFunction.source = elem.data.refId;
	        _thisLayerFunction.height = elem.data.ty === 0 ? elem.data.h : 100;
	        _thisLayerFunction.width = elem.data.ty === 0 ? elem.data.w : 100;
	
	        _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
	        _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
	        return _thisLayerFunction;
	    };
	}());
	
	var CompExpressionInterface = (function (){
	    return function(comp){
	        function _thisLayerFunction(name){
	            var i=0, len = comp.layers.length;
	            while(i<len){
	                if(comp.layers[i].nm === name || comp.layers[i].ind === name){
	                    return comp.elements[i].layerInterface;
	                }
	                i += 1;
	            }
	            return {active:false};
	        }
	        Object.defineProperty(_thisLayerFunction, "_name", { value:comp.data.nm });
	        _thisLayerFunction.layer = _thisLayerFunction;
	        _thisLayerFunction.pixelAspect = 1;
	        _thisLayerFunction.height = comp.globalData.compSize.h;
	        _thisLayerFunction.width = comp.globalData.compSize.w;
	        _thisLayerFunction.pixelAspect = 1;
	        _thisLayerFunction.frameDuration = 1/comp.globalData.frameRate;
	        return _thisLayerFunction;
	    };
	}());
	var TransformExpressionInterface = (function (){
	    return function(transform){
	        function _thisFunction(name){
	            switch(name){
	                case "scale":
	                case "Scale":
	                case "ADBE Scale":
	                case 6:
	                    return _thisFunction.scale;
	                case "rotation":
	                case "Rotation":
	                case "ADBE Rotation":
	                case "ADBE Rotate Z":
	                case 10:
	                    return _thisFunction.rotation;
	                case "ADBE Rotate X":
	                    return _thisFunction.xRotation;
	                case "ADBE Rotate Y":
	                    return _thisFunction.yRotation;
	                case "position":
	                case "Position":
	                case "ADBE Position":
	                case 2:
	                    return _thisFunction.position;
	                case 'ADBE Position_0':
	                    return _thisFunction.xPosition;
	                case 'ADBE Position_1':
	                    return _thisFunction.yPosition;
	                case 'ADBE Position_2':
	                    return _thisFunction.zPosition;
	                case "anchorPoint":
	                case "AnchorPoint":
	                case "Anchor Point":
	                case "ADBE AnchorPoint":
	                case 1:
	                    return _thisFunction.anchorPoint;
	                case "opacity":
	                case "Opacity":
	                case 11:
	                    return _thisFunction.opacity;
	            }
	        }
	
	        Object.defineProperty(_thisFunction, "rotation", {
	            get: function(){
	                if(transform.r) {
	                    return ExpressionValue(transform.r, 1/degToRads);
	                } else {
	                    return ExpressionValue(transform.rz, 1/degToRads);
	                }
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "xRotation", {
	            get: function(){
	                    return ExpressionValue(transform.rx, 1/degToRads);
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "yRotation", {
	            get: function(){
	                    return ExpressionValue(transform.ry, 1/degToRads);
	            }
	        });
	        Object.defineProperty(_thisFunction, "scale", {
	            get: function () {
	                return ExpressionValue(transform.s, 100);
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "position", {
	            get: function () {
	                if(transform.p) {
	                    return ExpressionValue(transform.p);
	                } else {
	                    return [transform.px.v, transform.py.v, transform.pz ? transform.pz.v : 0];
	                }
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "xPosition", {
	            get: function () {
	                return ExpressionValue(transform.px);
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "yPosition", {
	            get: function () {
	                return ExpressionValue(transform.py);
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "zPosition", {
	            get: function () {
	                return ExpressionValue(transform.pz);
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "anchorPoint", {
	            get: function () {
	                return ExpressionValue(transform.a);
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "opacity", {
	            get: function () {
	                return ExpressionValue(transform.o, 100);
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "skew", {
	            get: function () {
	                return ExpressionValue(transform.sk);
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "skewAxis", {
	            get: function () {
	                return ExpressionValue(transform.sa);
	            }
	        });
	
	        Object.defineProperty(_thisFunction, "orientation", {
	            get: function () {
	                return ExpressionValue(transform.or);
	            }
	        });
	
	        return _thisFunction;
	    };
	}());
	var ProjectInterface = (function (){
	
	    function registerComposition(comp){
	        this.compositions.push(comp);
	    }
	
	    return function(){
	        function _thisProjectFunction(name){
	            var i = 0, len = this.compositions.length;
	            while(i<len){
	                if(this.compositions[i].data && this.compositions[i].data.nm === name){
	                    if(this.compositions[i].prepareFrame) {
	                        this.compositions[i].prepareFrame(this.compositions[i].data.xt ? this.currentFrame : this.compositions[i].renderedFrame);
	                    }
	                    return this.compositions[i].compInterface;
	                }
	                i+=1;
	            }
	        }
	
	        _thisProjectFunction.compositions = [];
	        _thisProjectFunction.currentFrame = 0;
	
	        _thisProjectFunction.registerComposition = registerComposition;
	
	
	
	        return _thisProjectFunction;
	    };
	}());
	var EffectsExpressionInterface = (function (){
	    var ob = {
	        createEffectsInterface: createEffectsInterface
	    };
	
	    function createEffectsInterface(elem, propertyGroup){
	        if(elem.effectsManager){
	
	            var effectElements = [];
	            var effectsData = elem.data.ef;
	            var i, len = elem.effectsManager.effectElements.length;
	            for(i=0;i<len;i+=1){
	                effectElements.push(createGroupInterface(effectsData[i],elem.effectsManager.effectElements[i],propertyGroup,elem));
	            }
	
	            return function(name){
	                var effects = elem.data.ef, i = 0, len = effects.length;
	                while(i<len) {
	                    if(name === effects[i].nm || name === effects[i].mn || name === effects[i].ix){
	                        return effectElements[i];
	                    }
	                    i += 1;
	                }
	            };
	        }
	    }
	
	    function createGroupInterface(data,elements, propertyGroup, elem){
	        var effectElements = [];
	        var i, len = data.ef.length;
	        for(i=0;i<len;i+=1){
	            if(data.ef[i].ty === 5){
	                effectElements.push(createGroupInterface(data.ef[i],elements.effectElements[i],elements.effectElements[i].propertyGroup, elem));
	            } else {
	                effectElements.push(createValueInterface(elements.effectElements[i],data.ef[i].ty, elem, _propertyGroup));
	            }
	        }
	
	        function _propertyGroup(val) {
	            if(val === 1){
	               return groupInterface;
	            } else{
	               return propertyGroup(val-1);
	            }
	        }
	
	        var groupInterface = function(name){
	            var effects = data.ef, i = 0, len = effects.length;
	            while(i<len) {
	                if(name === effects[i].nm || name === effects[i].mn || name === effects[i].ix){
	                    if(effects[i].ty === 5){
	                        return effectElements[i];
	                    } else {
	                        return effectElements[i]();
	                    }
	                }
	                i += 1;
	            }
	            return effectElements[0]();
	        };
	
	        groupInterface.propertyGroup = _propertyGroup;
	
	        if(data.mn === 'ADBE Color Control'){
	            Object.defineProperty(groupInterface, 'color', {
	                get: function(){
	                    return effectElements[0]();
	                }
	            });
	        }
	        Object.defineProperty(groupInterface, 'numProperties', {
	            get: function(){
	                return data.np;
	            }
	        });
	        groupInterface.active = data.en !== 0;
	        return groupInterface;
	    }
	
	    function createValueInterface(element, type, elem, propertyGroup){
	        function interfaceFunction(){
	            if(type === 10){
	                return elem.comp.compInterface(element.p.v);
	            }
	            return ExpressionValue(element.p);
	        }
	
	        if(element.p.setGroupProperty) {
	            element.p.setGroupProperty(propertyGroup);
	        }
	
	        return interfaceFunction;
	    }
	
	    return ob;
	
	}());
	var MaskManagerInterface = (function(){
	
		function MaskInterface(mask, data){
			this._mask = mask;
			this._data = data;
		}
		Object.defineProperty(MaskInterface.prototype, 'maskPath', {
	        get: function(){
	                if(this._mask.prop.k){
	                    this._mask.prop.getValue();
	                }
	                return this._mask.prop;
	            }
	        });
	
		var MaskManager = function(maskManager, elem){
			var _maskManager = maskManager;
			var _elem = elem;
			var _masksInterfaces = createSizedArray(maskManager.viewData.length);
			var i, len = maskManager.viewData.length;
			for(i = 0; i < len; i += 1) {
				_masksInterfaces[i] = new MaskInterface(maskManager.viewData[i], maskManager.masksProperties[i]);
			}
	
			var maskFunction = function(name){
				i = 0;
			    while(i<len){
			        if(maskManager.masksProperties[i].nm === name){
			            return _masksInterfaces[i];
			        }
			        i += 1;
			    }
			};
			return maskFunction;
		};
		return MaskManager;
	}());
	
	var ExpressionValue = (function() {
		return function(elementProp, mult, type) {
	        mult = mult || 1;
	        var expressionValue, arrayValue;
	
			if (elementProp.k) {
	            elementProp.getValue();
	        }
	        var i, len, arrValue, val;
	        if (type) {
	        	if(type === 'color') {
	        		len = 4;
	                expressionValue = createTypedArray('float32', len);
	                arrValue = createTypedArray('float32', len);
			        for (i = 0; i < len; i += 1) {
			            expressionValue[i] = arrValue[i] = (i < 3) ? elementProp.v[i] * mult : 1;
			        }
		        	expressionValue.value = arrValue;
	        	}
	        } else if (elementProp.propType === 'unidimensional'){
	            val = elementProp.v * mult;
	            expressionValue = new Number(val);
	            expressionValue.value = val;
	        } else {
	        	len = elementProp.pv.length;
	            expressionValue = createTypedArray('float32', len);
	            arrValue = createTypedArray('float32', len);
		        for (i = 0; i < len; i += 1) {
		            expressionValue[i] = arrValue[i] = elementProp.v[i] * mult;
		        }
		        expressionValue.value = arrValue;
	        }
	        
	        expressionValue.numKeys = elementProp.keyframes ? elementProp.keyframes.length : 0;
	        expressionValue.key = function(pos) {
	            if (!expressionValue.numKeys) {
	                return 0;
	            } else {
	                return elementProp.keyframes[pos-1].t;
	            }
	        };
	        expressionValue.valueAtTime = elementProp.getValueAtTime;
	        expressionValue.propertyGroup = elementProp.propertyGroup;
	        return expressionValue;
		};
	}());
	function SliderEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
	}
	function AngleEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
	}
	function ColorEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,1,0,container);
	}
	function PointEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,1,0,container);
	}
	function LayerIndexEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
	}
	function MaskIndexEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
	}
	function CheckboxEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
	}
	function NoValueEffect(){
	    this.p = {};
	}
	function EffectsManager(data,element){
	    var effects = data.ef || [];
	    this.effectElements = [];
	    var i,len = effects.length;
	    var effectItem;
	    for(i=0;i<len;i++) {
	        effectItem = new GroupEffect(effects[i],element);
	        this.effectElements.push(effectItem);
	    }
	}
	
	function GroupEffect(data,element){
	    this.container = element;
	    this.dynamicProperties = [];
	    this.init(data,element);
	}
	
	GroupEffect.prototype.getValue = function(){
	    this._mdf = false;
	    var i, len = this.dynamicProperties.length;
	    for(i=0;i<len;i+=1){
	        this.dynamicProperties[i].getValue();
	        if(this.dynamicProperties[i]._mdf) {
	            this._mdf = true;
	        }
	    }
	};
	
	GroupEffect.prototype.addDynamicProperty = addDynamicProperty;
	
	GroupEffect.prototype.init = function(data,element){
	    this.data = data;
	    this._mdf = false;
	    this.effectElements = [];
	    var i, len = this.data.ef.length;
	    var eff, effects = this.data.ef;
	    for(i=0;i<len;i+=1){
	        eff = null;
	        switch(effects[i].ty){
	            case 0:
	                eff = new SliderEffect(effects[i],element,this);
	                break;
	            case 1:
	                eff = new AngleEffect(effects[i],element,this);
	                break;
	            case 2:
	                eff = new ColorEffect(effects[i],element,this);
	                break;
	            case 3:
	                eff = new PointEffect(effects[i],element,this);
	                break;
	            case 4:
	            case 7:
	                eff = new CheckboxEffect(effects[i],element,this);
	                break;
	            case 10:
	                eff = new LayerIndexEffect(effects[i],element,this);
	                break;
	            case 11:
	                eff = new MaskIndexEffect(effects[i],element,this);
	                break;
	            case 5:
	                eff = new EffectsManager(effects[i],element,this);
	                break;
	            //case 6:
	            default:
	                eff = new NoValueEffect(effects[i],element,this);
	                break;
	        }
	        if(eff) {
	            this.effectElements.push(eff);
	        }
	    }
	};
	    var lottiejs = {};
	
	    function setLocationHref (href) {
	        locationHref = href;
	    }
	    function play(animation){
	        animationManager.play(animation);
	    }
	
	    function pause(animation) {
	        animationManager.pause(animation);
	    }
	
	    function togglePause(animation) {
	        animationManager.togglePause(animation);
	    }
	
	    function setSpeed(value, animation) {
	        animationManager.setSpeed(value, animation);
	    }
	
	    function setDirection(value, animation) {
	        animationManager.setDirection(value, animation);
	    }
	
	    function stop(animation) {
	        animationManager.stop(animation);
	    }
	
	    function searchAnimations() {
	        if (standalone === true) {
	            animationManager.searchAnimations(animationData, standalone, renderer);
	        } else {
	            animationManager.searchAnimations();
	        }
	    }
	
	    function registerAnimation(elem) {
	        return animationManager.registerAnimation(elem);
	    }
	
	    function resize() {
	        animationManager.resize();
	    }
	
	    /*function start() {
	        animationManager.start();
	    }*/
	
	    function goToAndStop(val, isFrame, animation) {
	        animationManager.goToAndStop(val, isFrame, animation);
	    }
	
	    function setSubframeRendering(flag) {
	        subframeEnabled = flag;
	    }
	
	    function loadAnimation(params) {
	        if (standalone === true) {
	            params.animationData = JSON.parse(animationData);
	        }
	        return animationManager.loadAnimation(params);
	    }
	
	    function destroy(animation) {
	        return animationManager.destroy(animation);
	    }
	
	    function setQuality(value) {
	        if (typeof value === 'string') {
	            switch (value) {
	                case 'high':
	                    defaultCurveSegments = 200;
	                    break;
	                case 'medium':
	                    defaultCurveSegments = 50;
	                    break;
	                case 'low':
	                    defaultCurveSegments = 10;
	                    break;
	            }
	        } else if (!isNaN(value) && value > 1) {
	            defaultCurveSegments = value;
	        }
	        if (defaultCurveSegments >= 50) {
	            roundValues(false);
	        } else {
	            roundValues(true);
	        }
	    }
	
	    function inBrowser() {
	        return typeof navigator !== 'undefined';
	    }
	
	    function installPlugin(type, plugin) {
	        if (type === 'expressions') {
	            expressionsPlugin = plugin;
	        }
	    }
	
	    function getFactory(name) {
	        switch (name) {
	            case "propertyFactory":
	                return PropertyFactory;
	            case "shapePropertyFactory":
	                return ShapePropertyFactory;
	            case "matrix":
	                return Matrix;
	        }
	    }
	    lottiejs.play = play;
	    lottiejs.pause = pause;
	    lottiejs.setLocationHref = setLocationHref;
	    lottiejs.togglePause = togglePause;
	    lottiejs.setSpeed = setSpeed;
	    lottiejs.setDirection = setDirection;
	    lottiejs.stop = stop;
	    lottiejs.searchAnimations = searchAnimations;
	    lottiejs.registerAnimation = registerAnimation;
	    lottiejs.loadAnimation = loadAnimation;
	    lottiejs.setSubframeRendering = setSubframeRendering;
	    lottiejs.resize = resize;
	    //lottiejs.start = start;
	    lottiejs.goToAndStop = goToAndStop;
	    lottiejs.destroy = destroy;
	    lottiejs.setQuality = setQuality;
	    lottiejs.inBrowser = inBrowser;
	    lottiejs.installPlugin = installPlugin;
	    lottiejs.__getFactory = getFactory;
	    lottiejs.version = '5.1.10';
	
	    function checkReady() {
	        if (document.readyState === "complete") {
	            clearInterval(readyStateCheckInterval);
	            searchAnimations();
	        }
	    }
	
	    function getQueryVariable(variable) {
	        var vars = queryString.split('&');
	        for (var i = 0; i < vars.length; i++) {
	            var pair = vars[i].split('=');
	            if (decodeURIComponent(pair[0]) == variable) {
	                return decodeURIComponent(pair[1]);
	            }
	        }
	    }
	    var standalone = '__[STANDALONE]__';
	    var animationData = '__[ANIMATIONDATA]__';
	    var renderer = '';
	    if (standalone) {
	        var scripts = document.getElementsByTagName('script');
	        var index = scripts.length - 1;
	        var myScript = scripts[index] || {
	            src: ''
	        };
	        var queryString = myScript.src.replace(/^[^\?]+\??/, '');
	        renderer = getQueryVariable('renderer');
	    }
	    var readyStateCheckInterval = setInterval(checkReady, 100);
	    return lottiejs;
	}));

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends2 = __webpack_require__(8);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _jquery = __webpack_require__(2);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _ytPlayer = __webpack_require__(64);
	
	var _ytPlayer2 = _interopRequireDefault(_ytPlayer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Video = function () {
		function Video(options) {
			var _this = this;
	
			(0, _classCallCheck3.default)(this, Video);
	
			this.initPlayer = function (id, block) {
				var selector = _this.options.selector;
	
				var $block = (0, _jquery2.default)(block);
	
				_this.players[id] = {
					playing: false,
					$block: $block
				};
	
				var $overlay = $block.find(selector + '__overlay');
				var $player = $block.find(selector + '__player');
				var videoId = $player.data('video-id');
	
				_this.players[id].player = new _ytPlayer2.default($player.get(0), {
					width: 946,
					height: 532,
					controls: false,
					fullscreen: false,
					annotations: false,
					related: false,
					info: false
				});
	
				_this.players[id].player.load(videoId, false);
				_this.players[id].player.on('ended', _this.onVideoEnd(_this.players[id]));
				$overlay.click(_this.onOverlayClick(_this.players[id]));
			};
	
			this.onOverlayClick = function (currentPlayer) {
				return function () {
					var elClass = _this.options.elClass;
					var player = currentPlayer.player,
					    $block = currentPlayer.$block,
					    playing = currentPlayer.playing;
	
					$block.addClass(elClass + '_started');
	
					if (playing) {
						player.pause();
						$block.addClass(elClass + '_paused');
					} else {
						player.play();
						$block.removeClass(elClass + '_paused');
					}
					currentPlayer.playing = !playing;
				};
			};
	
			this.onVideoEnd = function (currentPlayer) {
				return function () {
					var elClass = _this.options.elClass;
	
					currentPlayer.playing = false;
					currentPlayer.$block.removeClass(elClass + '_started');
				};
			};
	
			this.options = (0, _extends3.default)({}, this.constructor.defaultOptions, options);
			this.players = [];
	
			(0, _jquery2.default)(this.options.selector).each(this.initPlayer);
		}
	
		(0, _createClass3.default)(Video, null, [{
			key: 'init',
			value: function init(options) {
				var instance = new Video(options);
	
				return instance;
			}
		}]);
		return Video;
	}();
	
	Video.defaultOptions = {
		selector: '.video',
		elClass: 'video'
	};
	exports.default = Video;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _from = __webpack_require__(65);
	
	var _from2 = _interopRequireDefault(_from);
	
	var _assign = __webpack_require__(9);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _getPrototypeOf = __webpack_require__(87);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(46);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(47);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(91);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(113);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* eslint-disable */
	var EventEmitter = __webpack_require__(121).EventEmitter;
	var loadScript = __webpack_require__(122);
	
	var YOUTUBE_IFRAME_API_SRC = 'https://www.youtube.com/iframe_api';
	
	var YOUTUBE_STATES = {
		'-1': 'unstarted',
		'0': 'ended',
		'1': 'playing',
		'2': 'paused',
		'3': 'buffering',
		'5': 'cued'
	};
	
	var YOUTUBE_ERROR = {
		// The request contains an invalid parameter value. For example, this error
		// occurs if you specify a videoId that does not have 11 characters, or if the
		// videoId contains invalid characters, such as exclamation points or asterisks.
		INVALID_PARAM: 2,
	
		// The requested content cannot be played in an HTML5 player or another error
		// related to the HTML5 player has occurred.
		HTML5_ERROR: 5,
	
		// The video requested was not found. This error occurs when a video has been
		// removed (for any reason) or has been marked as private.
		NOT_FOUND: 100,
	
		// The owner of the requested video does not allow it to be played in embedded
		// players.
		UNPLAYABLE_1: 101,
	
		// This error is the same as 101. It's just a 101 error in disguise!
		UNPLAYABLE_2: 150
	};
	
	var loadIframeAPICallbacks = [];
	
	/**
	 * YouTube Player. Exposes a better API, with nicer events.
	 * @param {HTMLElement|selector} element
	 */
	
	var YouTubePlayer = function (_EventEmitter) {
		(0, _inherits3.default)(YouTubePlayer, _EventEmitter);
	
		function YouTubePlayer(element, opts) {
			(0, _classCallCheck3.default)(this, YouTubePlayer);
	
			var _this = (0, _possibleConstructorReturn3.default)(this, (YouTubePlayer.__proto__ || (0, _getPrototypeOf2.default)(YouTubePlayer)).call(this));
	
			var elem = typeof element === 'string' ? document.querySelector(element) : element;
	
			if (elem.id) {
				_this._id = elem.id; // use existing element id
			} else {
				_this._id = elem.id = 'ytplayer-' + Math.random().toString(16).slice(2, 8);
			}
	
			_this._opts = (0, _assign2.default)({
				width: 640,
				height: 360,
				autoplay: false,
				captions: undefined,
				controls: true,
				keyboard: true,
				fullscreen: true,
				annotations: true,
				modestBranding: false,
				related: true,
				info: true,
				timeupdateFrequency: 1000
			}, opts);
	
			_this.videoId = null;
			_this.destroyed = false;
	
			_this._api = null;
			_this._player = null;
			_this._ready = false; // is player ready?
			_this._queue = [];
	
			_this._interval = null;
	
			// Setup listeners for 'timeupdate' events. The YouTube Player does not fire
			// 'timeupdate' events, so they are simulated using a setInterval().
			_this._startInterval = _this._startInterval.bind(_this);
			_this._stopInterval = _this._stopInterval.bind(_this);
	
			_this.on('unstarted', _this._stopInterval);
			_this.on('ended', _this._stopInterval);
			_this.on('playing', _this._startInterval);
			_this.on('paused', _this._stopInterval);
			_this.on('buffering', _this._stopInterval);
	
			_this._loadIframeAPI(function (err, api) {
				if (err) return _this._destroy(new Error('YouTube Iframe API failed to load'));
				_this._api = api;
	
				// If load(videoId) was called before Iframe API loaded, ensure it gets
				// called again now
				if (_this.videoId) _this.load(_this.videoId);
			});
			return _this;
		}
	
		(0, _createClass3.default)(YouTubePlayer, [{
			key: 'load',
			value: function load(videoId, autoplay) {
				if (this.destroyed) return;
				if (autoplay == null) autoplay = true;
	
				this.videoId = videoId;
	
				// If the Iframe API is not ready yet, do nothing. Once the Iframe API is
				// ready, `load(this.videoId)` will be called.
				if (!this._api) return;
	
				// If there is no player instance, create one.
				if (!this._player) {
					this._createPlayer(videoId);
					this.emit('unstarted');
					this.emit('buffering');
					return;
				}
	
				// If the player instance is not ready yet, do nothing. Once the player
				// instance is ready, `load(this.videoId)` will be called. This ensures that
				// the last call to `load()` is the one that takes effect.
				if (!this._ready) return;
	
				// If the player instance is ready, load the given `videoId`.
				if (autoplay) {
					this._player.loadVideoById(videoId);
				} else {
					this._player.cueVideoById(videoId);
				}
			}
		}, {
			key: 'play',
			value: function play() {
				if (this._ready) this._player.playVideo();else this._queueCommand('play');
			}
		}, {
			key: 'pause',
			value: function pause() {
				if (this._ready) this._player.pauseVideo();else this._queueCommand('pause');
			}
		}, {
			key: 'stop',
			value: function stop() {
				if (this._ready) this._player.stopVideo();else this._queueCommand('stop');
			}
		}, {
			key: 'seek',
			value: function seek(seconds) {
				if (this._ready) this._player.seekTo(seconds, true);else this._queueCommand('seek', seconds);
			}
		}, {
			key: 'setVolume',
			value: function setVolume(volume) {
				if (this._ready) this._player.setVolume(volume);else this._queueCommand('setVolume', volume);
			}
		}, {
			key: 'getVolume',
			value: function getVolume() {
				return this._ready && this._player.getVolume() || 0;
			}
		}, {
			key: 'mute',
			value: function mute() {
				if (this._ready) this._player.mute();else this._queueCommand('mute');
			}
		}, {
			key: 'unMute',
			value: function unMute() {
				if (this._ready) this._player.unMute();else this._queueCommand('unMute');
			}
		}, {
			key: 'isMuted',
			value: function isMuted() {
				return this._ready && this._player.isMuted() || false;
			}
		}, {
			key: 'setPlaybackRate',
			value: function setPlaybackRate(rate) {
				if (this._ready) this._player.setPlaybackRate(rate);else this._queueCommand('setPlaybackRate', rate);
			}
		}, {
			key: 'getPlaybackRate',
			value: function getPlaybackRate() {
				return this._ready && this._player.getPlaybackRate() || 1;
			}
		}, {
			key: 'getAvailablePlaybackRates',
			value: function getAvailablePlaybackRates() {
				return this._ready && this._player.getAvailablePlaybackRates() || [1];
			}
		}, {
			key: 'getDuration',
			value: function getDuration() {
				return this._ready && this._player.getDuration() || 0;
			}
		}, {
			key: 'getProgress',
			value: function getProgress() {
				return this._ready && this._player.getVideoLoadedFraction() || 0;
			}
		}, {
			key: 'getState',
			value: function getState() {
				return this._ready && YOUTUBE_STATES[this._player.getPlayerState()] || 'unstarted';
			}
		}, {
			key: 'getCurrentTime',
			value: function getCurrentTime() {
				return this._ready && this._player.getCurrentTime() || 0;
			}
		}, {
			key: 'destroy',
			value: function destroy() {
				this._destroy();
			}
		}, {
			key: '_destroy',
			value: function _destroy(err) {
				if (this.destroyed) return;
				this.destroyed = true;
	
				if (this._player) {
					this._player.stopVideo();
					this._player.destroy();
				}
	
				this.videoId = null;
	
				this._id = null;
				this._opts = null;
				this._api = null;
				this._player = null;
				this._ready = false;
				this._queue = null;
	
				this._stopInterval();
				this._interval = false;
	
				this.removeListener('playing', this._startInterval);
				this.removeListener('paused', this._stopInterval);
				this.removeListener('buffering', this._stopInterval);
				this.removeListener('unstarted', this._stopInterval);
				this.removeListener('ended', this._stopInterval);
	
				if (err) this.emit('error', err);
			}
		}, {
			key: '_queueCommand',
			value: function _queueCommand(command) {
				if (this.destroyed) return;
	
				for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
					args[_key - 1] = arguments[_key];
				}
	
				this._queue.push([command, args]);
			}
		}, {
			key: '_flushQueue',
			value: function _flushQueue() {
				while (this._queue.length) {
					var command = this._queue.shift();
					this[command[0]].apply(this, command[1]);
				}
			}
		}, {
			key: '_loadIframeAPI',
			value: function _loadIframeAPI(cb) {
				// If API is loaded, there is nothing else to do
				if (window.YT && typeof window.YT.Player === 'function') {
					return cb(null, window.YT);
				}
	
				// Otherwise, queue callback until API is loaded
				loadIframeAPICallbacks.push(cb);
	
				var scripts = (0, _from2.default)(document.getElementsByTagName('script'));
				var isLoading = scripts.some(function (script) {
					return script.src === YOUTUBE_IFRAME_API_SRC;
				});
	
				// If API <script> tag is not present in the page, inject it. Ensures that
				// if user includes a hardcoded <script> tag in HTML for performance, another
				// one will not be added
				if (!isLoading) {
					loadScript(YOUTUBE_IFRAME_API_SRC, function (err) {
						if (err) {
							while (loadIframeAPICallbacks.length) {
								var loadCb = loadIframeAPICallbacks.shift();
								loadCb(err);
							}
						}
					});
				}
	
				// If ready function is not present, create it
				if (typeof window.onYouTubeIframeAPIReady !== 'function') {
					window.onYouTubeIframeAPIReady = function () {
						while (loadIframeAPICallbacks.length) {
							var loadCb = loadIframeAPICallbacks.shift();
							loadCb(null, window.YT);
						}
					};
				}
			}
		}, {
			key: '_createPlayer',
			value: function _createPlayer(videoId) {
				var _this2 = this;
	
				if (this.destroyed) return;
	
				var opts = this._opts;
	
				this._player = new this._api.Player(this._id, {
					width: opts.width,
					height: opts.height,
					videoId: videoId,
					playerVars: {
						// This parameter specifies whether the initial video will automatically
						// start to play when the player loads. Supported values are 0 or 1. The
						// default value is 0.
						autoplay: opts.autoplay ? 1 : 0,
	
						// Setting the parameter's value to 1 causes closed captions to be shown
						// by default, even if the user has turned captions off. The default
						// behavior is based on user preference.
						cc_load_policy: opts.captions != null ? opts.captions ? 1 : 0 : undefined, // default to not setting this option
	
						// This parameter indicates whether the video player controls are
						// displayed. For IFrame embeds that load a Flash player, it also defines
						// when the controls display in the player as well as when the player
						// will load. Supported values are:
						//   - controls=0 – Player controls do not display in the player. For
						//                  IFrame embeds, the Flash player loads immediately.
						//   - controls=1 – (default) Player controls display in the player. For
						//                  IFrame embeds, the controls display immediately and
						//                  the Flash player also loads immediately.
						//   - controls=2 – Player controls display in the player. For IFrame
						//                  embeds, the controls display and the Flash player
						//                  loads after the user initiates the video playback.
						controls: opts.controls ? 2 : 0,
	
						// Setting the parameter's value to 1 causes the player to not respond to
						// keyboard controls. The default value is 0, which means that keyboard
						// controls are enabled.
						disablekb: opts.keyboard ? 0 : 1,
	
						// Setting the parameter's value to 1 enables the player to be
						// controlled via IFrame or JavaScript Player API calls. The default
						// value is 0, which means that the player cannot be controlled using
						// those APIs.
						enablejsapi: 1,
	
						// Setting this parameter to 0 prevents the fullscreen button from
						// displaying in the player. The default value is 1, which causes the
						// fullscreen button to display.
						fs: opts.fullscreen ? 1 : 0,
	
						// Setting the parameter's value to 1 causes video annotations to be
						// shown by default, whereas setting to 3 causes video annotations to not
						// be shown by default. The default value is 1.
						iv_load_policy: opts.annotations ? 1 : 3,
	
						// This parameter lets you use a YouTube player that does not show a
						// YouTube logo. Set the parameter value to 1 to prevent the YouTube logo
						// from displaying in the control bar. Note that a small YouTube text
						// label will still display in the upper-right corner of a paused video
						// when the user's mouse pointer hovers over the player.
						modestbranding: opts.modestBranding ? 1 : 0,
	
						// This parameter provides an extra security measure for the IFrame API
						// and is only supported for IFrame embeds. If you are using the IFrame
						// API, which means you are setting the enablejsapi parameter value to 1,
						// you should always specify your domain as the origin parameter value.
						origin: window.location.origin,
	
						// This parameter controls whether videos play inline or fullscreen in an
						// HTML5 player on iOS. Valid values are:
						//   - 0: This value causes fullscreen playback. This is currently the
						//        default value, though the default is subject to change.
						//   - 1: This value causes inline playback for UIWebViews created with
						//        the allowsInlineMediaPlayback property set to TRUE.
						playsinline: 1,
	
						// This parameter indicates whether the player should show related videos
						// when playback of the initial video ends. Supported values are 0 and 1.
						// The default value is 1.
						rel: opts.related ? 1 : 0,
	
						// Supported values are 0 and 1. Setting the parameter's value to 0
						// causes the player to not display information like the video title and
						// uploader before the video starts playing. If the player is loading a
						// playlist, and you explicitly set the parameter value to 1, then, upon
						// loading, the player will also display thumbnail images for the videos
						// in the playlist. Note that this functionality is only supported for
						// the AS3 player.
						showinfo: opts.info ? 1 : 0,
	
						// (Not part of documented API) Allow html elements with higher z-index
						// to be shown on top of the YouTube player.
						wmode: 'opaque'
					},
					events: {
						onReady: function onReady() {
							return _this2._onReady(videoId);
						},
						onStateChange: function onStateChange(data) {
							return _this2._onStateChange(data);
						},
						onPlaybackQualityChange: function onPlaybackQualityChange(data) {
							return _this2._onPlaybackQualityChange(data);
						},
						onPlaybackRateChange: function onPlaybackRateChange(data) {
							return _this2._onPlaybackRateChange(data);
						},
						onError: function onError(data) {
							return _this2._onError(data);
						}
					}
				});
			}
	
			/**
	   * This event fires when the player has finished loading and is ready to begin
	   * receiving API calls.
	   */
	
		}, {
			key: '_onReady',
			value: function _onReady(videoId) {
				if (this.destroyed) return;
	
				this._ready = true;
	
				// If the videoId that was loaded is not the same as `this.videoId`, then
				// `load()` was called twice before `onReady` fired. Just call
				// `load(this.videoId)` to load the right videoId.
				if (videoId !== this.videoId) {
					this.load(this.videoId);
				}
	
				this._flushQueue();
			}
	
			/**
	   * Called when the player's state changes. We emit friendly events so the user
	   * doesn't need to use YouTube's YT.PlayerState.* event constants.
	   */
	
		}, {
			key: '_onStateChange',
			value: function _onStateChange(data) {
				if (this.destroyed) return;
	
				var state = YOUTUBE_STATES[data.data];
	
				if (state) {
					// Send a 'timeupdate' anytime the state changes. Note: It's important that 'playing'
					// gets emitted before the first 'timeupdate', and that no 'timeupdate' events are
					// emitted after 'pause', 'ended', or 'buffering'.
					if (['paused'].includes(state)) this._onTimeupdate();
					this.emit(state);
					if (state === 'playing') this._onTimeupdate();
				} else {
					throw new Error('Unrecognized state change: ' + data);
				}
			}
	
			/**
	   * This event fires whenever the video playback quality changes. Possible
	   * values are: 'small', 'medium', 'large', 'hd720', 'hd1080', 'highres'.
	   */
	
		}, {
			key: '_onPlaybackQualityChange',
			value: function _onPlaybackQualityChange(data) {
				if (this.destroyed) return;
				this.emit('playbackQualityChange', data.data);
			}
	
			/**
	   * This event fires whenever the video playback rate changes.
	   */
	
		}, {
			key: '_onPlaybackRateChange',
			value: function _onPlaybackRateChange(data) {
				if (this.destroyed) return;
				this.emit('playbackRateChange', data.data);
			}
	
			/**
	   * This event fires if an error occurs in the player.
	   */
	
		}, {
			key: '_onError',
			value: function _onError(data) {
				if (this.destroyed) return;
	
				var code = data.data;
	
				// The HTML5_ERROR error occurs when the YouTube player needs to switch from
				// HTML5 to Flash to show an ad. Ignore it.
				if (code === YOUTUBE_ERROR.HTML5_ERROR) return;
	
				// The remaining error types occur when the YouTube player cannot play the
				// given video. This is not a fatal error. Report it as unplayable so the user
				// has an opportunity to play another video.
				if (code === YOUTUBE_ERROR.UNPLAYABLE_1 || code === YOUTUBE_ERROR.UNPLAYABLE_2 || code === YOUTUBE_ERROR.NOT_FOUND || code === YOUTUBE_ERROR.INVALID_PARAM) {
					return this.emit('unplayable', this.videoId);
				}
	
				// Unexpected error, does not match any known type
				this._destroy(new Error('YouTube Player Error. Unknown error code: ' + code));
			}
	
			/**
	   * This event fires when the time indicated by the `getCurrentTime()` method
	   * has been updated.
	   */
	
		}, {
			key: '_onTimeupdate',
			value: function _onTimeupdate() {
				this.emit('timeupdate', this.getCurrentTime());
			}
		}, {
			key: '_startInterval',
			value: function _startInterval() {
				var _this3 = this;
	
				this._interval = setInterval(function () {
					return _this3._onTimeupdate();
				}, this._opts.timeupdateFrequency);
			}
		}, {
			key: '_stopInterval',
			value: function _stopInterval() {
				clearInterval(this._interval);
				this._interval = null;
			}
		}]);
		return YouTubePlayer;
	}(EventEmitter);
	
	module.exports = YouTubePlayer;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(66), __esModule: true };

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(67);
	__webpack_require__(80);
	module.exports = __webpack_require__(14).Array.from;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(68)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(69)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(37);
	var defined = __webpack_require__(34);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(70);
	var $export = __webpack_require__(12);
	var redefine = __webpack_require__(71);
	var hide = __webpack_require__(17);
	var has = __webpack_require__(30);
	var Iterators = __webpack_require__(72);
	var $iterCreate = __webpack_require__(73);
	var setToStringTag = __webpack_require__(77);
	var getPrototypeOf = __webpack_require__(79);
	var ITERATOR = __webpack_require__(78)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	
	var returnThis = function () { return this; };
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = (!BUGGY && $native) || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ }),
/* 70 */
/***/ (function(module, exports) {

	module.exports = true;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(17);


/***/ }),
/* 72 */
/***/ (function(module, exports) {

	module.exports = {};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(74);
	var descriptor = __webpack_require__(26);
	var setToStringTag = __webpack_require__(77);
	var IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(17)(IteratorPrototype, __webpack_require__(78)('iterator'), function () { return this; });
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(19);
	var dPs = __webpack_require__(75);
	var enumBugKeys = __webpack_require__(42);
	var IE_PROTO = __webpack_require__(39)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(24)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(76).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(18);
	var anObject = __webpack_require__(19);
	var getKeys = __webpack_require__(28);
	
	module.exports = __webpack_require__(22) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(13).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(18).f;
	var has = __webpack_require__(30);
	var TAG = __webpack_require__(78)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(40)('wks');
	var uid = __webpack_require__(41);
	var Symbol = __webpack_require__(13).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(30);
	var toObject = __webpack_require__(45);
	var IE_PROTO = __webpack_require__(39)('IE_PROTO');
	var ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var ctx = __webpack_require__(15);
	var $export = __webpack_require__(12);
	var toObject = __webpack_require__(45);
	var call = __webpack_require__(81);
	var isArrayIter = __webpack_require__(82);
	var toLength = __webpack_require__(36);
	var createProperty = __webpack_require__(83);
	var getIterFn = __webpack_require__(84);
	
	$export($export.S + $export.F * !__webpack_require__(86)(function (iter) { Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = getIterFn(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(19);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(72);
	var ITERATOR = __webpack_require__(78)('iterator');
	var ArrayProto = Array.prototype;
	
	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(18);
	var createDesc = __webpack_require__(26);
	
	module.exports = function (object, index, value) {
	  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(85);
	var ITERATOR = __webpack_require__(78)('iterator');
	var Iterators = __webpack_require__(72);
	module.exports = __webpack_require__(14).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(33);
	var TAG = __webpack_require__(78)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};
	
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(78)('iterator');
	var SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }
	
	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(88), __esModule: true };

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(89);
	module.exports = __webpack_require__(14).Object.getPrototypeOf;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(45);
	var $getPrototypeOf = __webpack_require__(79);
	
	__webpack_require__(90)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(12);
	var core = __webpack_require__(14);
	var fails = __webpack_require__(23);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(92);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(93);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(100);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(94), __esModule: true };

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(67);
	__webpack_require__(95);
	module.exports = __webpack_require__(99).f('iterator');


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(96);
	var global = __webpack_require__(13);
	var hide = __webpack_require__(17);
	var Iterators = __webpack_require__(72);
	var TO_STRING_TAG = __webpack_require__(78)('toStringTag');
	
	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');
	
	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(97);
	var step = __webpack_require__(98);
	var Iterators = __webpack_require__(72);
	var toIObject = __webpack_require__(31);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(69)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ }),
/* 97 */
/***/ (function(module, exports) {

	module.exports = function () { /* empty */ };


/***/ }),
/* 98 */
/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(78);


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(101), __esModule: true };

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(102);
	__webpack_require__(110);
	__webpack_require__(111);
	__webpack_require__(112);
	module.exports = __webpack_require__(14).Symbol;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(13);
	var has = __webpack_require__(30);
	var DESCRIPTORS = __webpack_require__(22);
	var $export = __webpack_require__(12);
	var redefine = __webpack_require__(71);
	var META = __webpack_require__(103).KEY;
	var $fails = __webpack_require__(23);
	var shared = __webpack_require__(40);
	var setToStringTag = __webpack_require__(77);
	var uid = __webpack_require__(41);
	var wks = __webpack_require__(78);
	var wksExt = __webpack_require__(99);
	var wksDefine = __webpack_require__(104);
	var enumKeys = __webpack_require__(105);
	var isArray = __webpack_require__(106);
	var anObject = __webpack_require__(19);
	var isObject = __webpack_require__(20);
	var toIObject = __webpack_require__(31);
	var toPrimitive = __webpack_require__(25);
	var createDesc = __webpack_require__(26);
	var _create = __webpack_require__(74);
	var gOPNExt = __webpack_require__(107);
	var $GOPD = __webpack_require__(109);
	var $DP = __webpack_require__(18);
	var $keys = __webpack_require__(28);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(108).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(44).f = $propertyIsEnumerable;
	  __webpack_require__(43).f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(70)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
	
	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(17)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	var META = __webpack_require__(41)('meta');
	var isObject = __webpack_require__(20);
	var has = __webpack_require__(30);
	var setDesc = __webpack_require__(18).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(23)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(13);
	var core = __webpack_require__(14);
	var LIBRARY = __webpack_require__(70);
	var wksExt = __webpack_require__(99);
	var defineProperty = __webpack_require__(18).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(28);
	var gOPS = __webpack_require__(43);
	var pIE = __webpack_require__(44);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(33);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(31);
	var gOPN = __webpack_require__(108).f;
	var toString = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(29);
	var hiddenKeys = __webpack_require__(42).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(44);
	var createDesc = __webpack_require__(26);
	var toIObject = __webpack_require__(31);
	var toPrimitive = __webpack_require__(25);
	var has = __webpack_require__(30);
	var IE8_DOM_DEFINE = __webpack_require__(21);
	var gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(22) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


/***/ }),
/* 110 */
/***/ (function(module, exports) {



/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(104)('asyncIterator');


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(104)('observable');


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(114);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(118);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(92);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(115), __esModule: true };

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(116);
	module.exports = __webpack_require__(14).Object.setPrototypeOf;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(12);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(117).set });


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(20);
	var anObject = __webpack_require__(19);
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = __webpack_require__(15)(Function.call, __webpack_require__(109).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(119), __esModule: true };

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(120);
	var $Object = __webpack_require__(14).Object;
	module.exports = function create(P, D) {
	  return $Object.create(P, D);
	};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(12);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(74) });


/***/ }),
/* 121 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 122 */
/***/ (function(module, exports) {

	module.exports = load
	
	function load (src, cb) {
	  var head = document.head || document.getElementsByTagName('head')[0]
	  var script = document.createElement('script')
	
	  script.type = 'text/javascript'
	  script.async = true
	  script.src = src
	
	  if (cb) {
	    script.onload = function () {
	      script.onerror = script.onload = null
	      cb(null, script)
	    }
	    script.onerror = function () {
	      script.onerror = script.onload = null
	      cb(new Error('Failed to load ' + src), script)
	    }
	  }
	
	  head.appendChild(script)
	}


/***/ }),
/* 123 */
/***/ (function(module, exports) {

	/*!
	 * fancyBox - jQuery Plugin
	 * version: 2.1.5 (Fri, 14 Jun 2013)
	 * requires jQuery v1.6 or later
	 *
	 * Examples at http://fancyapps.com/fancybox/
	 * License: www.fancyapps.com/fancybox/#license
	 *
	 * Copyright 2012 Janis Skarnelis - janis@fancyapps.com
	 *
	 */
	
	;(function (window, document, $, undefined) {
		"use strict";
	
		var H = $("html"),
			W = $(window),
			D = $(document),
			F = $.fancybox = function () {
				F.open.apply( this, arguments );
			},
			IE =  navigator.userAgent.match(/msie/i),
			didUpdate	= null,
			isTouch		= document.createTouch !== undefined,
	
			isQuery	= function(obj) {
				return obj && obj.hasOwnProperty && obj instanceof $;
			},
			isString = function(str) {
				return str && $.type(str) === "string";
			},
			isPercentage = function(str) {
				return isString(str) && str.indexOf('%') > 0;
			},
			isScrollable = function(el) {
				return (el && !(el.style.overflow && el.style.overflow === 'hidden') && ((el.clientWidth && el.scrollWidth > el.clientWidth) || (el.clientHeight && el.scrollHeight > el.clientHeight)));
			},
			getScalar = function(orig, dim) {
				var value = parseInt(orig, 10) || 0;
	
				if (dim && isPercentage(orig)) {
					value = F.getViewport()[ dim ] / 100 * value;
				}
	
				return Math.ceil(value);
			},
			getValue = function(value, dim) {
				return getScalar(value, dim) + 'px';
			};
	
		$.extend(F, {
			// The current version of fancyBox
			version: '2.1.5',
	
			defaults: {
				padding : 15,
				margin  : 20,
	
				width     : 800,
				height    : 600,
				minWidth  : 100,
				minHeight : 100,
				maxWidth  : 9999,
				maxHeight : 9999,
				pixelRatio: 1, // Set to 2 for retina display support
	
				autoSize   : true,
				autoHeight : false,
				autoWidth  : false,
	
				autoResize  : true,
				autoCenter  : !isTouch,
				fitToView   : true,
				aspectRatio : false,
				topRatio    : 0.5,
				leftRatio   : 0.5,
	
				scrolling : 'auto', // 'auto', 'yes' or 'no'
				wrapCSS   : '',
	
				arrows     : true,
				closeBtn   : true,
				closeClick : false,
				nextClick  : false,
				mouseWheel : true,
				autoPlay   : false,
				playSpeed  : 3000,
				preload    : 3,
				modal      : false,
				loop       : true,
	
				ajax  : {
					dataType : 'html',
					headers  : { 'X-fancyBox': true }
				},
				iframe : {
					scrolling : 'auto',
					preload   : true
				},
				swf : {
					wmode: 'transparent',
					allowfullscreen   : 'true',
					allowscriptaccess : 'always'
				},
	
				keys  : {
					next : {
						13 : 'left', // enter
						34 : 'up',   // page down
						39 : 'left', // right arrow
						40 : 'up'    // down arrow
					},
					prev : {
						8  : 'right',  // backspace
						33 : 'down',   // page up
						37 : 'right',  // left arrow
						38 : 'down'    // up arrow
					},
					close  : [27], // escape key
					play   : [32], // space - start/stop slideshow
					toggle : [70]  // letter "f" - toggle fullscreen
				},
	
				direction : {
					next : 'left',
					prev : 'right'
				},
	
				scrollOutside  : true,
	
				// Override some properties
				index   : 0,
				type    : null,
				href    : null,
				content : null,
				title   : null,
	
				// HTML templates
				tpl: {
					wrap     : '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
					image    : '<img class="fancybox-image" src="{href}" alt="" />',
					iframe   : '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' + (IE ? ' allowtransparency="true"' : '') + '></iframe>',
					error    : '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',
					closeBtn : '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',
					next     : '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
					prev     : '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>',
					loading  : '<div id="fancybox-loading"><div></div></div>'
				},
	
				// Properties for each animation type
				// Opening fancyBox
				openEffect  : 'fade', // 'elastic', 'fade' or 'none'
				openSpeed   : 250,
				openEasing  : 'swing',
				openOpacity : true,
				openMethod  : 'zoomIn',
	
				// Closing fancyBox
				closeEffect  : 'fade', // 'elastic', 'fade' or 'none'
				closeSpeed   : 250,
				closeEasing  : 'swing',
				closeOpacity : true,
				closeMethod  : 'zoomOut',
	
				// Changing next gallery item
				nextEffect : 'elastic', // 'elastic', 'fade' or 'none'
				nextSpeed  : 250,
				nextEasing : 'swing',
				nextMethod : 'changeIn',
	
				// Changing previous gallery item
				prevEffect : 'elastic', // 'elastic', 'fade' or 'none'
				prevSpeed  : 250,
				prevEasing : 'swing',
				prevMethod : 'changeOut',
	
				// Enable default helpers
				helpers : {
					overlay : true,
					title   : true
				},
	
				// Callbacks
				onCancel     : $.noop, // If canceling
				beforeLoad   : $.noop, // Before loading
				afterLoad    : $.noop, // After loading
				beforeShow   : $.noop, // Before changing in current item
				afterShow    : $.noop, // After opening
				beforeChange : $.noop, // Before changing gallery item
				beforeClose  : $.noop, // Before closing
				afterClose   : $.noop  // After closing
			},
	
			//Current state
			group    : {}, // Selected group
			opts     : {}, // Group options
			previous : null,  // Previous element
			coming   : null,  // Element being loaded
			current  : null,  // Currently loaded element
			isActive : false, // Is activated
			isOpen   : false, // Is currently open
			isOpened : false, // Have been fully opened at least once
	
			wrap  : null,
			skin  : null,
			outer : null,
			inner : null,
	
			player : {
				timer    : null,
				isActive : false
			},
	
			// Loaders
			ajaxLoad   : null,
			imgPreload : null,
	
			// Some collections
			transitions : {},
			helpers     : {},
	
			/*
			 *	Static methods
			 */
	
			open: function (group, opts) {
				if (!group) {
					return;
				}
	
				if (!$.isPlainObject(opts)) {
					opts = {};
				}
	
				// Close if already active
				if (false === F.close(true)) {
					return;
				}
	
				// Normalize group
				if (!$.isArray(group)) {
					group = isQuery(group) ? $(group).get() : [group];
				}
	
				// Recheck if the type of each element is `object` and set content type (image, ajax, etc)
				$.each(group, function(i, element) {
					var obj = {},
						href,
						title,
						content,
						type,
						rez,
						hrefParts,
						selector;
	
					if ($.type(element) === "object") {
						// Check if is DOM element
						if (element.nodeType) {
							element = $(element);
						}
	
						if (isQuery(element)) {
							obj = {
								href    : element.data('fancybox-href') || element.attr('href'),
								title   : $('<div/>').text( element.data('fancybox-title') || element.attr('title') || '' ).html(),
								isDom   : true,
								element : element
							};
	
							if ($.metadata) {
								$.extend(true, obj, element.metadata());
							}
	
						} else {
							obj = element;
						}
					}
	
					href  = opts.href  || obj.href || (isString(element) ? element : null);
					title = opts.title !== undefined ? opts.title : obj.title || '';
	
					content = opts.content || obj.content;
					type    = content ? 'html' : (opts.type  || obj.type);
	
					if (!type && obj.isDom) {
						type = element.data('fancybox-type');
	
						if (!type) {
							rez  = element.prop('class').match(/fancybox\.(\w+)/);
							type = rez ? rez[1] : null;
						}
					}
	
					if (isString(href)) {
						// Try to guess the content type
						if (!type) {
							if (F.isImage(href)) {
								type = 'image';
	
							} else if (F.isSWF(href)) {
								type = 'swf';
	
							} else if (href.charAt(0) === '#') {
								type = 'inline';
	
							} else if (isString(element)) {
								type    = 'html';
								content = element;
							}
						}
	
						// Split url into two pieces with source url and content selector, e.g,
						// "/mypage.html #my_id" will load "/mypage.html" and display element having id "my_id"
						if (type === 'ajax') {
							hrefParts = href.split(/\s+/, 2);
							href      = hrefParts.shift();
							selector  = hrefParts.shift();
						}
					}
	
					if (!content) {
						if (type === 'inline') {
							if (href) {
								content = $( isString(href) ? href.replace(/.*(?=#[^\s]+$)/, '') : href ); //strip for ie7
	
							} else if (obj.isDom) {
								content = element;
							}
	
						} else if (type === 'html') {
							content = href;
	
						} else if (!type && !href && obj.isDom) {
							type    = 'inline';
							content = element;
						}
					}
	
					$.extend(obj, {
						href     : href,
						type     : type,
						content  : content,
						title    : title,
						selector : selector
					});
	
					group[ i ] = obj;
				});
	
				// Extend the defaults
				F.opts = $.extend(true, {}, F.defaults, opts);
	
				// All options are merged recursive except keys
				if (opts.keys !== undefined) {
					F.opts.keys = opts.keys ? $.extend({}, F.defaults.keys, opts.keys) : false;
				}
	
				F.group = group;
	
				return F._start(F.opts.index);
			},
	
			// Cancel image loading or abort ajax request
			cancel: function () {
				var coming = F.coming;
	
				if (coming && false === F.trigger('onCancel')) {
					return;
				}
	
				F.hideLoading();
	
				if (!coming) {
					return;
				}
	
				if (F.ajaxLoad) {
					F.ajaxLoad.abort();
				}
	
				F.ajaxLoad = null;
	
				if (F.imgPreload) {
					F.imgPreload.onload = F.imgPreload.onerror = null;
				}
	
				if (coming.wrap) {
					coming.wrap.stop(true, true).trigger('onReset').remove();
				}
	
				F.coming = null;
	
				// If the first item has been canceled, then clear everything
				if (!F.current) {
					F._afterZoomOut( coming );
				}
			},
	
			// Start closing animation if is open; remove immediately if opening/closing
			close: function (event) {
				F.cancel();
	
				if (false === F.trigger('beforeClose')) {
					return;
				}
	
				F.unbindEvents();
	
				if (!F.isActive) {
					return;
				}
	
				if (!F.isOpen || event === true) {
					$('.fancybox-wrap').stop(true).trigger('onReset').remove();
	
					F._afterZoomOut();
	
				} else {
					F.isOpen = F.isOpened = false;
					F.isClosing = true;
	
					$('.fancybox-item, .fancybox-nav').remove();
	
					F.wrap.stop(true, true).removeClass('fancybox-opened');
	
					F.transitions[ F.current.closeMethod ]();
				}
			},
	
			// Manage slideshow:
			//   $.fancybox.play(); - toggle slideshow
			//   $.fancybox.play( true ); - start
			//   $.fancybox.play( false ); - stop
			play: function ( action ) {
				var clear = function () {
						clearTimeout(F.player.timer);
					},
					set = function () {
						clear();
	
						if (F.current && F.player.isActive) {
							F.player.timer = setTimeout(F.next, F.current.playSpeed);
						}
					},
					stop = function () {
						clear();
	
						D.unbind('.player');
	
						F.player.isActive = false;
	
						F.trigger('onPlayEnd');
					},
					start = function () {
						if (F.current && (F.current.loop || F.current.index < F.group.length - 1)) {
							F.player.isActive = true;
	
							D.bind({
								'onCancel.player beforeClose.player' : stop,
								'onUpdate.player'   : set,
								'beforeLoad.player' : clear
							});
	
							set();
	
							F.trigger('onPlayStart');
						}
					};
	
				if (action === true || (!F.player.isActive && action !== false)) {
					start();
				} else {
					stop();
				}
			},
	
			// Navigate to next gallery item
			next: function ( direction ) {
				var current = F.current;
	
				if (current) {
					if (!isString(direction)) {
						direction = current.direction.next;
					}
	
					F.jumpto(current.index + 1, direction, 'next');
				}
			},
	
			// Navigate to previous gallery item
			prev: function ( direction ) {
				var current = F.current;
	
				if (current) {
					if (!isString(direction)) {
						direction = current.direction.prev;
					}
	
					F.jumpto(current.index - 1, direction, 'prev');
				}
			},
	
			// Navigate to gallery item by index
			jumpto: function ( index, direction, router ) {
				var current = F.current;
	
				if (!current) {
					return;
				}
	
				index = getScalar(index);
	
				F.direction = direction || current.direction[ (index >= current.index ? 'next' : 'prev') ];
				F.router    = router || 'jumpto';
	
				if (current.loop) {
					if (index < 0) {
						index = current.group.length + (index % current.group.length);
					}
	
					index = index % current.group.length;
				}
	
				if (current.group[ index ] !== undefined) {
					F.cancel();
	
					F._start(index);
				}
			},
	
			// Center inside viewport and toggle position type to fixed or absolute if needed
			reposition: function (e, onlyAbsolute) {
				var current = F.current,
					wrap    = current ? current.wrap : null,
					pos;
	
				if (wrap) {
					pos = F._getPosition(onlyAbsolute);
	
					if (e && e.type === 'scroll') {
						delete pos.position;
	
						wrap.stop(true, true).animate(pos, 200);
	
					} else {
						wrap.css(pos);
	
						current.pos = $.extend({}, current.dim, pos);
					}
				}
			},
	
			update: function (e) {
				var type = (e && e.originalEvent && e.originalEvent.type),
					anyway = !type || type === 'orientationchange';
	
				if (anyway) {
					clearTimeout(didUpdate);
	
					didUpdate = null;
				}
	
				if (!F.isOpen || didUpdate) {
					return;
				}
	
				didUpdate = setTimeout(function() {
					var current = F.current;
	
					if (!current || F.isClosing) {
						return;
					}
	
					F.wrap.removeClass('fancybox-tmp');
	
					if (anyway || type === 'load' || (type === 'resize' && current.autoResize)) {
						F._setDimension();
					}
	
					if (!(type === 'scroll' && current.canShrink)) {
						F.reposition(e);
					}
	
					F.trigger('onUpdate');
	
					didUpdate = null;
	
				}, (anyway && !isTouch ? 0 : 300));
			},
	
			// Shrink content to fit inside viewport or restore if resized
			toggle: function ( action ) {
				if (F.isOpen) {
					F.current.fitToView = $.type(action) === "boolean" ? action : !F.current.fitToView;
	
					// Help browser to restore document dimensions
					if (isTouch) {
						F.wrap.removeAttr('style').addClass('fancybox-tmp');
	
						F.trigger('onUpdate');
					}
	
					F.update();
				}
			},
	
			hideLoading: function () {
				D.unbind('.loading');
	
				$('#fancybox-loading').remove();
			},
	
			showLoading: function () {
				var el, viewport;
	
				F.hideLoading();
	
				el = $(F.opts.tpl.loading).click(F.cancel).appendTo('body');
	
				// If user will press the escape-button, the request will be canceled
				D.bind('keydown.loading', function(e) {
					if ((e.which || e.keyCode) === 27) {
						e.preventDefault();
	
						F.cancel();
					}
				});
	
				if (!F.defaults.fixed) {
					viewport = F.getViewport();
	
					el.css({
						position : 'absolute',
						top  : (viewport.h * 0.5) + viewport.y,
						left : (viewport.w * 0.5) + viewport.x
					});
				}
	
				F.trigger('onLoading');
			},
	
			getViewport: function () {
				var locked = (F.current && F.current.locked) || false,
					rez    = {
						x: W.scrollLeft(),
						y: W.scrollTop()
					};
	
				if (locked && locked.length) {
					rez.w = locked[0].clientWidth;
					rez.h = locked[0].clientHeight;
	
				} else {
					// See http://bugs.jquery.com/ticket/6724
					rez.w = isTouch && window.innerWidth  ? window.innerWidth  : W.width();
					rez.h = isTouch && window.innerHeight ? window.innerHeight : W.height();
				}
	
				return rez;
			},
	
			// Unbind the keyboard / clicking actions
			unbindEvents: function () {
				if (F.wrap && isQuery(F.wrap)) {
					F.wrap.unbind('.fb');
				}
	
				D.unbind('.fb');
				W.unbind('.fb');
			},
	
			bindEvents: function () {
				var current = F.current,
					keys;
	
				if (!current) {
					return;
				}
	
				// Changing document height on iOS devices triggers a 'resize' event,
				// that can change document height... repeating infinitely
				W.bind('orientationchange.fb' + (isTouch ? '' : ' resize.fb') + (current.autoCenter && !current.locked ? ' scroll.fb' : ''), F.update);
	
				keys = current.keys;
	
				if (keys) {
					D.bind('keydown.fb', function (e) {
						var code   = e.which || e.keyCode,
							target = e.target || e.srcElement;
	
						// Skip esc key if loading, because showLoading will cancel preloading
						if (code === 27 && F.coming) {
							return false;
						}
	
						// Ignore key combinations and key events within form elements
						if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey && !(target && (target.type || $(target).is('[contenteditable]')))) {
							$.each(keys, function(i, val) {
								if (current.group.length > 1 && val[ code ] !== undefined) {
									F[ i ]( val[ code ] );
	
									e.preventDefault();
									return false;
								}
	
								if ($.inArray(code, val) > -1) {
									F[ i ] ();
	
									e.preventDefault();
									return false;
								}
							});
						}
					});
				}
	
				if ($.fn.mousewheel && current.mouseWheel) {
					F.wrap.bind('mousewheel.fb', function (e, delta, deltaX, deltaY) {
						var target = e.target || null,
							parent = $(target),
							canScroll = false;
	
						while (parent.length) {
							if (canScroll || parent.is('.fancybox-skin') || parent.is('.fancybox-wrap')) {
								break;
							}
	
							canScroll = isScrollable( parent[0] );
							parent    = $(parent).parent();
						}
	
						if (delta !== 0 && !canScroll) {
							if (F.group.length > 1 && !current.canShrink) {
								if (deltaY > 0 || deltaX > 0) {
									F.prev( deltaY > 0 ? 'down' : 'left' );
	
								} else if (deltaY < 0 || deltaX < 0) {
									F.next( deltaY < 0 ? 'up' : 'right' );
								}
	
								e.preventDefault();
							}
						}
					});
				}
			},
	
			trigger: function (event, o) {
				var ret, obj = o || F.coming || F.current;
	
				if (obj) {
					if ($.isFunction( obj[event] )) {
						ret = obj[event].apply(obj, Array.prototype.slice.call(arguments, 1));
					}
	
					if (ret === false) {
						return false;
					}
	
					if (obj.helpers) {
						$.each(obj.helpers, function (helper, opts) {
							if (opts && F.helpers[helper] && $.isFunction(F.helpers[helper][event])) {
								F.helpers[helper][event]($.extend(true, {}, F.helpers[helper].defaults, opts), obj);
							}
						});
					}
				}
	
				D.trigger(event);
			},
	
			isImage: function (str) {
				return isString(str) && str.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i);
			},
	
			isSWF: function (str) {
				return isString(str) && str.match(/\.(swf)((\?|#).*)?$/i);
			},
	
			_start: function (index) {
				var coming = {},
					obj,
					href,
					type,
					margin,
					padding;
	
				index = getScalar( index );
				obj   = F.group[ index ] || null;
	
				if (!obj) {
					return false;
				}
	
				coming = $.extend(true, {}, F.opts, obj);
	
				// Convert margin and padding properties to array - top, right, bottom, left
				margin  = coming.margin;
				padding = coming.padding;
	
				if ($.type(margin) === 'number') {
					coming.margin = [margin, margin, margin, margin];
				}
	
				if ($.type(padding) === 'number') {
					coming.padding = [padding, padding, padding, padding];
				}
	
				// 'modal' propery is just a shortcut
				if (coming.modal) {
					$.extend(true, coming, {
						closeBtn   : false,
						closeClick : false,
						nextClick  : false,
						arrows     : false,
						mouseWheel : false,
						keys       : null,
						helpers: {
							overlay : {
								closeClick : false
							}
						}
					});
				}
	
				// 'autoSize' property is a shortcut, too
				if (coming.autoSize) {
					coming.autoWidth = coming.autoHeight = true;
				}
	
				if (coming.width === 'auto') {
					coming.autoWidth = true;
				}
	
				if (coming.height === 'auto') {
					coming.autoHeight = true;
				}
	
				/*
				 * Add reference to the group, so it`s possible to access from callbacks, example:
				 * afterLoad : function() {
				 *     this.title = 'Image ' + (this.index + 1) + ' of ' + this.group.length + (this.title ? ' - ' + this.title : '');
				 * }
				 */
	
				coming.group  = F.group;
				coming.index  = index;
	
				// Give a chance for callback or helpers to update coming item (type, title, etc)
				F.coming = coming;
	
				if (false === F.trigger('beforeLoad')) {
					F.coming = null;
	
					return;
				}
	
				type = coming.type;
				href = coming.href;
	
				if (!type) {
					F.coming = null;
	
					//If we can not determine content type then drop silently or display next/prev item if looping through gallery
					if (F.current && F.router && F.router !== 'jumpto') {
						F.current.index = index;
	
						return F[ F.router ]( F.direction );
					}
	
					return false;
				}
	
				F.isActive = true;
	
				if (type === 'image' || type === 'swf') {
					coming.autoHeight = coming.autoWidth = false;
					coming.scrolling  = 'visible';
				}
	
				if (type === 'image') {
					coming.aspectRatio = true;
				}
	
				if (type === 'iframe' && isTouch) {
					coming.scrolling = 'scroll';
				}
	
				// Build the neccessary markup
				coming.wrap = $(coming.tpl.wrap).addClass('fancybox-' + (isTouch ? 'mobile' : 'desktop') + ' fancybox-type-' + type + ' fancybox-tmp ' + coming.wrapCSS).appendTo( coming.parent || 'body' );
	
				$.extend(coming, {
					skin  : $('.fancybox-skin',  coming.wrap),
					outer : $('.fancybox-outer', coming.wrap),
					inner : $('.fancybox-inner', coming.wrap)
				});
	
				$.each(["Top", "Right", "Bottom", "Left"], function(i, v) {
					coming.skin.css('padding' + v, getValue(coming.padding[ i ]));
				});
	
				F.trigger('onReady');
	
				// Check before try to load; 'inline' and 'html' types need content, others - href
				if (type === 'inline' || type === 'html') {
					if (!coming.content || !coming.content.length) {
						return F._error( 'content' );
					}
	
				} else if (!href) {
					return F._error( 'href' );
				}
	
				if (type === 'image') {
					F._loadImage();
	
				} else if (type === 'ajax') {
					F._loadAjax();
	
				} else if (type === 'iframe') {
					F._loadIframe();
	
				} else {
					F._afterLoad();
				}
			},
	
			_error: function ( type ) {
				$.extend(F.coming, {
					type       : 'html',
					autoWidth  : true,
					autoHeight : true,
					minWidth   : 0,
					minHeight  : 0,
					scrolling  : 'no',
					hasError   : type,
					content    : F.coming.tpl.error
				});
	
				F._afterLoad();
			},
	
			_loadImage: function () {
				// Reset preload image so it is later possible to check "complete" property
				var img = F.imgPreload = new Image();
	
				img.onload = function () {
					this.onload = this.onerror = null;
	
					F.coming.width  = this.width / F.opts.pixelRatio;
					F.coming.height = this.height / F.opts.pixelRatio;
	
					F._afterLoad();
				};
	
				img.onerror = function () {
					this.onload = this.onerror = null;
	
					F._error( 'image' );
				};
	
				img.src = F.coming.href;
	
				if (img.complete !== true) {
					F.showLoading();
				}
			},
	
			_loadAjax: function () {
				var coming = F.coming;
	
				F.showLoading();
	
				F.ajaxLoad = $.ajax($.extend({}, coming.ajax, {
					url: coming.href,
					error: function (jqXHR, textStatus) {
						if (F.coming && textStatus !== 'abort') {
							F._error( 'ajax', jqXHR );
	
						} else {
							F.hideLoading();
						}
					},
					success: function (data, textStatus) {
						if (textStatus === 'success') {
							coming.content = data;
	
							F._afterLoad();
						}
					}
				}));
			},
	
			_loadIframe: function() {
				var coming = F.coming,
					iframe = $(coming.tpl.iframe.replace(/\{rnd\}/g, new Date().getTime()))
						.attr('scrolling', isTouch ? 'auto' : coming.iframe.scrolling)
						.attr('src', coming.href);
	
				// This helps IE
				$(coming.wrap).bind('onReset', function () {
					try {
						$(this).find('iframe').hide().attr('src', '//about:blank').end().empty();
					} catch (e) {}
				});
	
				if (coming.iframe.preload) {
					F.showLoading();
	
					iframe.one('load', function() {
						$(this).data('ready', 1);
	
						// iOS will lose scrolling if we resize
						if (!isTouch) {
							$(this).bind('load.fb', F.update);
						}
	
						// Without this trick:
						//   - iframe won't scroll on iOS devices
						//   - IE7 sometimes displays empty iframe
						$(this).parents('.fancybox-wrap').width('100%').removeClass('fancybox-tmp').show();
	
						F._afterLoad();
					});
				}
	
				coming.content = iframe.appendTo( coming.inner );
	
				if (!coming.iframe.preload) {
					F._afterLoad();
				}
			},
	
			_preloadImages: function() {
				var group   = F.group,
					current = F.current,
					len     = group.length,
					cnt     = current.preload ? Math.min(current.preload, len - 1) : 0,
					item,
					i;
	
				for (i = 1; i <= cnt; i += 1) {
					item = group[ (current.index + i ) % len ];
	
					if (item.type === 'image' && item.href) {
						new Image().src = item.href;
					}
				}
			},
	
			_afterLoad: function () {
				var coming   = F.coming,
					previous = F.current,
					placeholder = 'fancybox-placeholder',
					current,
					content,
					type,
					scrolling,
					href,
					embed;
	
				F.hideLoading();
	
				if (!coming || F.isActive === false) {
					return;
				}
	
				if (false === F.trigger('afterLoad', coming, previous)) {
					coming.wrap.stop(true).trigger('onReset').remove();
	
					F.coming = null;
	
					return;
				}
	
				if (previous) {
					F.trigger('beforeChange', previous);
	
					previous.wrap.stop(true).removeClass('fancybox-opened')
						.find('.fancybox-item, .fancybox-nav')
						.remove();
				}
	
				F.unbindEvents();
	
				current   = coming;
				content   = coming.content;
				type      = coming.type;
				scrolling = coming.scrolling;
	
				$.extend(F, {
					wrap  : current.wrap,
					skin  : current.skin,
					outer : current.outer,
					inner : current.inner,
					current  : current,
					previous : previous
				});
	
				href = current.href;
	
				switch (type) {
					case 'inline':
					case 'ajax':
					case 'html':
						if (current.selector) {
							content = $('<div>').html(content).find(current.selector);
	
						} else if (isQuery(content)) {
							if (!content.data(placeholder)) {
								content.data(placeholder, $('<div class="' + placeholder + '"></div>').insertAfter( content ).hide() );
							}
	
							content = content.show().detach();
	
							current.wrap.bind('onReset', function () {
								if ($(this).find(content).length) {
									content.hide().replaceAll( content.data(placeholder) ).data(placeholder, false);
								}
							});
						}
					break;
	
					case 'image':
						content = current.tpl.image.replace(/\{href\}/g, href);
					break;
	
					case 'swf':
						content = '<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' + href + '"></param>';
						embed   = '';
	
						$.each(current.swf, function(name, val) {
							content += '<param name="' + name + '" value="' + val + '"></param>';
							embed   += ' ' + name + '="' + val + '"';
						});
	
						content += '<embed src="' + href + '" type="application/x-shockwave-flash" width="100%" height="100%"' + embed + '></embed></object>';
					break;
				}
	
				if (!(isQuery(content) && content.parent().is(current.inner))) {
					current.inner.append( content );
				}
	
				// Give a chance for helpers or callbacks to update elements
				F.trigger('beforeShow');
	
				// Set scrolling before calculating dimensions
				current.inner.css('overflow', scrolling === 'yes' ? 'scroll' : (scrolling === 'no' ? 'hidden' : scrolling));
	
				// Set initial dimensions and start position
				F._setDimension();
	
				F.reposition();
	
				F.isOpen = false;
				F.coming = null;
	
				F.bindEvents();
	
				if (!F.isOpened) {
					$('.fancybox-wrap').not( current.wrap ).stop(true).trigger('onReset').remove();
	
				} else if (previous.prevMethod) {
					F.transitions[ previous.prevMethod ]();
				}
	
				F.transitions[ F.isOpened ? current.nextMethod : current.openMethod ]();
	
				F._preloadImages();
			},
	
			_setDimension: function () {
				var viewport   = F.getViewport(),
					steps      = 0,
					canShrink  = false,
					canExpand  = false,
					wrap       = F.wrap,
					skin       = F.skin,
					inner      = F.inner,
					current    = F.current,
					width      = current.width,
					height     = current.height,
					minWidth   = current.minWidth,
					minHeight  = current.minHeight,
					maxWidth   = current.maxWidth,
					maxHeight  = current.maxHeight,
					scrolling  = current.scrolling,
					scrollOut  = current.scrollOutside ? current.scrollbarWidth : 0,
					margin     = current.margin,
					wMargin    = getScalar(margin[1] + margin[3]),
					hMargin    = getScalar(margin[0] + margin[2]),
					wPadding,
					hPadding,
					wSpace,
					hSpace,
					origWidth,
					origHeight,
					origMaxWidth,
					origMaxHeight,
					ratio,
					width_,
					height_,
					maxWidth_,
					maxHeight_,
					iframe,
					body;
	
				// Reset dimensions so we could re-check actual size
				wrap.add(skin).add(inner).width('auto').height('auto').removeClass('fancybox-tmp');
	
				wPadding = getScalar(skin.outerWidth(true)  - skin.width());
				hPadding = getScalar(skin.outerHeight(true) - skin.height());
	
				// Any space between content and viewport (margin, padding, border, title)
				wSpace = wMargin + wPadding;
				hSpace = hMargin + hPadding;
	
				origWidth  = isPercentage(width)  ? (viewport.w - wSpace) * getScalar(width)  / 100 : width;
				origHeight = isPercentage(height) ? (viewport.h - hSpace) * getScalar(height) / 100 : height;
	
				if (current.type === 'iframe') {
					iframe = current.content;
	
					if (current.autoHeight && iframe.data('ready') === 1) {
						try {
							if (iframe[0].contentWindow.document.location) {
								inner.width( origWidth ).height(9999);
	
								body = iframe.contents().find('body');
	
								if (scrollOut) {
									body.css('overflow-x', 'hidden');
								}
	
								origHeight = body.outerHeight(true);
							}
	
						} catch (e) {}
					}
	
				} else if (current.autoWidth || current.autoHeight) {
					inner.addClass( 'fancybox-tmp' );
	
					// Set width or height in case we need to calculate only one dimension
					if (!current.autoWidth) {
						inner.width( origWidth );
					}
	
					if (!current.autoHeight) {
						inner.height( origHeight );
					}
	
					if (current.autoWidth) {
						origWidth = inner.width();
					}
	
					if (current.autoHeight) {
						origHeight = inner.height();
					}
	
					inner.removeClass( 'fancybox-tmp' );
				}
	
				width  = getScalar( origWidth );
				height = getScalar( origHeight );
	
				ratio  = origWidth / origHeight;
	
				// Calculations for the content
				minWidth  = getScalar(isPercentage(minWidth) ? getScalar(minWidth, 'w') - wSpace : minWidth);
				maxWidth  = getScalar(isPercentage(maxWidth) ? getScalar(maxWidth, 'w') - wSpace : maxWidth);
	
				minHeight = getScalar(isPercentage(minHeight) ? getScalar(minHeight, 'h') - hSpace : minHeight);
				maxHeight = getScalar(isPercentage(maxHeight) ? getScalar(maxHeight, 'h') - hSpace : maxHeight);
	
				// These will be used to determine if wrap can fit in the viewport
				origMaxWidth  = maxWidth;
				origMaxHeight = maxHeight;
	
				if (current.fitToView) {
					maxWidth  = Math.min(viewport.w - wSpace, maxWidth);
					maxHeight = Math.min(viewport.h - hSpace, maxHeight);
				}
	
				maxWidth_  = viewport.w - wMargin;
				maxHeight_ = viewport.h - hMargin;
	
				if (current.aspectRatio) {
					if (width > maxWidth) {
						width  = maxWidth;
						height = getScalar(width / ratio);
					}
	
					if (height > maxHeight) {
						height = maxHeight;
						width  = getScalar(height * ratio);
					}
	
					if (width < minWidth) {
						width  = minWidth;
						height = getScalar(width / ratio);
					}
	
					if (height < minHeight) {
						height = minHeight;
						width  = getScalar(height * ratio);
					}
	
				} else {
					width = Math.max(minWidth, Math.min(width, maxWidth));
	
					if (current.autoHeight && current.type !== 'iframe') {
						inner.width( width );
	
						height = inner.height();
					}
	
					height = Math.max(minHeight, Math.min(height, maxHeight));
				}
	
				// Try to fit inside viewport (including the title)
				if (current.fitToView) {
					inner.width( width ).height( height );
	
					wrap.width( width + wPadding );
	
					// Real wrap dimensions
					width_  = wrap.width();
					height_ = wrap.height();
	
					if (current.aspectRatio) {
						while ((width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight) {
							if (steps++ > 19) {
								break;
							}
	
							height = Math.max(minHeight, Math.min(maxHeight, height - 10));
							width  = getScalar(height * ratio);
	
							if (width < minWidth) {
								width  = minWidth;
								height = getScalar(width / ratio);
							}
	
							if (width > maxWidth) {
								width  = maxWidth;
								height = getScalar(width / ratio);
							}
	
							inner.width( width ).height( height );
	
							wrap.width( width + wPadding );
	
							width_  = wrap.width();
							height_ = wrap.height();
						}
	
					} else {
						width  = Math.max(minWidth,  Math.min(width,  width  - (width_  - maxWidth_)));
						height = Math.max(minHeight, Math.min(height, height - (height_ - maxHeight_)));
					}
				}
	
				if (scrollOut && scrolling === 'auto' && height < origHeight && (width + wPadding + scrollOut) < maxWidth_) {
					width += scrollOut;
				}
	
				inner.width( width ).height( height );
	
				wrap.width( width + wPadding );
	
				width_  = wrap.width();
				height_ = wrap.height();
	
				canShrink = (width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight;
				canExpand = current.aspectRatio ? (width < origMaxWidth && height < origMaxHeight && width < origWidth && height < origHeight) : ((width < origMaxWidth || height < origMaxHeight) && (width < origWidth || height < origHeight));
	
				$.extend(current, {
					dim : {
						width	: getValue( width_ ),
						height	: getValue( height_ )
					},
					origWidth  : origWidth,
					origHeight : origHeight,
					canShrink  : canShrink,
					canExpand  : canExpand,
					wPadding   : wPadding,
					hPadding   : hPadding,
					wrapSpace  : height_ - skin.outerHeight(true),
					skinSpace  : skin.height() - height
				});
	
				if (!iframe && current.autoHeight && height > minHeight && height < maxHeight && !canExpand) {
					inner.height('auto');
				}
			},
	
			_getPosition: function (onlyAbsolute) {
				var current  = F.current,
					viewport = F.getViewport(),
					margin   = current.margin,
					width    = F.wrap.width()  + margin[1] + margin[3],
					height   = F.wrap.height() + margin[0] + margin[2],
					rez      = {
						position: 'absolute',
						top  : margin[0],
						left : margin[3]
					};
	
				if (current.autoCenter && current.fixed && !onlyAbsolute && height <= viewport.h && width <= viewport.w) {
					rez.position = 'fixed';
	
				} else if (!current.locked) {
					rez.top  += viewport.y;
					rez.left += viewport.x;
				}
	
				rez.top  = getValue(Math.max(rez.top,  rez.top  + ((viewport.h - height) * current.topRatio)));
				rez.left = getValue(Math.max(rez.left, rez.left + ((viewport.w - width)  * current.leftRatio)));
	
				return rez;
			},
	
			_afterZoomIn: function () {
				var current = F.current;
	
				if (!current) {
					return;
				}
	
				F.isOpen = F.isOpened = true;
	
				F.wrap.css('overflow', 'visible').addClass('fancybox-opened').hide().show(0);
	
				F.update();
	
				// Assign a click event
				if ( current.closeClick || (current.nextClick && F.group.length > 1) ) {
					F.inner.css('cursor', 'pointer').bind('click.fb', function(e) {
						if (!$(e.target).is('a') && !$(e.target).parent().is('a')) {
							e.preventDefault();
	
							F[ current.closeClick ? 'close' : 'next' ]();
						}
					});
				}
	
				// Create a close button
				if (current.closeBtn) {
					$(current.tpl.closeBtn).appendTo(F.skin).bind('click.fb', function(e) {
						e.preventDefault();
	
						F.close();
					});
				}
	
				// Create navigation arrows
				if (current.arrows && F.group.length > 1) {
					if (current.loop || current.index > 0) {
						$(current.tpl.prev).appendTo(F.outer).bind('click.fb', F.prev);
					}
	
					if (current.loop || current.index < F.group.length - 1) {
						$(current.tpl.next).appendTo(F.outer).bind('click.fb', F.next);
					}
				}
	
				F.trigger('afterShow');
	
				// Stop the slideshow if this is the last item
				if (!current.loop && current.index === current.group.length - 1) {
	
					F.play( false );
	
				} else if (F.opts.autoPlay && !F.player.isActive) {
					F.opts.autoPlay = false;
	
					F.play(true);
				}
			},
	
			_afterZoomOut: function ( obj ) {
				obj = obj || F.current;
	
				$('.fancybox-wrap').trigger('onReset').remove();
	
				$.extend(F, {
					group  : {},
					opts   : {},
					router : false,
					current   : null,
					isActive  : false,
					isOpened  : false,
					isOpen    : false,
					isClosing : false,
					wrap   : null,
					skin   : null,
					outer  : null,
					inner  : null
				});
	
				F.trigger('afterClose', obj);
			}
		});
	
		/*
		 *	Default transitions
		 */
	
		F.transitions = {
			getOrigPosition: function () {
				var current  = F.current,
					element  = current.element,
					orig     = current.orig,
					pos      = {},
					width    = 50,
					height   = 50,
					hPadding = current.hPadding,
					wPadding = current.wPadding,
					viewport = F.getViewport();
	
				if (!orig && current.isDom && element.is(':visible')) {
					orig = element.find('img:first');
	
					if (!orig.length) {
						orig = element;
					}
				}
	
				if (isQuery(orig)) {
					pos = orig.offset();
	
					if (orig.is('img')) {
						width  = orig.outerWidth();
						height = orig.outerHeight();
					}
	
				} else {
					pos.top  = viewport.y + (viewport.h - height) * current.topRatio;
					pos.left = viewport.x + (viewport.w - width)  * current.leftRatio;
				}
	
				if (F.wrap.css('position') === 'fixed' || current.locked) {
					pos.top  -= viewport.y;
					pos.left -= viewport.x;
				}
	
				pos = {
					top     : getValue(pos.top  - hPadding * current.topRatio),
					left    : getValue(pos.left - wPadding * current.leftRatio),
					width   : getValue(width  + wPadding),
					height  : getValue(height + hPadding)
				};
	
				return pos;
			},
	
			step: function (now, fx) {
				var ratio,
					padding,
					value,
					prop       = fx.prop,
					current    = F.current,
					wrapSpace  = current.wrapSpace,
					skinSpace  = current.skinSpace;
	
				if (prop === 'width' || prop === 'height') {
					ratio = fx.end === fx.start ? 1 : (now - fx.start) / (fx.end - fx.start);
	
					if (F.isClosing) {
						ratio = 1 - ratio;
					}
	
					padding = prop === 'width' ? current.wPadding : current.hPadding;
					value   = now - padding;
	
					F.skin[ prop ](  getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) ) );
					F.inner[ prop ]( getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) - (skinSpace * ratio) ) );
				}
			},
	
			zoomIn: function () {
				var current  = F.current,
					startPos = current.pos,
					effect   = current.openEffect,
					elastic  = effect === 'elastic',
					endPos   = $.extend({opacity : 1}, startPos);
	
				// Remove "position" property that breaks older IE
				delete endPos.position;
	
				if (elastic) {
					startPos = this.getOrigPosition();
	
					if (current.openOpacity) {
						startPos.opacity = 0.1;
					}
	
				} else if (effect === 'fade') {
					startPos.opacity = 0.1;
				}
	
				F.wrap.css(startPos).animate(endPos, {
					duration : effect === 'none' ? 0 : current.openSpeed,
					easing   : current.openEasing,
					step     : elastic ? this.step : null,
					complete : F._afterZoomIn
				});
			},
	
			zoomOut: function () {
				var current  = F.current,
					effect   = current.closeEffect,
					elastic  = effect === 'elastic',
					endPos   = {opacity : 0.1};
	
				if (elastic) {
					endPos = this.getOrigPosition();
	
					if (current.closeOpacity) {
						endPos.opacity = 0.1;
					}
				}
	
				F.wrap.animate(endPos, {
					duration : effect === 'none' ? 0 : current.closeSpeed,
					easing   : current.closeEasing,
					step     : elastic ? this.step : null,
					complete : F._afterZoomOut
				});
			},
	
			changeIn: function () {
				var current   = F.current,
					effect    = current.nextEffect,
					startPos  = current.pos,
					endPos    = { opacity : 1 },
					direction = F.direction,
					distance  = 200,
					field;
	
				startPos.opacity = 0.1;
	
				if (effect === 'elastic') {
					field = direction === 'down' || direction === 'up' ? 'top' : 'left';
	
					if (direction === 'down' || direction === 'right') {
						startPos[ field ] = getValue(getScalar(startPos[ field ]) - distance);
						endPos[ field ]   = '+=' + distance + 'px';
	
					} else {
						startPos[ field ] = getValue(getScalar(startPos[ field ]) + distance);
						endPos[ field ]   = '-=' + distance + 'px';
					}
				}
	
				// Workaround for http://bugs.jquery.com/ticket/12273
				if (effect === 'none') {
					F._afterZoomIn();
	
				} else {
					F.wrap.css(startPos).animate(endPos, {
						duration : current.nextSpeed,
						easing   : current.nextEasing,
						complete : F._afterZoomIn
					});
				}
			},
	
			changeOut: function () {
				var previous  = F.previous,
					effect    = previous.prevEffect,
					endPos    = { opacity : 0.1 },
					direction = F.direction,
					distance  = 200;
	
				if (effect === 'elastic') {
					endPos[ direction === 'down' || direction === 'up' ? 'top' : 'left' ] = ( direction === 'up' || direction === 'left' ? '-' : '+' ) + '=' + distance + 'px';
				}
	
				previous.wrap.animate(endPos, {
					duration : effect === 'none' ? 0 : previous.prevSpeed,
					easing   : previous.prevEasing,
					complete : function () {
						$(this).trigger('onReset').remove();
					}
				});
			}
		};
	
		/*
		 *	Overlay helper
		 */
	
		F.helpers.overlay = {
			defaults : {
				closeClick : true,      // if true, fancyBox will be closed when user clicks on the overlay
				speedOut   : 200,       // duration of fadeOut animation
				showEarly  : true,      // indicates if should be opened immediately or wait until the content is ready
				css        : {},        // custom CSS properties
				locked     : !isTouch,  // if true, the content will be locked into overlay
				fixed      : true       // if false, the overlay CSS position property will not be set to "fixed"
			},
	
			overlay : null,      // current handle
			fixed   : false,     // indicates if the overlay has position "fixed"
			el      : $('html'), // element that contains "the lock"
	
			// Public methods
			create : function(opts) {
				var parent;
	
				opts = $.extend({}, this.defaults, opts);
	
				if (this.overlay) {
					this.close();
				}
	
				parent = F.coming ? F.coming.parent : opts.parent;
	
				this.overlay = $('<div class="fancybox-overlay"></div>').appendTo( parent && parent.length ? parent : 'body' );
				this.fixed   = false;
	
				if (opts.fixed && F.defaults.fixed) {
					this.overlay.addClass('fancybox-overlay-fixed');
	
					this.fixed = true;
				}
			},
	
			open : function(opts) {
				var that = this;
	
				opts = $.extend({}, this.defaults, opts);
	
				if (this.overlay) {
					this.overlay.unbind('.overlay').width('auto').height('auto');
	
				} else {
					this.create(opts);
				}
	
				if (!this.fixed) {
					W.bind('resize.overlay', $.proxy( this.update, this) );
	
					this.update();
				}
	
				if (opts.closeClick) {
					this.overlay.bind('click.overlay', function(e) {
						if ($(e.target).hasClass('fancybox-overlay')) {
							if (F.isActive) {
								F.close();
							} else {
								that.close();
							}
	
							return false;
						}
					});
				}
	
				this.overlay.css( opts.css ).show();
			},
	
			close : function() {
				W.unbind('resize.overlay');
	
				if (this.el.hasClass('fancybox-lock')) {
					$('.fancybox-margin').removeClass('fancybox-margin');
	
					this.el.removeClass('fancybox-lock');
	
					W.scrollTop( this.scrollV ).scrollLeft( this.scrollH );
				}
	
				$('.fancybox-overlay').remove().hide();
	
				$.extend(this, {
					overlay : null,
					fixed   : false
				});
			},
	
			// Private, callbacks
	
			update : function () {
				var width = '100%', offsetWidth;
	
				// Reset width/height so it will not mess
				this.overlay.width(width).height('100%');
	
				// jQuery does not return reliable result for IE
				if (IE) {
					offsetWidth = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);
	
					if (D.width() > offsetWidth) {
						width = D.width();
					}
	
				} else if (D.width() > W.width()) {
					width = D.width();
				}
	
				this.overlay.width(width).height(D.height());
			},
	
			// This is where we can manipulate DOM, because later it would cause iframes to reload
			onReady : function (opts, obj) {
				var overlay = this.overlay;
	
				$('.fancybox-overlay').stop(true, true);
	
				if (!overlay) {
					this.create(opts);
				}
	
				if (opts.locked && this.fixed && obj.fixed) {
					obj.locked = this.overlay.append( obj.wrap );
					obj.fixed  = false;
				}
	
				if (opts.showEarly === true) {
					this.beforeShow.apply(this, arguments);
				}
			},
	
			beforeShow : function(opts, obj) {
				if (obj.locked && !this.el.hasClass('fancybox-lock')) {
					if (this.fixPosition !== false) {
						$('*').filter(function(){
							return ($(this).css('position') === 'fixed' && !$(this).hasClass("fancybox-overlay") && !$(this).hasClass("fancybox-wrap") );
						}).addClass('fancybox-margin');
					}
	
					this.el.addClass('fancybox-margin');
	
					this.scrollV = W.scrollTop();
					this.scrollH = W.scrollLeft();
	
					this.el.addClass('fancybox-lock');
	
					W.scrollTop( this.scrollV ).scrollLeft( this.scrollH );
				}
	
				this.open(opts);
			},
	
			onUpdate : function() {
				if (!this.fixed) {
					this.update();
				}
			},
	
			afterClose: function (opts) {
				// Remove overlay if exists and fancyBox is not opening
				// (e.g., it is not being open using afterClose callback)
				if (this.overlay && !F.coming) {
					this.overlay.fadeOut(opts.speedOut, $.proxy( this.close, this ));
				}
			}
		};
	
		/*
		 *	Title helper
		 */
	
		F.helpers.title = {
			defaults : {
				type     : 'float', // 'float', 'inside', 'outside' or 'over',
				position : 'bottom' // 'top' or 'bottom'
			},
	
			beforeShow: function (opts) {
				var current = F.current,
					text    = current.title,
					type    = opts.type,
					title,
					target;
	
				if ($.isFunction(text)) {
					text = text.call(current.element, current);
				}
	
				if (!isString(text) || $.trim(text) === '') {
					return;
				}
	
				title = $('<div class="fancybox-title fancybox-title-' + type + '-wrap">' + text + '</div>');
	
				switch (type) {
					case 'inside':
						target = F.skin;
					break;
	
					case 'outside':
						target = F.wrap;
					break;
	
					case 'over':
						target = F.inner;
					break;
	
					default: // 'float'
						target = F.skin;
	
						title.appendTo('body');
	
						if (IE) {
							title.width( title.width() );
						}
	
						title.wrapInner('<span class="child"></span>');
	
						//Increase bottom margin so this title will also fit into viewport
						F.current.margin[2] += Math.abs( getScalar(title.css('margin-bottom')) );
					break;
				}
	
				title[ (opts.position === 'top' ? 'prependTo'  : 'appendTo') ](target);
			}
		};
	
		// jQuery plugin initialization
		$.fn.fancybox = function (options) {
			var index,
				that     = $(this),
				selector = this.selector || '',
				run      = function(e) {
					var what = $(this).blur(), idx = index, relType, relVal;
	
					if (!(e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) && !what.is('.fancybox-wrap')) {
						relType = options.groupAttr || 'data-fancybox-group';
						relVal  = what.attr(relType);
	
						if (!relVal) {
							relType = 'rel';
							relVal  = what.get(0)[ relType ];
						}
	
						if (relVal && relVal !== '' && relVal !== 'nofollow') {
							what = selector.length ? $(selector) : that;
							what = what.filter('[' + relType + '="' + relVal + '"]');
							idx  = what.index(this);
						}
	
						options.index = idx;
	
						// Stop an event from bubbling if everything is fine
						if (F.open(what, options) !== false) {
							e.preventDefault();
						}
					}
				};
	
			options = options || {};
			index   = options.index || 0;
	
			if (!selector || options.live === false) {
				that.unbind('click.fb-start').bind('click.fb-start', run);
	
			} else {
				D.undelegate(selector, 'click.fb-start').delegate(selector + ":not('.fancybox-item, .fancybox-nav')", 'click.fb-start', run);
			}
	
			this.filter('[data-fancybox-start=1]').trigger('click');
	
			return this;
		};
	
		// Tests that need a body at doc ready
		D.ready(function() {
			var w1, w2;
	
			if ( $.scrollbarWidth === undefined ) {
				// http://benalman.com/projects/jquery-misc-plugins/#scrollbarwidth
				$.scrollbarWidth = function() {
					var parent = $('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo('body'),
						child  = parent.children(),
						width  = child.innerWidth() - child.height( 99 ).innerWidth();
	
					parent.remove();
	
					return width;
				};
			}
	
			if ( $.support.fixedPosition === undefined ) {
				$.support.fixedPosition = (function() {
					var elem  = $('<div style="position:fixed;top:20px;"></div>').appendTo('body'),
						fixed = ( elem[0].offsetTop === 20 || elem[0].offsetTop === 15 );
	
					elem.remove();
	
					return fixed;
				}());
			}
	
			$.extend(F.defaults, {
				scrollbarWidth : $.scrollbarWidth(),
				fixed  : $.support.fixedPosition,
				parent : $('body')
			});
	
			//Get real width of page scroll-bar
			w1 = $(window).width();
	
			H.addClass('fancybox-lock-test');
	
			w2 = $(window).width();
	
			H.removeClass('fancybox-lock-test');
	
			$("<style type='text/css'>.fancybox-margin{margin-right:" + (w2 - w1) + "px;}</style>").appendTo("head");
		});
	
	}(window, document, jQuery));


/***/ })
/******/ ]);
//# sourceMappingURL=app.min.js.map